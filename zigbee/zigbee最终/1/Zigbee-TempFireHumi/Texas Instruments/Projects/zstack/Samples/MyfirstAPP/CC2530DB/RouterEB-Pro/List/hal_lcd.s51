///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jun/2019  13:31:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee       /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Components\hal\target\CC2530EB\hal_ /
//                          lcd.c                                             /
//    Command line       =  -f "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"   /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f "C:\Users\fangxi1998\Desktop\øŒ≥ /
//                          Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-Temp /
//                          FireHumi\Texas Instruments\Projects\zstack\Sample /
//                          s\MyfirstAPP\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Config.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x04000000         /
//                          -DZDAPP_CONFIG_PAN_ID=0xA1B2                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\fangxi1998\Deskt /
//                          op\øŒ≥Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbe /
//                          e-TempFireHumi\Texas Instruments\Components\hal\t /
//                          arget\CC2530EB\hal_lcd.c" -D ZIGBEEPRO -D         /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\" -lA                  /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\" --diag_suppress      /
//                          Pe001,Pa010 -o "C:\Users\fangxi1998\Desktop\øŒ≥Ã… /
//                          Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFi /
//                          reHumi\Texas Instruments\Projects\zstack\Samples\ /
//                          MyfirstAPP\CC2530DB\RouterEB-Pro\Obj\" -e         /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 8    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ë /
//                          º∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFir /
//                          eHumi\Texas Instruments\Projects\zstack\Samples\M /
//                          yfirstAPP\CC2530DB\..\SOURCE\" -I                 /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I             /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I        /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"  /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2 /
//                          530EB\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\ /
//                          zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHu /
//                          mi\Texas Instruments\Projects\zstack\Samples\Myfi /
//                          rstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº /
//                          ∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFire /
//                          Humi\Texas Instruments\Projects\zstack\Samples\My /
//                          firstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ /
//                          INCLUDE\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº /
//                          ∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFire /
//                          Humi\Texas Instruments\Projects\zstack\Samples\My /
//                          firstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \AF\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zi /
//                          gbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi /
//                          \Texas Instruments\Projects\zstack\Samples\Myfirs /
//                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK /
//                          \" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbe /
//                          e «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Te /
//                          xas Instruments\Projects\zstack\Samples\MyfirstAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"  /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"   /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I  /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I      /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR /
//                          \" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbe /
//                          e «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Te /
//                          xas Instruments\Projects\zstack\Samples\MyfirstAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDA /
//                          TA\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zig /
//                          bee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\ /
//                          Texas Instruments\Projects\zstack\Samples\Myfirst /
//                          APP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD /
//                          E\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigb /
//                          ee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\T /
//                          exas Instruments\Projects\zstack\Samples\MyfirstA /
//                          PP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LE /
//                          VEL\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zi /
//                          gbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi /
//                          \Texas Instruments\Projects\zstack\Samples\Myfirs /
//                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L /
//                          EVEL\srf04\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã /
//                          …Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempF /
//                          ireHumi\Texas Instruments\Projects\zstack\Samples /
//                          \MyfirstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MA /
//                          C\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz              /
//    List file          =  C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee       /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\hal_lcd.s51            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ClearScreen?relay
        FUNCTION ??ClearScreen?relay,0203H
        PUBLIC ??HalLcdClearLine?relay
        FUNCTION ??HalLcdClearLine?relay,0203H
        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,0203H
        PUBLIC ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,0203H
        PUBLIC ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,0203H
        PUBLIC ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,0203H
        PUBLIC ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,0203H
        PUBLIC ??InitDisplay?relay
        FUNCTION ??InitDisplay?relay,0203H
        PUBLIC ??Print6?relay
        FUNCTION ??Print6?relay,0203H
        PUBLIC ??Print8?relay
        FUNCTION ??Print8?relay,0203H
        PUBLIC ??Print?relay
        FUNCTION ??Print?relay,0203H
        PUBLIC ??PrintCh8?relay
        FUNCTION ??PrintCh8?relay,0203H
        PUBLIC ??Printn8?relay
        FUNCTION ??Printn8?relay,0203H
        PUBLIC ??Router_Join?relay
        FUNCTION ??Router_Join?relay,0203H
        PUBLIC ??SetContrast?relay
        FUNCTION ??SetContrast?relay,0203H
        PUBLIC ??SetRamAddr?relay
        FUNCTION ??SetRamAddr?relay,0203H
        PUBLIC ??Test?relay
        FUNCTION ??Test?relay,0203H
        PUBLIC ??Write595?relay
        FUNCTION ??Write595?relay,0203H
        PUBLIC ??WriteLCD?relay
        FUNCTION ??WriteLCD?relay,0203H
        PUBLIC ??contrastctrl?relay
        FUNCTION ??contrastctrl?relay,0203H
        PUBLIC ??delay1?relay
        FUNCTION ??delay1?relay,0203H
        PUBLIC ??delay?relay
        FUNCTION ??delay?relay,0203H
        PUBLIC ??delay_us?relay
        FUNCTION ??delay_us?relay,0203H
        PUBLIC ??kaijijiemian?relay
        FUNCTION ??kaijijiemian?relay,0203H
        PUBLIC ??print_LCDdata?relay
        FUNCTION ??print_LCDdata?relay,0203H
        PUBLIC ??sendbyte?relay
        FUNCTION ??sendbyte?relay,0203H
        PUBLIC ??upLcd?relay
        FUNCTION ??upLcd?relay,0203H
        PUBLIC ??write_com?relay
        FUNCTION ??write_com?relay,0203H
        PUBLIC ??write_data?relay
        FUNCTION ??write_data?relay,0203H
        PUBLIC ClearScreen
        FUNCTION ClearScreen,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ContrastValue
        PUBLIC HalLcdClearLine
        FUNCTION HalLcdClearLine,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalLcdWriteString
        FUNCTION HalLcdWriteString,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0203H
        ARGFRAME XSTACK, 4, STACK
        PUBLIC HalLcdWriteValue
        FUNCTION HalLcdWriteValue,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC InitDisplay
        FUNCTION InitDisplay,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P1DIR
        PUBLIC Print
        FUNCTION Print,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC Print6
        FUNCTION Print6,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Print8
        FUNCTION Print8,021203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC PrintCh8
        FUNCTION PrintCh8,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC Printn8
        FUNCTION Printn8,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC Router_Join
        FUNCTION Router_Join,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SetContrast
        FUNCTION SetContrast,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SetRamAddr
        FUNCTION SetRamAddr,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Test
        FUNCTION Test,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Write595
        FUNCTION Write595,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteLCD
        FUNCTION WriteLCD,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_a
        PUBLIC contrastctrl
        FUNCTION contrastctrl,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC delay
        FUNCTION delay,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC delay1
        FUNCTION delay1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC delay_us
        FUNCTION delay_us,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC i
        PUBLIC kaijijiemian
        FUNCTION kaijijiemian,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC print_LCDdata
        FUNCTION print_LCDdata,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC sendbyte
        FUNCTION sendbyte,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC upLcd
        FUNCTION upLcd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC write_com
        FUNCTION write_com,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC write_data
        FUNCTION write_data,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memcpy         SYMBOL "osal_memcpy"
strlen              SYMBOL "strlen"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??strlen?relay      SYMBOL "?relay", strlen
ClearScreen         SYMBOL "ClearScreen"
??ClearScreen?relay SYMBOL "?relay", ClearScreen
HalLcdClearLine     SYMBOL "HalLcdClearLine"
??HalLcdClearLine?relay SYMBOL "?relay", HalLcdClearLine
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue
InitDisplay         SYMBOL "InitDisplay"
??InitDisplay?relay SYMBOL "?relay", InitDisplay
Print6              SYMBOL "Print6"
??Print6?relay      SYMBOL "?relay", Print6
Print8              SYMBOL "Print8"
??Print8?relay      SYMBOL "?relay", Print8
Print               SYMBOL "Print"
??Print?relay       SYMBOL "?relay", Print
PrintCh8            SYMBOL "PrintCh8"
??PrintCh8?relay    SYMBOL "?relay", PrintCh8
Printn8             SYMBOL "Printn8"
??Printn8?relay     SYMBOL "?relay", Printn8
Router_Join         SYMBOL "Router_Join"
??Router_Join?relay SYMBOL "?relay", Router_Join
SetContrast         SYMBOL "SetContrast"
??SetContrast?relay SYMBOL "?relay", SetContrast
SetRamAddr          SYMBOL "SetRamAddr"
??SetRamAddr?relay  SYMBOL "?relay", SetRamAddr
Test                SYMBOL "Test"
??Test?relay        SYMBOL "?relay", Test
Write595            SYMBOL "Write595"
??Write595?relay    SYMBOL "?relay", Write595
WriteLCD            SYMBOL "WriteLCD"
??WriteLCD?relay    SYMBOL "?relay", WriteLCD
contrastctrl        SYMBOL "contrastctrl"
??contrastctrl?relay SYMBOL "?relay", contrastctrl
delay1              SYMBOL "delay1"
??delay1?relay      SYMBOL "?relay", delay1
delay               SYMBOL "delay"
??delay?relay       SYMBOL "?relay", delay
delay_us            SYMBOL "delay_us"
??delay_us?relay    SYMBOL "?relay", delay_us
kaijijiemian        SYMBOL "kaijijiemian"
??kaijijiemian?relay SYMBOL "?relay", kaijijiemian
print_LCDdata       SYMBOL "print_LCDdata"
??print_LCDdata?relay SYMBOL "?relay", print_LCDdata
sendbyte            SYMBOL "sendbyte"
??sendbyte?relay    SYMBOL "?relay", sendbyte
upLcd               SYMBOL "upLcd"
??upLcd?relay       SYMBOL "?relay", upLcd
write_com           SYMBOL "write_com"
??write_com?relay   SYMBOL "?relay", write_com
write_data          SYMBOL "write_data"
??write_data?relay  SYMBOL "?relay", write_data

        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN Font8X8
        EXTERN FontSystem6x8

// C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texas Instruments\Components\hal\target\CC2530EB\hal_lcd.c
//    1 #include "LCD128_64.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    2 #include "Font.h"
//    3 #include "hal_lcd.h"
//    4 #include "OSAL.h"
//    5 #include "string.h"
//    6 
//    7 /****************************************************
//    8 * B) Command Table per device *
//    9 ****************************************************/
//   10 #define 	DisplayOff 	0xAE
//   11 #define 	DisplayOn 	0xAF
//   12 #define 	DisplayStart 	0x40
//   13 #define 	PageAddr 	0xB0
//   14 #define 	ColAddrHi 	0x10
//   15 #define 	ColAddrLo 	0x00
//   16 #define 	SegRemapOff 	0xA0
//   17 #define 	SegRemapOn 	0xA1
//   18 #define 	NormalDisp 	0xA6
//   19 #define 	ReverseDisp 	0xA7
//   20 #define 	ExitEntireD 	0xA4
//   21 #define 	EntEntireD 	0xA5
//   22 #define 	EnterRMW 	0xE0
//   23 #define 	ExitRMW 	0xEE
//   24 #define 	SWRest 		0xE2
//   25 #define 	ComRemapOff 	0xC0
//   26 #define 	ComRemapOn 	0xC8
//   27 #define 	PwrCtrlReg 	0x28
//   28 #define 	OPampBuffer 	0x01
//   29 #define 	IntReg 		0x02
//   30 #define 	IntVolBstr 	0x04
//   31 #define 	IntRegRatio 	0x20
//   32 #define 	ContCtrlReg 	0x81
//   33 #define 	CmdMuxRatio 	0x48
//   34 #define 	CmdBiasRatio 	0x50
//   35 #define 	DispOffset 	0x44
//   36 #define 	IconModeOn 	0xA3
//   37 #define 	IconModeOff 	0xA2
//   38 #define 	NlineInver 	0x4C
//   39 #define 	DCDCconver 	0x64
//   40 #define 	PowersavStandby 0xA8
//   41 #define 	PowersavSleep 	0xA9
//   42 #define 	PowersavOff 	0xE1
//   43 #define 	InterOsc 	0xAB
//   44 #define 	Device SSD1821 			/* device under demo */
//   45 #define 	ColNo 		132 		/* number of Column/Seg on LCD glass*/
//   46 #define 	RowNo 		64		/* number of Row/Com/Mux */
//   47 #define 	PS 		1 		/* fixed to Parallel mode */
//   48 #define 	PageNo 		10 		/* Total no of RAM pages */
//   49 #define 	IconPage 	10 		/* Icon Page number */
//   50 #define 	All0 		6 		/* 3 for all 0, 4 for all 1 */
//   51 #define 	All1 		4
//   52 #define 	iIntRegValue 	1 		/*Internal Regulator Resistor Ratio Value */
//   53 #define 	iContCtrlRegValue 16 		/* Contrast Control Register Value */
//   54 #define 	iIntRegValuea 	20 		/*Internal Regulator Resistor Ratio Value */
//   55 #define 	iContCtrlRegValuea 16 		/* Contrast Control Register Value */
//   56 #define 	iIntRegValueb 	1 		/*Internal Regulator Resistor Ratio Value */
//   57 #define 	iContCtrlRegValueb 16 		/* Contrast Control Register Value */
//   58 #define 	MSGNo 		16
//   59 #define 	MSGLength 	22
//   60 #define 	SSLNameNo 	4
//   61 #define 	DevicePg 	0 		//RAM page for showing device name
//   62 #define 	FeaturePg 	1 		//RAM page for showing feature
//   63 #define 	GRAPHICNo 	13
//   64 #define 	xlogo 		38
//   65 #define 	ylogo 		5
//   66 #define 	xsolomon 	91
//   67 #define 	ysolomon 	2
//   68 #define 	xsystech 	81
//   69 #define 	ysystech 	2
//   70 #define 	xlimited 	70
//   71 #define 	ylimited 	2
//   72 #define 	xcc 		16
//   73 #define 	ycc 		2
//   74 #define 	xpageq 		128
//   75 #define 	ypageq 		4
//   76 #define 	horizonal 	0
//   77 #define 	d_time 		60
//   78 ////////////////////////////////////////////////////////////////////////////////////////////
//   79 #define  CS   P1_6     //∆¨—°–≈∫≈
//   80 #define  SID  P1_5     // ˝æ›–≈∫≈
//   81 #define  SCLK P1_4     // ±÷”–≈∫≈
//   82 
//   83 
//   84 void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn);
//   85 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   86 uint8 ContrastValue =90;
ContrastValue:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ContrastValue>`
        REQUIRE __INIT_XDATA_I
//   87 void WriteLCD(uint8 fs, uint8 da);
//   88 void Write595(uint8 dat);
//   89 void delay_us(uint16 s);
//   90 void delay1(uint8 jj);
//   91 void contrastctrl(uint8 start, uint8 stop);
//   92 void HalLcdInit(void);
//   93 void PrintCh8(uint16 y,uint16 x, uint8 ch,uint16 yn);
//   94 void upLcd( char *ptr,uint8 op );
//   95 void HalLcdClearLine( uint8 line );
//   96 //****************◊‘º∫º”µƒ********************************
//   97 void write_data(unsigned char Dispdata);
//   98 void write_com(unsigned char cmdcode);
//   99 void sendbyte(unsigned char zdata);
//  100 void delay(unsigned int t);
//  101 void print_LCDdata(char  *dsp);
//  102 void kaijijiemian(void);
//  103 void Test(void);
//  104 void Router_Join(unsigned char s);
//  105 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  106 int i=0;
i:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  107 
//  108 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  109 void delay1(uint8 jj)
delay1:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function delay1
        CODE
//  110 {
        ; Saved register size: 0
        ; Auto size: 0
//  111 	uint8 i;
//  112 	for(i=0; i<jj; i++);
        MOV     R0,#0x0
        SJMP    ??delay1_0
??delay1_1:
        INC     R0
??delay1_0:
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??delay1_1
//  113 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  114 
//  115 
//  116 
//  117 
//  118 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  119 void delay_us(uint16 s)
delay_us:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function delay_us
        CODE
//  120 {
        ; Saved register size: 0
        ; Auto size: 0
//  121 	uint16 i;
//  122 	for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_4
??delay_us_0:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_0
//  123 	for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_5
??delay_us_1:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_1
//  124         for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_6
??delay_us_2:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_2
//  125 	for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_7
??delay_us_3:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_3
//  126 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_5
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_6
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_7
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  127 
//  128 
//  129 //******************************************************************************
//  130 //∫Ø ˝√˚£∫void Write595(uint8 dat)
//  131 // ‰»Î£∫ ˝æ›
//  132 // ‰≥ˆ£∫Œﬁ
//  133 //π¶ƒ‹√Ë ˆ£∫595–¥ ˝æ›£¨“ª¥Œ–¥»Î8Œª
//  134 //******************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  135 void Write595(uint8 dat)
Write595:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Write595
        CODE
//  136 {
        ; Saved register size: 0
        ; Auto size: 0
//  137 	
//  138 	uint8 ii;		
//  139 			
//  140 	for(ii = 0 ; ii < 8; ii++)
        MOV     R0,#0x8
//  141 	{
//  142 		if(dat & 0x80) 	LCD_595_DAT = 1;
??Write595_0:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??Write595_1
        SETB    0xa0.0
        SJMP    ??Write595_2
//  143 		else		LCD_595_DAT = 0;
??Write595_1:
        CLR     0xa0.0
//  144 		
//  145 		dat <<= 1;
??Write595_2:
        CLR     C
        RLC     A
        MOV     R1,A
//  146 		LCD_595_CK = 1;	
        SETB    0x90.5
//  147 		LCD_595_CK = 0;
        CLR     0x90.5
//  148 	}
        DEC     R0
        MOV     A,R0
        JNZ     ??Write595_0
//  149 	LCD_595_LD = 1;
        SETB    0x90.3
//  150 	LCD_595_LD = 0;
        CLR     0x90.3
//  151 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
        REQUIRE _A_P2
        REQUIRE _A_P1
//  152 
//  153 
//  154 
//  155 
//  156 //*****************************************************************************
//  157 //*****************************************************************************
//  158 //∫Ø ˝√˚£∫void delay(unsigned int n)
//  159 //π¶ƒ‹√Ë ˆ£∫∆’Õ®Õ¢ ±∫Ø ˝
//  160 //*****************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  161 void WriteLCD(uint8 fs, uint8 da)
WriteLCD:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function WriteLCD
        CODE
//  162 {
        FUNCALL WriteLCD, delay1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WriteLCD, Write595
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WriteLCD, delay1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  163 	delay1(2);
        ; Setup parameters for call to function delay1
        MOV     R1,#0x2
        LCALL   ??delay1?relay
//  164 	LCD_CS1 = 0;
        CLR     0x90.4
//  165 	LCD_RW = 0;			//–¥≤Ÿ◊˜
        CLR     0x80.1
//  166 	//delay1(0);	
//  167 
//  168 	if(fs){
        MOV     A,R7
        JZ      ??WriteLCD_0
//  169 		LCD_RS = 1;	
        SETB    0x90.7
        SJMP    ??WriteLCD_1
//  170 	}
//  171 	else{
//  172 		LCD_RS = 0;
??WriteLCD_0:
        CLR     0x90.7
//  173 	}
//  174        // delay1(0);
//  175 
//  176         Write595(da);
??WriteLCD_1:
        ; Setup parameters for call to function Write595
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Write595?relay
//  177 	LCD_E = 1;// = 1;
        SETB    0x90.6
//  178         delay1(2);
        ; Setup parameters for call to function delay1
        MOV     R1,#0x2
        LCALL   ??delay1?relay
//  179 	LCD_E = 0;// = 0;					
        CLR     0x90.6
//  180 	//delay1(0);
//  181 	LCD_CS1 = 1;
        SETB    0x90.4
//  182 }
        LJMP    ??Subroutine21_0 & 0xFFFF
        CFI EndBlock cfiBlock8
        REQUIRE _A_P1
        REQUIRE _A_P0
//  183 /*
//  184 //‘≠¿¥±ª∆¡±Œµƒ≥Ã–Ú
//  185 uint8 ReadLCD(uint8 fs)
//  186 {
//  187 	uint8 temp = 0;
//  188 	LCD_CS1 = 0;
//  189 	NOP;
//  190 	NOP;
//  191 	NOP;
//  192 	NOP;
//  193 	do{						
//  194 		LCD_RW = 1;
//  195 		LCD_RS = 0;
//  196 		LCD_E = 1;
//  197 		NOP;
//  198 		NOP;							
//  199 		temp = P1 & 0x80;			
//  200 		LCD_E = 0;			
//  201 
//  202 	}while(temp != 0);	
//  203 
//  204 	if(fs){
//  205 		LCD_RS = 1;	
//  206 	}
//  207 	else{
//  208 		LCD_RS = 0;
//  209 	}
//  210 	
//  211 	LCD_E = 1;
//  212 	NOP;	
//  213 	NOP;
//  214 	NOP;
//  215 	NOP;	
//  216 	temp = P1;	
//  217 	LCD_E = 0;	
//  218 	LCD_CS1 = 1;
//  219 	return(temp);
//  220 }
//  221 
//  222 
//  223 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  224 void SetRamAddr(uint8 x ,uint8 y)
SetRamAddr:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SetRamAddr
        CODE
//  225 {
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  226 	uint8 temp;
//  227 	
//  228 	temp = 0x0f & x;
//  229 	WriteLCD(COMMAND , PageAddr|temp);
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0xf
        ANL     A,R6
        ORL     A,#0xb0
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  230 
//  231 	temp = 0x0f & (y >> 4);
//  232 	WriteLCD(COMMAND , ColAddrHi|temp);
        ; Setup parameters for call to function WriteLCD
        MOV     A,R7
        SWAP    A
        ANL     A,#0xf
        ORL     A,#0x10
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  233 	temp = 0x0f & y;
//  234 	WriteLCD(COMMAND , ColAddrLo|temp);
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0xf
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock9
//  235 }
//  236 
//  237 
//  238 /*******************************************************************************
//  239 //∫Ø ˝√˚£∫void SetContrast(uint8 Gain, uint8 Step)
//  240 //π¶ƒ‹£∫lcd∂‘±»∂»…Ë∂®
//  241 // ‰»Î£∫Page-“≥£¨Col-¡–
//  242 // ‰≥ˆ£∫Œﬁ
//  243 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  244 void SetContrast(uint8 Gain, uint8 Step)
SetContrast:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function SetContrast
        CODE
//  245 {
        FUNCALL SetContrast, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetContrast, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetContrast, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  246 	WriteLCD(COMMAND , IntRegRatio | (0x0f & Gain)); 	//…Ë∂®ƒ⁄≤øµÁ◊Ë
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0xf
        ANL     A,R6
        ORL     A,#0x20
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  247 	WriteLCD(COMMAND , ContCtrlReg); 			//…Ë∂®ƒ⁄≤ø∂‘±»øÿ÷∆∆˜
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x7f
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  248 	WriteLCD(COMMAND , 0x3f & Step);
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0x3f
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock10
//  249 }
//  250 
//  251 
//  252 
//  253 /*******************************************************************************
//  254 //∫Ø ˝√˚£∫void InitDisplay(void)
//  255 //π¶ƒ‹£∫lcd…Ë∂®Œ™’˝≥£œ‘ æ◊¥Ã¨
//  256 // ‰»Î£∫Œﬁ
//  257 // ‰≥ˆ£∫Œﬁ
//  258 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  259 void InitDisplay(void)
InitDisplay:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function InitDisplay
        CODE
//  260 {
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, SetContrast
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  261 	WriteLCD(COMMAND , DisplayOff);			//πÿœ‘ æ
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x52
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  262 	WriteLCD(COMMAND , SegRemapOn);    			//ks0713/ssd1815
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x5f
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  263 	WriteLCD(COMMAND , ComRemapOn);    			//ssd1815
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x38
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  264 	SetContrast(iIntRegValue, iContCtrlRegValue); 	//…Ë∂®»± °∂‘±»∂»
        ; Setup parameters for call to function SetContrast
        MOV     R2,#0x10
        MOV     R1,#0x1
        LCALL   ??SetContrast?relay
//  265 	WriteLCD(COMMAND , PwrCtrlReg | IntVolBstr | IntReg | OPampBuffer); //turn on booster, regulator & divider
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x2f
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  266 	WriteLCD(COMMAND , DisplayOn);				//ø™œ‘ æ
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x51
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  267 }
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock11
//  268 
//  269 
//  270 /*******************************************************************************
//  271 //∫Ø ˝√˚£∫void contrastctrl(uint8 start,stop)
//  272 //π¶ƒ‹£∫lcd∂‘±»∂»µ˜’˚
//  273 // ‰»Î£∫Œﬁ
//  274 // ‰≥ˆ£∫Œﬁ
//  275 ********************************************************************************/
//  276 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  277 void contrastctrl(uint8 start, uint8 stop)
contrastctrl:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function contrastctrl
        CODE
//  278 {
        FUNCALL contrastctrl, SetContrast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL contrastctrl, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL contrastctrl, SetContrast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL contrastctrl, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     ?V0 + 0,R2
//  279 	uint8 i;
//  280 	if (start < stop)
        CLR     C
        SUBB    A,?V0 + 0
        MOV     A,R7
        MOV     R6,A
        JNC     ??contrastctrl_0
//  281 	{
//  282 		for (i=start; i<stop; i+=1)
//  283 		{
//  284 			SetContrast(iIntRegValue, i); //slowly turn on display
??contrastctrl_1:
        ; Setup parameters for call to function SetContrast
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??SetContrast?relay
//  285 			delay_us(80);
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x50
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
//  286 		}
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,?V0 + 0
        JNC     ??contrastctrl_2
        SJMP    ??contrastctrl_1
//  287 	}
//  288 	else
//  289 	{
//  290 		for (i=start; i>stop; i-=1)
//  291 		{
//  292 			SetContrast(iIntRegValue, i); //slowly turn off display
??contrastctrl_3:
        ; Setup parameters for call to function SetContrast
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??SetContrast?relay
//  293 			delay_us(120);
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x78
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
//  294 		}
        DEC     R6
??contrastctrl_0:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R6
        JC      ??contrastctrl_3
//  295 	}
//  296 }
??contrastctrl_2:
        LJMP    ??Subroutine21_0 & 0xFFFF
        CFI EndBlock cfiBlock12
//  297 
//  298 
//  299 
//  300 //**********◊‘º∫∏¯«Â≥˝µƒ*****************************************
//  301 /*
//  302 void ClearScreen(void)
//  303 {
//  304  	uint8 x,y;
//  305 	for(x = 0;x < 8 ;x++){
//  306           SetRamAddr(x , 0);
//  307 	  	for(y = 0 ; y < 128 ; y++)
//  308                 {	  					
//  309 		     WriteLCD(DATA , 0x00);
//  310 		}		
//  311 	}
//  312 }
//  313 */
//  314 //*********◊‘º∫º”…œµƒ***********************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  315 void ClearScreen(void)
ClearScreen:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ClearScreen
        CODE
//  316 {
        FUNCALL ClearScreen, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  317    
//  318   
//  319         write_com(0x01);  //ª÷∏¥µΩ‘≠Œª÷√
        ; Setup parameters for call to function write_com
        MOV     R1,#0x1
        LCALL   ??write_com?relay
//  320         delay(20);
        ; Setup parameters for call to function delay
        MOV     R2,#0x14
        LCALL   ?Subroutine16 & 0xFFFF
//  321         write_com(0x03);//«Â∆¡
//  322 	delay(200);delay(200);delay(200);
??CrossCallReturnLabel_28:
        ; Setup parameters for call to function delay
        MOV     R2,#-0x38
        LCALL   ?Subroutine12 & 0xFFFF
//  323         delay(200);delay(200);delay(200);
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function delay
        MOV     R2,#-0x38
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_32:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  324 }
//  325 
//  326 //*******◊‘º∫º”…œµƒ ************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  327 void delay(unsigned int t)
delay:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function delay
        CODE
//  328 {
        ; Saved register size: 0
        ; Auto size: 0
//  329 	unsigned int i,j;
//  330 	for(i=t; i>0;  i--)
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        SJMP    ??delay_0
//  331         for(j=541; j>0; j--);
??delay_1:
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
??delay_0:
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??delay_1
//  332 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
//  333 
//  334 /********************************************************************
//  335 * √˚≥∆ : sendbyte()
//  336 * π¶ƒ‹ : ∞¥’’“∫æßµƒ¥Æø⁄Õ®–≈–≠“È£¨∑¢ÀÕ ˝æ›
//  337 *  ‰»Î : zdata
//  338 *  ‰≥ˆ : Œﬁ
//  339 *±∏◊¢£∫◊‘º∫º”µƒ
//  340 ***********************************************************************/
//  341 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  342 void sendbyte(unsigned char zdata)
sendbyte:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function sendbyte
        CODE
//  343 {
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  344 	unsigned int i;
//  345 	for(i=0; i<8; i++)
        MOV     R2,#0x0
        MOV     R3,#0x0
//  346 	{
//  347 		if((zdata << i) & 0x80)
??sendbyte_0:
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ANL     A,#0x80
        JZ      ??sendbyte_1
//  348 		{
//  349 			SID = 1;
        SETB    0x90.5
        SJMP    ??sendbyte_2
//  350 		}
//  351 		else 
//  352 		{
//  353 			SID = 0;
??sendbyte_1:
        CLR     0x90.5
//  354 		}
//  355                 asm("nop");asm("nop");
??sendbyte_2:
        nop
        nop
//  356 		SCLK = 0;
        CLR     0x90.4
//  357                 asm("nop");asm("nop");
        nop
        nop
//  358                 asm("nop");asm("nop");
        nop
        nop
//  359 		SCLK = 1;
        SETB    0x90.4
//  360                 asm("nop");asm("nop");
        nop
        nop
//  361                 asm("nop");asm("nop");
        nop
        nop
//  362                 SCLK = 0;
        CLR     0x90.4
//  363 	}
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x8
        MOV     A,R3
        SUBB    A,#0x0
        JC      ??sendbyte_0
//  364 }
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-4
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock15
        REQUIRE _A_P1
//  365 
//  366 /********************************************************************
//  367 * √˚≥∆ : write_com()
//  368 * π¶ƒ‹ : –¥¥Æø⁄÷∏¡Ó
//  369 *  ‰»Î : cmdcode
//  370 *  ‰≥ˆ : Œﬁ
//  371 * ±∏◊¢ :◊‘º∫º”µƒ
//  372 ***********************************************************************/
//  373 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 void write_com(unsigned char cmdcode)
write_com:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function write_com
        CODE
//  375 {
        FUNCALL write_com, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_com, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_com, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_com, delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  376 	CS = 1;
        SETB    0x90.6
//  377 	sendbyte(0xf8);
        ; Setup parameters for call to function sendbyte
        MOV     R1,#-0x8
        LCALL   ?Subroutine7 & 0xFFFF
//  378 	sendbyte(cmdcode & 0xf0);
//  379 	sendbyte((cmdcode << 4) & 0xf0);
//  380 	delay(3);
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function delay
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??delay?relay
        CFI EndBlock cfiBlock16
//  381         CS = 0;
        REQUIRE ?Subroutine4
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine4
//  382 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CLR     0x90.6
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        ANL     A,R7
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
        CFI EndBlock cfiBlock18
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19
//  383 
//  384 /********************************************************************
//  385 * √˚≥∆ : write_data()
//  386 * π¶ƒ‹ : –¥¥Æø⁄◊÷Ω⁄
//  387 *  ‰»Î : Dispdata
//  388 *  ‰≥ˆ : Œﬁ
//  389 * ±∏◊¢ :◊‘º∫º”…œµƒ
//  390 *******************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  391 void write_data(unsigned char Dispdata)
write_data:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function write_data
        CODE
//  392 {
        FUNCALL write_data, delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_data, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_data, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_data, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_data, delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  393 	CS = 1;
        SETB    0x90.6
//  394         delay(100);
        ; Setup parameters for call to function delay
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??delay?relay
//  395 	sendbyte(0xfa);
        ; Setup parameters for call to function sendbyte
        MOV     R1,#-0x6
        LCALL   ?Subroutine7 & 0xFFFF
//  396         sendbyte(Dispdata & 0xf0);
//  397 	sendbyte((Dispdata << 4) & 0xf0);
//  398 	delay(2);
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function delay
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??delay?relay
//  399   
//  400        /* CS = 1;
//  401 	sendbyte(0xfa);
//  402 	sendbyte(Dispdata & 0xf0);
//  403 	sendbyte((Dispdata << 4) & 0xf0);
//  404 	delay(3);
//  405         CS = 0;*/
//  406 }
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock20
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL   ??sendbyte?relay
        ; Setup parameters for call to function sendbyte
        ; Setup parameters for call to function sendbyte
        MOV     A,#-0x10
        ANL     A,R6
        MOV     R1,A
        LCALL   ??sendbyte?relay
        ; Setup parameters for call to function sendbyte
        ; Setup parameters for call to function sendbyte
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf0
        MOV     R1,A
        LCALL   ??sendbyte?relay
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
//  407 //*************∑¢ÀÕ◊÷∑˚¥Æ**********************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  408 void print_LCDdata(char  *dsp)
print_LCDdata:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function print_LCDdata
        CODE
//  409 {     
        FUNCALL print_LCDdata, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print_LCDdata, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print_LCDdata, sendbyte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print_LCDdata, delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  410       char dispdata;
//  411       CS = 1;
        SETB    0x90.6
//  412       sendbyte(0xfa);
        ; Setup parameters for call to function sendbyte
        MOV     R1,#-0x6
        LCALL   ??sendbyte?relay
//  413       dispdata = *dsp;
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??print_LCDdata_0
//  414       while(dispdata != '\0')
//  415       {
//  416           sendbyte(dispdata & 0xf0);
??print_LCDdata_1:
        ; Setup parameters for call to function sendbyte
        MOV     A,#-0x10
        ANL     A,?V0 + 0
        MOV     R1,A
        LCALL   ??sendbyte?relay
//  417 	  sendbyte((dispdata << 4) & 0xf0);
        ; Setup parameters for call to function sendbyte
        MOV     A,?V0 + 0
        SWAP    A
        ANL     A,#0xf0
        MOV     R1,A
        LCALL   ??sendbyte?relay
//  418 	  delay(2);
        ; Setup parameters for call to function delay
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??delay?relay
//  419           dispdata = *(++dsp);
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
??print_LCDdata_0:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  420       } 
        MOV     A,?V0 + 0
        JNZ     ??print_LCDdata_1
//  421       CS = 0;
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock24
        REQUIRE _A_P1
//  422 }
//  423 
//  424 
//  425 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  426 void HalLcdInit(void)
HalLcdInit:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function HalLcdInit
        CODE
//  427 {	/*◊‘º∫∆¡±Œµƒ≥Ã–Ú∂Œ
        FUNCALL HalLcdInit, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  428         delay_us(10000);
//  429         P1DIR |= 0xFC;
//  430         P2DIR |= 0x01;
//  431         P0DIR |= 0x02;
//  432         P1_2 = 0;
//  433 	delay_us(100);	
//  434 	WriteLCD(COMMAND , 0xE2);//∏¥Œª
//  435 
//  436 	delay_us(100);
//  437 	WriteLCD(COMMAND , 0xA3);
//  438 
//  439 	delay_us(100);	
//  440 	WriteLCD(COMMAND , 0xA0);
//  441 	
//  442 	delay_us(100);
//  443 	WriteLCD(COMMAND , 0xC8);
//  444 
//  445 	delay_us(100);	
//  446 	WriteLCD(COMMAND , 0x24);
//  447 	
//  448 	delay_us(100);
//  449 	WriteLCD(COMMAND , 0x81);
//  450 
//  451 	delay_us(100);	
//  452 	WriteLCD(COMMAND , 0x14);
//  453 	
//  454 	delay_us(100);
//  455 	WriteLCD(COMMAND , 0x2F);
//  456 
//  457 	delay_us(100);	
//  458 	WriteLCD(COMMAND , 0x40);//¥”µ⁄“ª¡–ø™ ºœ‘ æ
//  459 	
//  460 	delay_us(100);
//  461 	WriteLCD(COMMAND , 0xB0);
//  462 
//  463 	delay_us(100);	
//  464 	WriteLCD(COMMAND , 0x10);
//  465 	
//  466 	delay_us(100);
//  467 	WriteLCD(COMMAND , 0x00);
//  468 
//  469 	delay_us(100);	
//  470 	WriteLCD(COMMAND , 0xAF);
//  471 
//  472 	WriteLCD(COMMAND , 0x81);
//  473 	WriteLCD(COMMAND , 0x1b);
//  474         delay_us(100);	
//  475         SetContrast(iIntRegValuea,ContrastValue);
//  476 	ClearScreen();  */
//  477        // HalLcdWriteString("IEEE:",1);
//  478        // HalLcdWriteString("Init lcd",2);
//  479       // HalLcdWriteString("Init lcd",3);
//  480       //  PrintCh8(30,30,'O',1);
//  481   //◊‘º∫º”µƒ≥Ã–Ú
//  482        P1DIR |= (1 << 4)|(1 << 5)|(1 << 6);
        ORL     0xfe,#0x70
//  483        delay(100);
        ; Setup parameters for call to function delay
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??delay?relay
//  484 	write_com(0x30);
        ; Setup parameters for call to function write_com
        MOV     R1,#0x30
        LCALL   ?Subroutine8 & 0xFFFF
//  485 	delay(5);
//  486 	write_com(0x0c);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function write_com
        MOV     R1,#0xc
        LCALL   ?Subroutine8 & 0xFFFF
//  487 	delay(5);
//  488         write_com(0x01);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function write_com
        MOV     R1,#0x1
        LCALL   ??write_com?relay
//  489         delay(50);
        ; Setup parameters for call to function delay
        MOV     R2,#0x32
        LCALL   ?Subroutine16 & 0xFFFF
//  490         write_com(0x03);
//  491 	delay(10);
??CrossCallReturnLabel_29:
        ; Setup parameters for call to function delay
        MOV     R2,#0xa
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock25
        REQUIRE P1DIR
//  492   
//  493 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOV     R3,#0x0
        LCALL   ??delay?relay
        ; Setup parameters for call to function write_com
        ; Setup parameters for call to function write_com
        MOV     R1,#0x3
        LCALL   ??write_com?relay
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ??write_com?relay
        ; Setup parameters for call to function delay
        ; Setup parameters for call to function delay
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??delay?relay
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  494 
//  495 
//  496 
//  497 /*******************************************************************************
//  498 //∫Ø ˝√˚£∫void Print6(uint8 xx, uint8 yy, uint8 ch1[], uint8 yn)
//  499 //π¶ƒ‹£∫œ‘ æ6*8◊÷∑˚¥Æ
//  500 // ‰»Î£∫xx ,yy ◊¯±Í,ch1¥˝œ‘ æµƒ◊÷∑˚¥Æ,yn «∑Ò∑¥∫⁄
//  501 // ‰≥ˆ£∫Œﬁ
//  502 ********************************************************************************/
//  503 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  504 void Print6(uint8 xx, uint8 yy, uint8 ch1[], uint8 yn)		
Print6:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function Print6
        CODE
//  505 {
        FUNCALL Print6, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print6, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print6, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     ?V0 + 3,R3
//  506 	uint8 ii = 0;
//  507 	uint8 bb = 0;
        MOV     ?V0 + 2,#0x0
//  508 	unsigned int index = 0 ;	
        SJMP    ??Print6_0
//  509 			
//  510 	while(ch1[bb] != '\0')
//  511 	{
//  512                 index = (unsigned int)(ch1[bb] - 0x20);
//  513 		index = (unsigned int)index*6;		
//  514 		for(ii=0;ii<6;ii++)
//  515 		{
//  516 			SetRamAddr(xx , yy);
//  517 			if(yn == 0)
//  518 			{
//  519 				WriteLCD(DATA, ~FontSystem6x8[index]);
//  520 				
//  521 			}
//  522 			else
//  523 			{
//  524 				WriteLCD(DATA, FontSystem6x8[index]);
??Print6_1:
        ; Setup parameters for call to function WriteLCD
        MOV     R1,#0x1
        LCALL   ??WriteLCD?relay
//  525 			}		
//  526 			index += 1;
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  527 			yy += 1;
        INC     ?V0 + 0
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        JNZ     ??Print6_2
//  528 		}		
//  529 		bb += 1;
        INC     ?V0 + 2
??Print6_0:
        MOV     ?V0 + 4,?V0 + 2
        MOV     A,?V0 + 6
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??Print6_3
        ADD     A,#-0x20
        MOV     R6,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x6
        MUL     AB
        MOV     R6,A
        MOV     R0,B
        MOV     B,#0x6
        MOV     A,R7
        MUL     AB
        ADD     A,R0
        MOV     R7,A
        MOV     ?V0 + 4,#0x6
??Print6_2:
        ; Setup parameters for call to function SetRamAddr
        MOV     R2,?V0 + 0
        MOV     R1,?V0 + 1
        LCALL   ??SetRamAddr?relay
        MOV     A,#FontSystem6x8 & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(FontSystem6x8 >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,?V0 + 3
        JNZ     ??Print6_1
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
        SJMP    ??Print6_1
//  530 	}
//  531 }
??Print6_3:
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock32
//  532 
//  533 
//  534 //*******************************************************************************
//  535 //∫Ø ˝√˚£∫void Printn8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
//  536 //π¶ƒ‹£∫œ‘ æ8*8“ª∏ˆŒﬁ∑˚∫≈ ˝æ›
//  537 // ‰»Î£∫xx , yy∆¡ƒªµ±÷–Œª÷√,no¥˝œ‘ æ ˝æ› yn=0’˝≥£œ‘ æ yn=1∑¥∫⁄œ‘ æ  le”––ßŒª
//  538 // ‰≥ˆ£∫Œﬁ
//  539 //*******************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 void Printn8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
Printn8:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function Printn8
        CODE
//  541 {
        FUNCALL Printn8, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  542 	uint8 ch2[6];
//  543 	uint8 ii;
//  544 
//  545 	for(ii = 1 ; ii <= le ;){
        MOV     R2,#0x1
        SJMP    ??Printn8_0
//  546 		ch2[le - ii] = no % 10 + 0x30;
??Printn8_1:
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,R2
        CLR     C
        SUBB    A,?V0 + 0
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  547 		no /= 10;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  548 		ii += 1;
        INC     R2
//  549 	}
??Printn8_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        JNC     ??Printn8_1
//  550 	ch2[le] = '\0';
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  551 	Print8(xx ,yy ,ch2 ,yn);
??CrossCallReturnLabel_26:
        ; Setup parameters for call to function Print8
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
//  552 }
        MOV     A,#0xa
        CFI EndBlock cfiBlock33
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock34
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock35
//  553 
//  554 /*******************************************************************************
//  555 //∫Ø ˝√˚£∫void Print8(uint16 y,uint16 x, uint8 ch,uint16 yn)
//  556 //π¶ƒ‹£∫œ‘ æ8*8◊÷∑˚
//  557 // ‰»Î£∫xx ,yy ◊¯±Í,ch¥˝œ‘ æµƒ◊÷∑˚,yn «∑Ò∑¥∫⁄
//  558 // ‰≥ˆ£∫Œﬁ
//  559 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  560 void PrintCh8(uint16 y,uint16 x, uint8 ch,uint16 yn)
PrintCh8:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function PrintCh8
        CODE
//  561 {
        FUNCALL PrintCh8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     ?V0 + 0,R4
//  562 	uint8 wm;
//  563 	uint16 adder;
//  564 	
//  565 	adder = (ch - 0x20) * 16;
        MOV     A,R1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?S_SHL
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  566 	for(wm = 0;wm < 8;wm++)
        MOV     ?V0 + 4,#0x8
//  567 	{
//  568 		SetRamAddr(y , x);
??PrintCh8_0:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine10 & 0xFFFF
//  569 		if(yn == 0)
??CrossCallReturnLabel_14:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        JNZ     ??PrintCh8_1
//  570 		{
//  571 			WriteLCD(DATA, ~Font8X8[adder]);
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
//  572 		}
//  573 		else
//  574 		{
//  575 			WriteLCD(DATA, Font8X8[adder]);
??PrintCh8_1:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine5 & 0xFFFF
//  576 		}
//  577 		adder += 1;
//  578 		x += 1;
//  579 	}
??CrossCallReturnLabel_0:
        JNZ     ??PrintCh8_0
//  580 	y += 1;
        INC     R6
//  581 	x -= 8;
        MOV     A,?V0 + 0
        ADD     A,#-0x8
        MOV     ?V0 + 0,A
//  582 	for(wm = 0;wm < 8;wm++)
        MOV     ?V0 + 4,#0x8
//  583 	{
//  584 		SetRamAddr(y , x);
??PrintCh8_2:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine10 & 0xFFFF
//  585 		if(yn == 0)
??CrossCallReturnLabel_15:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        JNZ     ??PrintCh8_3
//  586 		{
//  587 				WriteLCD(DATA, ~Font8X8[adder]);
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
//  588 		}
//  589 		else
//  590 		{
//  591 			WriteLCD(DATA, Font8X8[adder]);	
??PrintCh8_3:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine5 & 0xFFFF
//  592 		}
//  593 		adder += 1;
//  594 		x += 1;
//  595 	}
??CrossCallReturnLabel_1:
        JNZ     ??PrintCh8_2
        CFI EndBlock cfiBlock36
//  596 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     A,#0xf
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
//  597 
//  598 
//  599 /*******************************************************************************
//  600 //∫Ø ˝√˚£∫void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn)
//  601 //π¶ƒ‹£∫œ‘ æ8*8◊÷∑˚¥Æ
//  602 // ‰»Î£∫xx ,yy ◊¯±Í,ch1¥˝œ‘ æµƒ◊÷∑˚¥Æ,yn «∑Ò∑¥∫⁄
//  603 // ‰≥ˆ£∫Œﬁ
//  604 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  605 void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn)
Print8:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function Print8
        CODE
//  606 {
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     ?V0 + 0,R4
//  607 	uint8 wm ,ii = 0;
        MOV     ?V0 + 6,#0x0
        SJMP    ??Print8_0
//  608 	uint16 adder;
//  609 
//  610 	while(ch[ii] != '\0')
//  611 	{
//  612 		adder = (ch[ii] - 0x20) * 16;
//  613 
//  614 		for(wm = 0;wm < 8;wm++)
//  615 		{
//  616 			SetRamAddr(y , x);
//  617 			if(yn == 0)
//  618 			{
//  619 				WriteLCD(DATA, ~Font8X8[adder]);
//  620 			}
//  621 			else
//  622 			{
//  623 				WriteLCD(DATA, Font8X8[adder]);
//  624 			}
//  625 			adder += 1;
//  626 			x += 1;
//  627 		}
//  628 		y += 1;
//  629 		x -= 8;
//  630 		for(wm = 0;wm < 8;wm++)
//  631 		{
//  632 			SetRamAddr(y , x);
//  633 			if(yn == 0)
//  634 			{
//  635 				WriteLCD(DATA, ~Font8X8[adder]);
//  636 			}
//  637 			else
//  638 			{
//  639 				WriteLCD(DATA, Font8X8[adder]);	
??Print8_1:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine5 & 0xFFFF
//  640 			}
??CrossCallReturnLabel_2:
        JNZ     ??Print8_2
//  641 			adder += 1;
//  642 			x += 1;
//  643 		}
//  644 		ii += 1;
        INC     ?V0 + 6
//  645 		y -= 1;
        DEC     R6
??Print8_0:
        MOV     R0,?V0 + 6
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ      ??Print8_3
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?S_SHL
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
        MOV     ?V0 + 4,#0x8
??Print8_4:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_22:
        JNZ     ??Print8_5
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
??Print8_5:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ     ??Print8_4
        INC     R6
        MOV     A,?V0 + 0
        ADD     A,#-0x8
        MOV     ?V0 + 0,A
        MOV     ?V0 + 4,#0x8
??Print8_2:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_23:
        JNZ     ??Print8_1
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
        SJMP    ??Print8_1
//  646 	}
//  647 
//  648 }
??Print8_3:
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        ADD     A,#-0x20
        MOV     ?V0 + 4,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 5,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,#0x11
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_15
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_16
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_17
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     R2,?V0 + 0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SetRamAddr?relay
        MOV     A,#Font8X8 & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(Font8X8 >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOV     R1,#0x1
        LCALL   ??WriteLCD?relay
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 0
        INC     A
        MOV     ?V0 + 0,A
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62
//  649 
//  650 
//  651 /*******************************************************************************
//  652 //∫Ø ˝√˚£∫void Print16(uint16 y,uint16 x,uint8 ch[],uint16 yn)
//  653 //π¶ƒ‹£∫‘⁄∆¡ƒª…œœ‘ æ∫∫◊÷
//  654 // ‰»Î£∫x ,y ◊¯±Í,ch[]¥˝œ‘ æµƒ∫∫◊÷,yn «∑Ò∑¥∫⁄
//  655 // ‰≥ˆ£∫Œﬁ
//  656 ********************************************************************************
//  657 void Print16(uint16 y,uint16 x,uint8 ch[],uint16 yn)
//  658 {
//  659 	uint8 wm ,ii = 0;
//  660 	uint16 adder;
//  661 
//  662 	wm = 0;
//  663 	adder = 1;
//  664 	while(FontNew8X16_Index[wm] > 128)
//  665 	{
//  666 		if(FontNew8X16_Index[wm] == ch[ii])
//  667 		{
//  668 			if(FontNew8X16_Index[wm + 1] == ch[ii + 1])
//  669 			{
//  670 				adder = wm * 14;
//  671 				break;
//  672 			}
//  673 		}
//  674 		wm += 2;				//’“µΩ∫∫◊÷‘⁄À˜“˝÷–µƒŒª÷√
//  675 	}
//  676 	SetRamAddr(y , x);
//  677 
//  678 	if(adder != 1)					//’“µΩ∫∫◊÷£¨œ‘ æ≥ˆ¿¥	
//  679 	{
//  680 		
//  681 		for(wm = 0;wm < 14;wm++)
//  682 		{
//  683 			SetRamAddr(y , x);
//  684 			if(yn == 0)
//  685 			{
//  686 				WriteLCD(DATA, ~FontNew16X16[adder]);
//  687 			}
//  688 			else
//  689 			{
//  690 				WriteLCD(DATA, FontNew16X16[adder]);
//  691 			}
//  692 			adder += 1;
//  693 			x += 1;
//  694 		}
//  695                 for(wm = 0;wm < 2;wm++)
//  696 		{
//  697 			SetRamAddr(y , x);
//  698 			if(yn == 0)
//  699 			{
//  700 				WriteLCD(DATA, 0xff);
//  701 			}
//  702 			else
//  703 			{
//  704 				WriteLCD(DATA, 0x00);
//  705 			}
//  706 			x += 1;
//  707 		}
//  708 		y += 1;
//  709 		x -=16;
//  710 
//  711 		for(wm = 0;wm < 14;wm++)
//  712 		{
//  713 			SetRamAddr(y , x);
//  714 			if(yn == 0)
//  715 			{
//  716 				WriteLCD(DATA, ~FontNew16X16[adder]);
//  717 			}
//  718 			else
//  719 			{
//  720 				WriteLCD(DATA, FontNew16X16[adder]);
//  721 			}
//  722 			adder += 1;
//  723 			x += 1;
//  724 		}
//  725                 for(wm = 0;wm < 2;wm++)
//  726 		{
//  727 			SetRamAddr(y , x);
//  728 			if(yn == 0)
//  729 			{
//  730 				WriteLCD(DATA, 0xff);
//  731 			}
//  732 			else
//  733 			{
//  734 				WriteLCD(DATA, 0x00);
//  735 			}
//  736 			x += 1;
//  737 		}
//  738 
//  739 
//  740 	}
//  741 	else						//’“≤ªµΩ◊÷œ‘ æø’∏Ò			
//  742 	{
//  743 		ii += 1;
//  744 
//  745 		for(wm = 0;wm < 16;wm++)
//  746 		{
//  747 			SetRamAddr(y , x);
//  748 			if(yn == 0)
//  749 			{
//  750 				WriteLCD(DATA, 0xff);
//  751 			}
//  752 			else
//  753 			{
//  754 				WriteLCD(DATA, 0x00);
//  755 			}
//  756 			x += 1;
//  757 		}
//  758 		y += 1;
//  759 		x -= 16;
//  760 		for(wm = 0;wm < 16;wm++)
//  761 		{
//  762 			SetRamAddr(y , x);
//  763 			if(yn == 0)
//  764 			{
//  765 				WriteLCD(DATA, 0xff);
//  766 			}
//  767 			else
//  768 			{
//  769 				WriteLCD(DATA, 0x00);
//  770 			}
//  771 			x += 1;
//  772 		}
//  773 	}
//  774 }*/
//  775 
//  776 
//  777 /*******************************************************************************
//  778 //∫Ø ˝√˚£∫void Print(uint8 y, uint8 x, uint8 ch[], uint16 yn)
//  779 //π¶ƒ‹£∫ µœ÷∫∫◊÷º∞◊÷ƒ∏ªÏ∫œœ‘ æ
//  780 // ‰»Î£∫x ,y ◊¯±Í,ch[]¥˝œ‘ æµƒ∫∫◊÷ªÚ◊÷ƒ∏,yn «∑Ò∑¥∫⁄
//  781 // ‰≥ˆ£∫Œﬁ
//  782 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  783 void Print(uint8 y, uint8 x, uint8 ch[], uint16 yn)
Print:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function Print
        CODE
//  784 {
        FUNCALL Print, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  785 	uint8 ch2[3];
//  786 	uint8 ii;
//  787         ii = 0;
        MOV     ?V0 + 0,#0x0
        SJMP    ??Print_0
//  788 	while(ch[ii] != '\0')
//  789 	{
//  790 		if(ch[ii] > 128)
//  791 		{
//  792 			ch2[0] = ch[ii];
//  793 	 		ch2[1] = ch[ii + 1];
??Print_1:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  794 			ch2[2] = '\0';			//∫∫◊÷Œ™¡Ω∏ˆ◊÷Ω⁄
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  795 			//Print16(y , x , ch2 , yn);	//œ‘ æ∫∫◊÷
//  796 			x += 16;
        MOV     A,#0x10
        ADD     A,?V0 + 1
        MOV     ?V0 + 1,A
//  797 			ii += 2;
        INC     ?V0 + 0
??Print_2:
        INC     ?V0 + 0
//  798 		}
??Print_0:
        MOV     ?V0 + 2,?V0 + 0
        MOV     A,?V0 + 6
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 7
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??Print_3
        CLR     C
        SUBB    A,#-0x7f
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        JNC     ??Print_1
//  799 		else
//  800 		{
//  801 			ch2[0] = ch[ii];	
//  802 			ch2[1] = '\0';			//◊÷ƒ∏’º“ª∏ˆ◊÷Ω⁄
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  803 			Print8(y , x , ch2 , yn);	//œ‘ æ◊÷ƒ∏
        ; Setup parameters for call to function Print8
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 2,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,#0x0
        MOV     ?V0 + 2,?V0 + 4
        MOV     R2,?V0 + 2
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  804 			x += 8;
        MOV     A,#0x8
        ADD     A,?V0 + 1
        MOV     ?V0 + 1,A
//  805 			ii += 1;
        SJMP    ??Print_2
//  806 		}
//  807 	}
//  808 }
??Print_3:
        MOV     A,#0x3
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  809 void HalLcdClearLine( uint8 line )
HalLcdClearLine:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function HalLcdClearLine
        CODE
//  810 {
        FUNCALL HalLcdClearLine, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  811   Print8(line,0,"                ",1);
        ; Setup parameters for call to function Print8
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#`?<Constant "                ">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "                ">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  812 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     ?V0 + 0,R6
        MOV     R2,?V0 + 0
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOV     R3,#0x0
        LCALL   ??Print8?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  813 void HalLcdWriteString ( char *str, uint8 option)
HalLcdWriteString:
        CFI Block cfiBlock76 Using cfiCommon0
        CFI Function HalLcdWriteString
        CODE
//  814 {
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, HalLcdClearLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 3,R1
//  815   unsigned char i; 
//  816   uint8 LcdBuf[20];
//  817   osal_memcpy(LcdBuf,str,20);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  818   i = strlen(str);
//  819   LcdBuf[i] = '\0';  
        ; Setup parameters for call to function strlen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine15 & 0xFFFF
//  820   switch (option)
??CrossCallReturnLabel_27:
        MOV     A,?V0 + 3
        DEC     A
        JZ      ??HalLcdWriteString_0
        DEC     A
        JZ      ??HalLcdWriteString_0
        DEC     A
        JZ      ??HalLcdWriteString_0
        DEC     A
        JZ      ??HalLcdWriteString_0
        DEC     A
        JZ      ??HalLcdWriteString_0
        DEC     A
        JNZ     ??HalLcdWriteString_1
//  821   {
//  822     case 1:
//  823     case 2:
//  824     case 3:      
//  825     case 4:     
//  826     case 5:    
//  827     case 6:
//  828        HalLcdClearLine( option%7 );
??HalLcdWriteString_0:
        MOV     A,?V0 + 3
        MOV     B,#0x7
        DIV     AB
        MOV     R6,B
        ; Setup parameters for call to function HalLcdClearLine
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLcdClearLine?relay
//  829        Print8(option%7,0,(unsigned char *)LcdBuf,1);
        ; Setup parameters for call to function Print8
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  830      /*  y = option%7;
//  831        x = 0;
//  832 	while(LcdBuf[ii] != '\0')
//  833 	{
//  834 		adder = (LcdBuf[ii] - 0x20) * 16;
//  835 
//  836 		for(wm = 0;wm < 8;wm++)
//  837 		{
//  838 			SetRamAddr(y , x);
//  839 			if(yn == 0)
//  840 			{
//  841 				WriteLCD(DATA, ~Font8X8[adder]);
//  842 			}
//  843 			else
//  844 			{
//  845 				WriteLCD(DATA, Font8X8[adder]);
//  846 			}
//  847 			adder += 1;
//  848 			x += 1;
//  849 		}
//  850 		y += 1;
//  851 		x -= 8;
//  852 		for(wm = 0;wm < 8;wm++)
//  853 		{
//  854 			SetRamAddr(y , x);
//  855 			if(yn == 0)
//  856 			{
//  857 				WriteLCD(DATA, ~Font8X8[adder]);
//  858 			}
//  859 			else
//  860 			{
//  861 				WriteLCD(DATA, Font8X8[adder]);	
//  862 			}
//  863 			adder += 1;
//  864 			x += 1;
//  865 		}
//  866 		ii += 1;
//  867 		y -= 1;
//  868 	}*/
//  869       //Print8(option%7,0,(unsigned char *)LcdBuf,1);
//  870       break;
//  871     default :
//  872       break;
//  873   }
//  874 }
??HalLcdWriteString_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond77 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker79 Using cfiCommon1
        CFI (cfiPicker79) NoFunction
        CFI (cfiPicker79) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiPicker79
//  875 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  876 void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
HalLcdWriteValue:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function HalLcdWriteValue
        CODE
//  877 {
        ; Saved register size: 0
        ; Auto size: 0
//  878 ;
//  879 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock80
//  880 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  881 void HalLcdWriteScreen( char *line1, char *line2 )
HalLcdWriteScreen:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function HalLcdWriteScreen
        CODE
//  882 {
        ; Saved register size: 0
        ; Auto size: 0
//  883 #if (HAL_LCD == TRUE)
//  884   HalLcdWriteString( line1, 3 );
//  885   HalLcdWriteString( line2, 5 );
//  886 #endif
//  887 
//  888 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock81

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  889 void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
HalLcdWriteStringValue:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function HalLcdWriteStringValue
        CODE
//  890 {
        ; Saved register size: 0
        ; Auto size: 0
//  891 ;
//  892 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  893 void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
HalLcdWriteStringValueValue:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function HalLcdWriteStringValueValue
        CODE
//  894                                   uint16 value2, uint8 format2, uint8 line )
//  895 {
        ; Saved register size: 0
        ; Auto size: 0
//  896 ;
//  897 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  898 void upLcd( char *ptr,uint8 op )
upLcd:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function upLcd
        CODE
//  899 {
        FUNCALL upLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  900   HalLcdWriteString(ptr,op);
        ; Setup parameters for call to function HalLcdWriteString
        LCALL   ??HalLcdWriteString?relay
//  901 }
        LJMP    ??Subroutine21_0 & 0xFFFF
        CFI EndBlock cfiBlock84
//  902 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  903 void kaijijiemian(void)
kaijijiemian:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function kaijijiemian
        CODE
//  904 {
        FUNCALL kaijijiemian, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL kaijijiemian, HalLcdInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL kaijijiemian, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL kaijijiemian, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL kaijijiemian, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL kaijijiemian, Test
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL kaijijiemian, delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  905 
//  906      // P1DIR &= (0 << 0)|(0 << 1)|(0 << 2)|(0 << 3);
//  907       delay(10);
        ; Setup parameters for call to function delay
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??delay?relay
//  908       HalLcdInit();
        ; Setup parameters for call to function HalLcdInit
        LCALL   ??HalLcdInit?relay
//  909       delay(100);
        ; Setup parameters for call to function delay
        MOV     R2,#0x64
        LCALL   ?Subroutine12 & 0xFFFF
//  910 	 
//  911                     delay(200); delay(200);
//  912 		    Test(); 
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function Test
        LCALL   ??Test?relay
//  913                     delay(20);
        ; Setup parameters for call to function delay
        MOV     R2,#0x14
        CFI EndBlock cfiBlock85
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  914               
//  915                 
//  916                 
//  917 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R3,#0x0
        LCALL   ??delay?relay
        CFI EndBlock cfiBlock86
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond89) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond89) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond89) CFA_SP SP+-5
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     R3,#0x0
        LCALL   ??delay?relay
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_18
        CFI (cfiCond92) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond92) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond92) CFA_SP SP+-5
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_19
        CFI (cfiCond93) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond93) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond93) CFA_SP SP+-5
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOV     R3,#0x0
        LCALL   ??delay?relay
        ; Setup parameters for call to function delay
        ; Setup parameters for call to function delay
        ; Setup parameters for call to function delay
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??delay?relay
        ; Setup parameters for call to function delay
        ; Setup parameters for call to function delay
        ; Setup parameters for call to function delay
        MOV     R2,#-0x38
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
//  918 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  919 void Test(void)
Test:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI Function Test
        CODE
//  920 {
        FUNCALL Test, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Test, print_LCDdata
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Test, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Test, print_LCDdata
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Test, write_com
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Test, print_LCDdata
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  921       
//  922            write_com(0x80);
        ; Setup parameters for call to function write_com
        MOV     R1,#-0x80
        LCALL   ??write_com?relay
//  923            print_LCDdata("∫Ó—ﬁ—ﬁ  ");
        ; Setup parameters for call to function print_LCDdata
        MOV     R2,#`?<Constant "\\272\\356\\321\\336\\321\\336  ">` & 0xff
        MOV     R3,#(`?<Constant "\\272\\356\\321\\336\\321\\336  ">` >> 8) & 0xff
        LCALL   ?Subroutine18 & 0xFFFF
//  924 	//write_com(0x92);
//  925 	//write_data("–≈œ¢—ß‘∫");
//  926 	write_com(0x91);
//  927 	print_LCDdata("Õ¯¬ÁΩ®¡¢≥…π¶");
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function print_LCDdata
        MOV     R2,#`?<Constant "\\315\\370\\302\\347\\275\\250\\301\\242\\2` & 0xff
        MOV     R3,#(`?<Constant "\\315\\370\\302\\347\\275\\250\\301\\242\\2` >> 8) & 0xff
        LCALL   ??print_LCDdata?relay
//  928 	write_com(0x88);
        ; Setup parameters for call to function write_com
        MOV     R1,#-0x78
        LCALL   ??write_com?relay
//  929 	print_LCDdata("SHORTADDR:0x0000");
        ; Setup parameters for call to function print_LCDdata
        MOV     R2,#`?<Constant "SHORTADDR:0x0000">` & 0xff
        MOV     R3,#(`?<Constant "SHORTADDR:0x0000">` >> 8) & 0xff
        LCALL   ??print_LCDdata?relay
//  930 }
        SJMP    ??Subroutine24_0
        CFI EndBlock cfiBlock95
//  931 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  932 void Router_Join(unsigned char s)
Router_Join:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function Router_Join
        CODE
//  933 {        
        FUNCALL Router_Join, ClearScreen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, write_com
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, print_LCDdata
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, write_com
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, print_LCDdata
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, write_com
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, write_data
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, write_com
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_Join, print_LCDdata
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  934   
//  935         ClearScreen();
        ; Setup parameters for call to function ClearScreen
        LCALL   ??ClearScreen?relay
//  936         write_com(0x80);
        ; Setup parameters for call to function write_com
        MOV     R1,#-0x80
        LCALL   ??write_com?relay
//  937         print_LCDdata("∫Ó—ﬁ—ﬁ   ");
        ; Setup parameters for call to function print_LCDdata
        MOV     R2,#`?<Constant "\\272\\356\\321\\336\\321\\336   ">` & 0xff
        MOV     R3,#(`?<Constant "\\272\\356\\321\\336\\321\\336   ">` >> 8) & 0xff
        LCALL   ?Subroutine18 & 0xFFFF
//  938 	//write_com(0x92);
//  939 	//write_data(" –≈œ¢—ß‘∫");
//  940 	write_com(0x91);
//  941 	print_LCDdata("Router");
??CrossCallReturnLabel_31:
        ; Setup parameters for call to function print_LCDdata
        MOV     R2,#`?<Constant "Router">` & 0xff
        MOV     R3,#(`?<Constant "Router">` >> 8) & 0xff
        LCALL   ??print_LCDdata?relay
//  942         write_com(0x95);
        ; Setup parameters for call to function write_com
        MOV     R1,#-0x6b
        LCALL   ??write_com?relay
//  943         write_data(s);
        ; Setup parameters for call to function write_data
        MOV     A,R6
        MOV     R1,A
        LCALL   ??write_data?relay
//  944 	write_com(0x89);
        ; Setup parameters for call to function write_com
        MOV     R1,#-0x77
        LCALL   ??write_com?relay
//  945 	print_LCDdata("JoinSuccess");
        ; Setup parameters for call to function print_LCDdata
        MOV     R2,#`?<Constant "JoinSuccess">` & 0xff
        MOV     R3,#(`?<Constant "JoinSuccess">` >> 8) & 0xff
        LCALL   ??print_LCDdata?relay
//  946      
//  947 }
        LJMP    ??Subroutine21_0 & 0xFFFF
        CFI EndBlock cfiBlock96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        LCALL   ??print_LCDdata?relay
        ; Setup parameters for call to function write_com
        ; Setup parameters for call to function write_com
        MOV     R1,#-0x6f
        LCALL   ??write_com?relay
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ContrastValue>`:
        DATA8
        DB 90

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Write595?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Write595

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteLCD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteLCD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetRamAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetRamAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetContrast?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetContrast

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitDisplay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitDisplay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??contrastctrl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    contrastctrl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ClearScreen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ClearScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendbyte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sendbyte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??write_com?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    write_com

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??write_data?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    write_data

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??print_LCDdata?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    print_LCDdata

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Print6?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Print6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Printn8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Printn8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PrintCh8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PrintCh8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Print8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Print8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Print?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Print

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdClearLine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdClearLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteString?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteScreen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValueValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValueValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??upLcd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    upLcd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??kaijijiemian?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    kaijijiemian

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Test?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Test

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Router_Join?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Router_Join

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "                ">`:
        DB "                "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\272\\356\\321\\336\\321\\336  ">`:
        DB "\272\356\321\336\321\336  "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\315\\370\\302\\347\\275\\250\\301\\242\\2`:
        DB "\315\370\302\347\275\250\301\242\263\311\271\246"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SHORTADDR:0x0000">`:
        DB "SHORTADDR:0x0000"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\272\\356\\321\\336\\321\\336   ">`:
        DB "\272\356\321\336\321\336   "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Router">`:
        DB "Router"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "JoinSuccess">`:
        DB "JoinSuccess"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        END
//  948 
//  949 
// 
// 1 848 bytes in segment BANKED_CODE
//   180 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    89 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 2 029 bytes of CODE  memory
//    85 bytes of CONST memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 4 bytes shared)
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
