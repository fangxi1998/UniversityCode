###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                25/Dec/2012  10:16:53 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2. #
#                          2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstac #
#                          k\Samples\MyfirstAPP\Source\MyfirstAppCoordManage. #
#                          c                                                  #
#    Command line       =  -f "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC253 #
#                          0-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\z #
#                          stack\Samples\MyfirstAPP\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wCoord.cfg" (-DCPU32MHZ                  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\Source\MyfirstAppCoordManage #
#                          .c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D       #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D              #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          HOLD_AUTO_START -D DH_AD_KEY_DEVICE -lC            #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\List\ #
#                          " -lA "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC #
#                          2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Project #
#                          s\zstack\Samples\MyfirstAPP\CC2530DB\CoordinatorEB #
#                          \List\" --diag_suppress Pe001,Pa010 -o             #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\Obj\" #
#                           -e --require_prototypes --debug --core=plain      #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "D:\个人重要资料(勿删)\yuan #
#                          wm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2. #
#                          2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC253 #
#                          0DB\" -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack #
#                          -CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Proj #
#                          ects\zstack\Samples\MyfirstAPP\CC2530DB\..\SOURCE\ #
#                          " -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2 #
#                          530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Samples\MyfirstAPP\CC2530DB\..\..\..\ZMAIN #
#                          \TI2530DB\" -I "D:\个人重要资料(勿删)\yuanwm\桌面\ #
#                          ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3. #
#                          0\Projects\zstack\Samples\MyfirstAPP\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\" -I                      #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "D:\个人重要资料(勿删)\yua #
#                          nwm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB #
#                          \" -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC #
#                          2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Project #
#                          s\zstack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\OSAL\MCU\CCSOC\" -I                   #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "D:\个人重要资料(勿删)\yuanwm #
#                          \桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I         #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "D:\个人重要资料(勿删)\yuanw #
#                          m\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2 #
#                          .0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\" -I       #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "D:\个人重要资料(勿删)\yuanw #
#                          m\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2 #
#                          .0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\" -I        #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "D:\个人重要资料(勿删)\yuanwm #
#                          \桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\" -I              #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I                         #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "D:\个人重要资料(勿删)\yua #
#                          nwm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"    #
#                          -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC253 #
#                          0-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\z #
#                          stack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\" -I                 #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2. #
#                          2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstac #
#                          k\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\List\M #
#                          yfirstAppCoordManage.lst                           #
#    Object file        =  D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2. #
#                          2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstac #
#                          k\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\Obj\My #
#                          firstAppCoordManage.r51                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\Source\MyfirstAppCoordManage.c
      1          #include <string.h>
      2          #include "MyfirstAppCoordManage.h"
      3          #include "MyfirstApp.h"
      4          #include "hal_led.h"
      5          #include "hal_uart.h"
      6          
      7          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          byte     My_TaskID;   //用户任务ID
   \                     My_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      9          uint8    TransID=0;   //发送函数用的帧计数器
   \                     TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     10          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     11          uint8    tmp_data[60];
   \                     tmp_data:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z
     12          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          afAddrType_t   multi_DstAddr;  //群发 发送地址模式
   \                     multi_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     14          afAddrType_t   Single_DstAddr; //单播 发送地址模式
   \                     Single_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     15          
     16          //存了当前节点的网络状态，我们将他初始化为'未加入网'

   \                                 In  segment XDATA_I, align 1, keep-with-next
     17          devStates_t  NwkState = DEV_INIT;
   \                     NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
     18          
     19          void My_Task_Process_MSG ( afIncomingMSGPacket_t *msg );
     20          
     21          static void InitUART(void);
     22          void UART_CallBack( uint8 port,uint8 event);
     23          
     24          //**************************************************
     25          

   \                                 In  segment XDATA_ROM_C, align 1
     26          const uint16 My_InCluster_List[MY_ENDPOINT_MAX_OUTCLUSTERS]=
   \                     My_InCluster_List:
   \   000000   01000200     DW 1, 2
     27          {  
     28            CLUSTER_1_ID,
     29            CLUSTER_2_ID
     30          };
     31          

   \                                 In  segment XDATA_ROM_C, align 1
     32          const uint16 My_OutCluster_List[MY_ENDPOINT_MAX_INCLUSTERS]=
   \                     My_OutCluster_List:
   \   000000   01000200     DW 1, 2
     33          { 
     34            CLUSTER_1_ID,
     35            CLUSTER_2_ID
     36          };
     37          //此任务的简单描述，它保存了此任务的一些基本信息
     38          

   \                                 In  segment XDATA_ROM_C, align 1
     39          const SimpleDescriptionFormat_t    My_EndPoint_SimpleDesc=
   \                     My_EndPoint_SimpleDesc:
   \   000000   10           DB 16
   \   000001   080F0100     DW 3848, 1
   \   000005   0002         DB 0, 2
   \   000007   ....         DW My_InCluster_List
   \   000009   02           DB 2
   \   00000A   ....         DW My_OutCluster_List
     40          {
     41               MY_ENDPOINT_NO,
     42               MY_ENDPOINT_PROFID,
     43               MY_ENDPOINT_DEVICEID,
     44               MY_ENDPOINT_DEVICE_VERSION,
     45               MY_ENDPOINT_FLAGS,
     46               MY_ENDPOINT_MAX_INCLUSTERS,
     47               (uint16*)My_InCluster_List,
     48               MY_ENDPOINT_MAX_OUTCLUSTERS,
     49               (uint16*)My_OutCluster_List
     50          };
     51          
     52          //*************************************************
     53          //此任务的端点描述，它定义了此任务作为 ZigBee 应用程序对象的所有信息
     54          //我们将会在初始化函数中为它赋值。然后将他注册到应用程序框架中。

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     55          endPointDesc_t   My_EndPoint_Desc;
   \                     My_EndPoint_Desc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     56          
     57          //********************************************************
     58          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          void My_Task_Init( byte task_id )
   \                     My_Task_Init:
     60          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     61            
     62              My_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#My_TaskID
   \   000008   F0           MOVX    @DPTR,A
     63              //设置广播目的地址
     64              multi_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置广播地址模式
   \   000009   740F         MOV     A,#0xf
   \   00000B   90....       MOV     DPTR,#(multi_DstAddr + 8)
   \   00000E   F0           MOVX    @DPTR,A
     65              multi_DstAddr.endPoint = MY_ENDPOINT_NO;
   \   00000F   7410         MOV     A,#0x10
   \   000011   90....       MOV     DPTR,#(multi_DstAddr + 9)
   \   000014   F0           MOVX    @DPTR,A
     66              multi_DstAddr.addr.shortAddr = 0xffff;//设置广播地址目的地址短地址
   \   000015   90....       MOV     DPTR,#multi_DstAddr
   \   000018   74FF         MOV     A,#-0x1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
     67              
     68              //设置单播信息
     69              Single_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00001D   7402         MOV     A,#0x2
   \   00001F   90....       MOV     DPTR,#(Single_DstAddr + 8)
   \   000022   F0           MOVX    @DPTR,A
     70              Single_DstAddr.endPoint = MY_ENDPOINT_NO;
   \   000023   7410         MOV     A,#0x10
   \   000025   90....       MOV     DPTR,#(Single_DstAddr + 9)
   \   000028   F0           MOVX    @DPTR,A
     71          
     72              My_EndPoint_Desc.endPoint = MY_ENDPOINT_NO;
   \   000029   90....       MOV     DPTR,#My_EndPoint_Desc
   \   00002C   F0           MOVX    @DPTR,A
     73              My_EndPoint_Desc.task_id = &My_TaskID;
   \   00002D   90....       MOV     DPTR,#(My_EndPoint_Desc + 1)
   \   000030   74..         MOV     A,#(My_TaskID & 0xff)
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74..         MOV     A,#((My_TaskID >> 8) & 0xff)
   \   000036   F0           MOVX    @DPTR,A
     74              My_EndPoint_Desc.simpleDesc =
     75                  (SimpleDescriptionFormat_t*)&My_EndPoint_SimpleDesc;
   \   000037   90....       MOV     DPTR,#(My_EndPoint_Desc + 3)
   \   00003A   74..         MOV     A,#(My_EndPoint_SimpleDesc & 0xff)
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#((My_EndPoint_SimpleDesc >> 8) & 0xff)
   \   000040   F0           MOVX    @DPTR,A
     76              My_EndPoint_Desc.latencyReq = noLatencyReqs;
   \   000041   E4           CLR     A
   \   000042   90....       MOV     DPTR,#(My_EndPoint_Desc + 5)
   \   000045   F0           MOVX    @DPTR,A
     77          
     78              afRegister( &My_EndPoint_Desc );//在AF层注册应用对象（一个端点） 
   \   000046                ; Setup parameters for call to function afRegister
   \   000046   7A..         MOV     R2,#(My_EndPoint_Desc & 0xff)
   \   000048   7B..         MOV     R3,#((My_EndPoint_Desc >> 8) & 0xff)
   \   00004A   12....       LCALL   ??afRegister?relay
     79              
     80              InitUART();
   \   00004D                ; Setup parameters for call to function InitUART
   \   00004D   12....       LCALL   ??InitUART?relay
     81          }
   \   000050   02....       LJMP    ??Subroutine2_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     82          
     83          //**********************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     84          UINT16 My_Task_Process_Event(byte task_id,UINT16 events)
   \                     My_Task_Process_Event:
     85          {    
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     86              //当一个消息被发送给任务时,SYS_EVENT_MSG,事件会被传递给任务 
     87              //表示有一个消息等待处理。
     88              afIncomingMSGPacket_t *MSGpkt;
     89              
     90              if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??My_Task_Process_Event_0
   \   000010   E9           MOV     A,R1
   \                     ??My_Task_Process_Event_0:
   \   000011   6067         JZ      ??My_Task_Process_Event_1
     91              {
     92                  //从消息队列中取出消息
     93                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(My_TaskID);
   \   000013                ; Setup parameters for call to function osal_msg_receive
   \   000013   800E         SJMP    ??My_Task_Process_Event_2
     94                  while ( MSGpkt )
     95                  {
     96                      switch ( MSGpkt->hdr.event )
     97                      {
     98                          /*
     99                          当设备成功加入网络以后， ZigBee 设备对象（ZDO）会给所有已经在应用程序框架中注册过的任务
    100                          （也就是作为 ZigBee 的应用程序对象存在的任务）发送一个ZDO_STATE_CHANGE消息，消息的状
    101                          态指示了当前网络的状态。
    102                          */
    103                      case ZDO_STATE_CHANGE://网络状态改变事件
    104                          
    105                           NwkState = (devStates_t)MSGpkt->hdr.status;
    106                          if (( NwkState == DEV_ZB_COORD )||( NwkState == DEV_END_DEVICE ))
    107                          {  
    108                           
    109                              osal_start_timerEx(My_TaskID,MSG_EVT_ID,5000);
    110                              //HalLedSet(HAL_LED_2,HAL_LED_MODE_ON );
    111                          }
    112                          break;
    113                      case AF_INCOMING_MSG_CMD:  //模块接收到数据信息事件
    114                           My_Task_Process_MSG ( MSGpkt );//处理接收到的数据
   \                     ??My_Task_Process_Event_3:
   \   000015                ; Setup parameters for call to function My_Task_Process_MSG
   \   000015   AA..         MOV     R2,?V0 + 0
   \   000017   AB..         MOV     R3,?V0 + 1
   \   000019   12....       LCALL   ??My_Task_Process_MSG?relay
    115                           break; 
    116                      case KEY_CHANGE://按键事件
    117                         
    118                           break;
    119                     
    120                      default:
    121                           break;
    122                      }
    123                      //释放消息所在的消息缓冲区
    124                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??My_Task_Process_Event_4:
   \   00001C                ; Setup parameters for call to function osal_msg_deallocate
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   AB..         MOV     R3,?V0 + 1
   \   000020   12....       LCALL   ??osal_msg_deallocate?relay
    125                      MSGpkt = (afIncomingMSGPacket_t*)osal_msg_receive(My_TaskID);
   \   000023                ; Setup parameters for call to function osal_msg_receive
   \                     ??My_Task_Process_Event_2:
   \   000023   90....       MOV     DPTR,#My_TaskID
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   12....       LCALL   ??osal_msg_receive?relay
   \   00002B   8A..         MOV     ?V0 + 0,R2
   \   00002D   8B..         MOV     ?V0 + 1,R3
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   7002         JNZ     ??My_Task_Process_Event_5
   \   000033   E5..         MOV     A,?V0 + 1
   \                     ??My_Task_Process_Event_5:
   \   000035   603B         JZ      ??My_Task_Process_Event_6
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   85..83       MOV     DPH,?V0 + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for My_Task_Process_Event>_0`:
   \   000041   00           DB        0
   \   000042   02           DB        2
   \   000043   1A           DB        26
   \   000044   ....         DW        ??My_Task_Process_Event_3
   \   000046   D1           DB        209
   \   000047   ....         DW        ??My_Task_Process_Event_7
   \   000049   ....         DW        ??My_Task_Process_Event_4
   \                     ??My_Task_Process_Event_7:
   \   00004B   85..82       MOV     DPL,?V0 + 0
   \   00004E   85..83       MOV     DPH,?V0 + 1
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   90....       MOV     DPTR,#NwkState
   \   000056   F0           MOVX    @DPTR,A
   \   000057   6409         XRL     A,#0x9
   \   000059   6005         JZ      ??My_Task_Process_Event_8
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6406         XRL     A,#0x6
   \   00005E   70BC         JNZ     ??My_Task_Process_Event_4
   \                     ??My_Task_Process_Event_8:
   \   000060                ; Setup parameters for call to function osal_start_timerEx
   \   000060   7C88         MOV     R4,#-0x78
   \   000062   7D13         MOV     R5,#0x13
   \   000064   7A01         MOV     R2,#0x1
   \   000066   7B00         MOV     R3,#0x0
   \   000068   90....       MOV     DPTR,#My_TaskID
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ??osal_start_timerEx?relay
   \   000070   80AA         SJMP    ??My_Task_Process_Event_4
    126                  }
    127                  
    128                  return (events ^ SYS_EVENT_MSG); 
   \                     ??My_Task_Process_Event_6:
   \   000072   EE           MOV     A,R6
   \   000073   FA           MOV     R2,A
   \   000074   7480         MOV     A,#-0x80
   \   000076   6F           XRL     A,R7
   \                     ??My_Task_Process_Event_9:
   \   000077   FB           MOV     R3,A
   \   000078   803A         SJMP    ??My_Task_Process_Event_10
    129              }
    130              
    131              if(events & MSG_EVT_ID)
   \                     ??My_Task_Process_Event_1:
   \   00007A   EE           MOV     A,R6
   \   00007B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007D   5031         JNC     ??My_Task_Process_Event_11
    132              {
    133                HalLedBlink(HAL_LED_3,2,10,200);
   \   00007F                ; Setup parameters for call to function HalLedBlink
   \   00007F   7CC8         MOV     R4,#-0x38
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7B0A         MOV     R3,#0xa
   \   000085   7A02         MOV     R2,#0x2
   \   000087   7904         MOV     R1,#0x4
   \   000089   12....       LCALL   ??HalLedBlink?relay
    134                
    135                //Send_Message();
    136                HalUARTWrite( 0, tmp_data, 60);
   \   00008C                ; Setup parameters for call to function HalUARTWrite
   \   00008C   7C3C         MOV     R4,#0x3c
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   7A..         MOV     R2,#(tmp_data & 0xff)
   \   000092   7B..         MOV     R3,#((tmp_data >> 8) & 0xff)
   \   000094   7900         MOV     R1,#0x0
   \   000096   12....       LCALL   ??HalUARTWrite?relay
    137                
    138                osal_start_timerEx(My_TaskID,MSG_EVT_ID,2000);
   \   000099                ; Setup parameters for call to function osal_start_timerEx
   \   000099   7CD0         MOV     R4,#-0x30
   \   00009B   7D07         MOV     R5,#0x7
   \   00009D   7A01         MOV     R2,#0x1
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   90....       MOV     DPTR,#My_TaskID
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   ??osal_start_timerEx?relay
    139                
    140                return (events ^ MSG_EVT_ID); 
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   6E           XRL     A,R6
   \   0000AC   FA           MOV     R2,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   80C7         SJMP    ??My_Task_Process_Event_9
    141              }
    142                
    143              return 0;
   \                     ??My_Task_Process_Event_11:
   \   0000B0   7A00         MOV     R2,#0x0
   \   0000B2   7B00         MOV     R3,#0x0
   \                     ??My_Task_Process_Event_10:
   \   0000B4   7F04         MOV     R7,#0x4
   \   0000B6   02....       LJMP    ?BANKED_LEAVE_XDATA
    144             
    145          }
    146          
    147          //处理接收到的数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          void My_Task_Process_MSG ( afIncomingMSGPacket_t *msg )
   \                     My_Task_Process_MSG:
    149          {  
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    150            uint8 i;  
    151            
    152              switch ( msg->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7002         JNZ     ??My_Task_Process_MSG_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??My_Task_Process_MSG_0:
   \   000014   7042         JNZ     ??My_Task_Process_MSG_1
    153              { 
    154          
    155              case CLUSTER_1_ID:
    156          
    157                i = msg->cmd.Data[0] * 2;
   \   000016   EA           MOV     A,R2
   \   000017   2421         ADD     A,#0x21
   \   000019   F8           MOV     R0,A
   \   00001A   EB           MOV     A,R3
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   FA           MOV     R2,A
   \   000020   E9           MOV     A,R1
   \   000021   FB           MOV     R3,A
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   C3           CLR     C
   \   000031   33           RLC     A
   \   000032   FC           MOV     R4,A
    158                tmp_data[i++] = msg->cmd.Data[1];
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   C0E0         PUSH    A
   \   000037   EC           MOV     A,R4
   \   000038   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
    159                tmp_data[i]   = msg->cmd.Data[2];
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F583         MOV     DPH,A
   \   000048   8882         MOV     DPL,R0
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C0E0         PUSH    A
   \   00004F   7401         MOV     A,#0x1
   \   000051   2C           ADD     A,R4
   \   000052   12....       LCALL   ?Subroutine0 & 0xFFFF
    160                     break;
    161          
    162              case CLUSTER_2_ID:
    163               
    164                     break;    
    165              default:  break;    
    166              }
   \                     ??CrossCallReturnLabel_1:
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
    167          }
   \                     ??My_Task_Process_MSG_1:
   \   000058   7F02         MOV     R7,#0x2
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   24..         ADD     A,#(tmp_data & 0xff)
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#((tmp_data >> 8) & 0xff)
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    168          //***************************************************
    169          
    170          
    171          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    172          static void InitUART(void)
   \                     InitUART:
    173          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    174            halUARTCfg_t uartconfig;
    175            
    176            uartconfig.configured = TRUE;
   \   000009   7401         MOV     A,#0x1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    177            uartconfig.baudRate = HAL_UART_BR_38400;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7402         MOV     A,#0x2
   \   000017   F0           MOVX    @DPTR,A
    178            uartconfig.flowControl = FALSE;
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
    179            uartconfig.flowControlThreshold = 64;
   \   00001D   7403         MOV     A,#0x3
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   7440         MOV     A,#0x40
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
    180            uartconfig.idleTimeout = 6;
   \   000028   7405         MOV     A,#0x5
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7406         MOV     A,#0x6
   \   00002F   F0           MOVX    @DPTR,A
    181            uartconfig.rx.maxBufSize = 128;
   \   000030   740A         MOV     A,#0xa
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7480         MOV     A,#-0x80
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
    182            uartconfig.tx.maxBufSize = 128;
   \   00003B   7412         MOV     A,#0x12
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7480         MOV     A,#-0x80
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    183            uartconfig.intEnable = TRUE;
   \   000046   7416         MOV     A,#0x16
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   7401         MOV     A,#0x1
   \   00004D   F0           MOVX    @DPTR,A
    184            uartconfig.callBackFunc = UART_CallBack;
   \   00004E   741B         MOV     A,#0x1b
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   74..         MOV     A,#(??UART_CallBack?relay & 0xff)
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#((??UART_CallBack?relay >> 8) & 0xff)
   \   000059   F0           MOVX    @DPTR,A
    185            
    186            HalUARTOpen( 0,&uartconfig );
   \   00005A                ; Setup parameters for call to function HalUARTOpen
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   AA82         MOV     R2,DPL
   \   000062   AB83         MOV     R3,DPH
   \   000064   7900         MOV     R1,#0x0
   \   000066   12....       LCALL   ??HalUARTOpen?relay
    187          }
   \   000069   741D         MOV     A,#0x1d
   \   00006B                REQUIRE ?Subroutine1
   \   00006B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine2_0
   \   000003                ; // Fall through to label ??Subroutine2_0
    188          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          void UART_CallBack( uint8 port,uint8 event)
   \                     UART_CallBack:
    190          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 20
   \   000004   74EC         MOV     A,#-0x14
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    191            uint8 slen = 0;
    192            uint8 sbuf[20];
    193            
    194            if( event & HAL_UART_RX_TIMEOUT )
   \   000009   EA           MOV     A,R2
   \   00000A   A2E2         MOV     C,0xE0 /* A   */.2
   \   00000C   5013         JNC     ??UART_CallBack_0
    195            {
    196              slen = HalUARTRead( 0, sbuf, 20);
   \   00000E                ; Setup parameters for call to function HalUARTRead
   \   00000E   7C14         MOV     R4,#0x14
   \   000010   7D00         MOV     R5,#0x0
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AA82         MOV     R2,DPL
   \   00001A   AB83         MOV     R3,DPH
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   12....       LCALL   ??HalUARTRead?relay
    197              if(slen)
    198              {
    199          
    200              }
    201              
    202            }
    203          }
   \                     ??UART_CallBack_0:
   \   000021   7414         MOV     A,#0x14
   \   000023   80..         SJMP    ?Subroutine1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??My_Task_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    My_Task_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??My_Task_Process_Event?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    My_Task_Process_Event

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??My_Task_Process_MSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    My_Task_Process_MSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitUART?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitUART

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UART_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_CallBack

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     InitUART                     3      0     29
       -> HalUARTOpen             4      0     58
     My_Task_Init                 2      0      0
       -> afRegister              4      0      0
       -> InitUART                4      0      0
     My_Task_Process_Event        0      0     12
       -> osal_msg_receive        0      0     24
       -> My_Task_Process_MSG     0      0     24
       -> osal_msg_deallocate     0      0     24
       -> osal_msg_receive        0      0     24
       -> osal_start_timerEx      0      0     24
       -> HalLedBlink             0      0     24
       -> HalUARTWrite            0      0     24
       -> osal_start_timerEx      0      0     24
     My_Task_Process_MSG          1      0     22
     UART_CallBack                2      0     20
       -> HalUARTRead             4      0     40


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     My_TaskID                        1
     TransID                          1
     tmp_data                        60
     multi_DstAddr                   12
     Single_DstAddr                  12
     NwkState                         1
     My_InCluster_List                4
     My_OutCluster_List               4
     My_EndPoint_SimpleDesc          12
     My_EndPoint_Desc                 6
     My_Task_Init                    83
     ??Subroutine2_0                  7
     My_Task_Process_Event          185
     My_Task_Process_MSG             93
     ?Subroutine0                    10
     InitUART                       107
     ?Subroutine1                     3
     UART_CallBack                   37
     ?<Initializer for NwkState>      1
     ??My_Task_Init?relay             6
     ??My_Task_Process_Event?relay    6
     ??My_Task_Process_MSG?relay      6
     ??InitUART?relay                 6
     ??UART_CallBack?relay            6

 
 525 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  20 bytes in segment XDATA_ROM_C
  92 bytes in segment XDATA_Z
 
 556 bytes of CODE  memory
  20 bytes of CONST memory
  93 bytes of XDATA memory

Errors: none
Warnings: none
