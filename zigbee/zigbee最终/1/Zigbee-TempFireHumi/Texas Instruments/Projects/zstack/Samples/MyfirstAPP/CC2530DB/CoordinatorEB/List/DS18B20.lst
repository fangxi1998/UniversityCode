###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                25/Dec/2012  10:16:50 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2. #
#                          2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstac #
#                          k\Samples\MyfirstAPP\Source\DS18B20.C              #
#    Command line       =  -f "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC253 #
#                          0-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\z #
#                          stack\Samples\MyfirstAPP\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wCoord.cfg" (-DCPU32MHZ                  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\Source\DS18B20.C" -D         #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D HAL_UART=TRUE -D         #
#                          SERIAL_APP_PORT=0 -D HOLD_AUTO_START -D            #
#                          DH_AD_KEY_DEVICE -lC "D:\个人重要资料(勿删)\yuanwm #
#                          \桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530D #
#                          B\CoordinatorEB\List\" -lA                         #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\List\ #
#                          " --diag_suppress Pe001,Pa010 -o                   #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\Obj\" #
#                           -e --require_prototypes --debug --core=plain      #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "D:\个人重要资料(勿删)\yuan #
#                          wm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2. #
#                          2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC253 #
#                          0DB\" -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack #
#                          -CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Proj #
#                          ects\zstack\Samples\MyfirstAPP\CC2530DB\..\SOURCE\ #
#                          " -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2 #
#                          530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Samples\MyfirstAPP\CC2530DB\..\..\..\ZMAIN #
#                          \TI2530DB\" -I "D:\个人重要资料(勿删)\yuanwm\桌面\ #
#                          ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3. #
#                          0\Projects\zstack\Samples\MyfirstAPP\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\" -I                      #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "D:\个人重要资料(勿删)\yua #
#                          nwm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB #
#                          \" -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC #
#                          2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Project #
#                          s\zstack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\OSAL\MCU\CCSOC\" -I                   #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "D:\个人重要资料(勿删)\yuanwm #
#                          \桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I         #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "D:\个人重要资料(勿删)\yuanw #
#                          m\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2 #
#                          .0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\" -I       #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "D:\个人重要资料(勿删)\yuanw #
#                          m\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2 #
#                          .0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\" -I        #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "D:\个人重要资料(勿删)\yuanwm #
#                          \桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2. #
#                          0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\" -I              #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I                         #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "D:\个人重要资料(勿删)\yua #
#                          nwm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"    #
#                          -I "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC253 #
#                          0-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\z #
#                          stack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\" -I                 #
#                          "D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2 #
#                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2. #
#                          2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstac #
#                          k\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\List\D #
#                          S18B20.lst                                         #
#    Object file        =  D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2. #
#                          2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstac #
#                          k\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\Obj\DS #
#                          18B20.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\个人重要资料(勿删)\yuanwm\桌面\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\Source\DS18B20.C
      1          /**************************************************
      2            * DS18B20相关功能的实现
      3            * 相关文件：DS18B20.C
      4            * 编写日期：2011.1.4
      5            * 修改历史:
      6            *   2010.1.4 16:48 调整了变量、对函数进行优化
      7            *   2010.1.4 10:20 调整了正负温度转换,完善注释
      8          
      9          **************************************************/
     10          #include "DS18B20.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     11          unsigned char sensor_data_value[2];       //传感器数据
   \                     sensor_data_value:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     12          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     13          unsigned char FRACTION_INDEX[16] = {0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9 };//小数值查询表
   \                     FRACTION_INDEX:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for FRACTION_INDEX>`
   \   000010                REQUIRE __INIT_XDATA_I
     14          
     15          
     16          
     17          /*
     18           *    延时函数    cc2530 32M晶振 1微妙
     19           *    输入参数：  延时时间（timeout 微秒）
     20           *    输出参数：  无
     21           *    返回参数：  无
     22           *
     23           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     24          void delay_nus(unsigned int timeout)
   \                     delay_nus:
     25          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??delay_nus_0
     26              while (timeout--)
     27              {
     28                  asm("NOP");
   \                     ??delay_nus_1:
   \   000002   00           NOP
     29                  asm("NOP");
   \   000003   00           NOP
     30                  asm("NOP");
   \   000004   00           NOP
     31          
     32                
     33              }
   \                     ??delay_nus_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   28           ADD     A,R0
   \   00000C   1A           DEC     R2
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   39           ADDC    A,R1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   7001         JNZ     ??delay_nus_2
   \   000014   E9           MOV     A,R1
   \                     ??delay_nus_2:
   \   000015   70EB         JNZ     ??delay_nus_1
     34          }
   \   000017   02....       LJMP    ?BRET
     35          
     36          /*
     37           *    写命令函数
     38           *    输入参数：  命令（DS18B20.H中定义）
     39           *    输出参数：  无
     40           *    返回参数：  无
     41           *
     42           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          void DS18B20_Write(unsigned char cmd)
   \                     DS18B20_Write:
     44          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
     45              unsigned char i;
     46              SET_OUT();                  //设置IO为输出，2530->DS18B20
   \   000007   43FE80       ORL     0xfe,#0x80
     47              
     48              /*每次一位，循环8次*/
     49              for(i=0; i<8; i++)
   \   00000A   7E00         MOV     R6,#0x0
     50              {
     51                  CL_DQ();              //IO为低    
   \                     ??DS18B20_Write_0:
   \   00000C   C297         CLR     0x90.7
     52                  if( cmd & (1<<i) )    //写数据从低位开始
   \   00000E   75..01       MOV     ?V0 + 0,#0x1
   \   000011   75..00       MOV     ?V0 + 1,#0x0
   \   000014   EE           MOV     A,R6
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?S_SHL
   \   00001A   E5..         MOV     A,?V0 + 0
   \   00001C   5F           ANL     A,R7
   \   00001D   6004         JZ      ??DS18B20_Write_1
     53                  {
     54                    SET_DQ();           //IO输入高电平
   \   00001F   D297         SETB    0x90.7
   \   000021   8002         SJMP    ??DS18B20_Write_2
     55                  }
     56                  else
     57                  {
     58                    CL_DQ();            //IO输出低电平
   \                     ??DS18B20_Write_1:
   \   000023   C297         CLR     0x90.7
     59                  }
     60                  delay_nus(40);        //保持15~60us
   \                     ??DS18B20_Write_2:
   \   000025                ; Setup parameters for call to function delay_nus
   \   000025   7A28         MOV     R2,#0x28
   \   000027   7B00         MOV     R3,#0x0
   \   000029   12....       LCALL   ??delay_nus?relay
     61                  SET_DQ();             //IO口拉高
   \   00002C   D297         SETB    0x90.7
     62              }
   \   00002E   0E           INC     R6
   \   00002F   EE           MOV     A,R6
   \   000030   C3           CLR     C
   \   000031   9408         SUBB    A,#0x8
   \   000033   40D7         JC      ??DS18B20_Write_0
     63              SET_DQ();                 //IO口拉高
   \   000035   D297         SETB    0x90.7
     64          }
   \   000037                REQUIRE ?Subroutine2
   \   000037                REQUIRE _A_P1
   \   000037                REQUIRE P1DIR
   \   000037                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     65          
     66          
     67          /*
     68           *    读数据函数
     69           *    输入参数：  无
     70           *    输出参数：  无
     71           *    返回参数：  读取的数据
     72           *
     73           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          unsigned char DS18B20_Read(void)
   \                     DS18B20_Read:
     75          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
     76              unsigned char rdData;     //读出的数据
     77              unsigned char i, dat;     //临时变量
     78              
     79              rdData = 0;               //读出的数据初始化为0     
   \   000005   75..00       MOV     ?V0 + 0,#0x0
     80              
     81              /* 每次读一位，读8次 */
     82              for(i=0; i<8; i++)
   \   000008   7E00         MOV     R6,#0x0
     83              {
     84                  SET_OUT();
   \                     ??DS18B20_Read_0:
   \   00000A   43FE80       ORL     0xfe,#0x80
     85                  CL_DQ();            //IO拉低
   \   00000D   C297         CLR     0x90.7
     86                  SET_DQ();           //IO拉高
   \   00000F   D297         SETB    0x90.7
     87                  SET_IN();           //设置IO方向为输入 DS18B20->CC2530
   \   000011   53FE7F       ANL     0xfe,#0x7f
     88                  dat = DQ;           //读数据,从低位开始
   \   000014   A297         MOV     C,0x90.7
   \   000016   E4           CLR     A
   \   000017   92E0         MOV     0xE0 /* A   */.0,C
   \   000019   FA           MOV     R2,A
   \   00001A   75..01       MOV     ?V0 + 2,#0x1
   \   00001D   75..00       MOV     ?V0 + 3,#0x0
   \   000020   EE           MOV     A,R6
   \   000021   78..         MOV     R0,#?V0 + 2
   \   000023   12....       LCALL   ?S_SHL
   \   000026   AB..         MOV     R3,?V0 + 2
   \   000028   EA           MOV     A,R2
   \   000029   6005         JZ      ??DS18B20_Read_1
     89                  
     90                  if(dat)
     91                  {
     92                    rdData |= (1<<i); //如果读出的数据位为正
   \   00002B   EB           MOV     A,R3
   \   00002C   42..         ORL     ?V0 + 0,A
   \   00002E   8004         SJMP    ??DS18B20_Read_2
     93                  }
     94                  else
     95                  {
     96                    rdData &= ~(1<<i);//如果读出的数据位为负
   \                     ??DS18B20_Read_1:
   \   000030   EB           MOV     A,R3
   \   000031   F4           CPL     A
   \   000032   52..         ANL     ?V0 + 0,A
     97                  }
     98                  
     99                  delay_nus(70);      //保持60~120us
   \                     ??DS18B20_Read_2:
   \   000034                ; Setup parameters for call to function delay_nus
   \   000034   7A46         MOV     R2,#0x46
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   ??delay_nus?relay
    100                  SET_OUT();          //设置IO方向为输出 CC2530->DS18B20
   \   00003B   43FE80       ORL     0xfe,#0x80
    101          
    102              }
   \   00003E   0E           INC     R6
   \   00003F   EE           MOV     A,R6
   \   000040   C3           CLR     C
   \   000041   9408         SUBB    A,#0x8
   \   000043   40C5         JC      ??DS18B20_Read_0
    103              return (rdData);        //返回读出的数据
   \   000045   A9..         MOV     R1,?V0 + 0
   \   000047   7F04         MOV     R7,#0x4
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004C                REQUIRE _A_P1
   \   00004C                REQUIRE P1DIR
    104          }
    105          
    106          
    107          /*
    108           *    DS18B20初始化/复位函数
    109           *    输入参数：  无
    110           *    输出参数：  无
    111           *    返回参数：  无
    112           *
    113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          void DS18B20_Init(void)
   \                     DS18B20_Init:
    115          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    116              SET_OUT();
   \   000004   43FE80       ORL     0xfe,#0x80
    117              SET_DQ();         //IO口拉高
   \   000007   D297         SETB    0x90.7
    118              CL_DQ();          //IO口拉低
   \   000009   C297         CLR     0x90.7
    119              delay_nus(550);   //IO拉低后保持一段时间 480-960us
   \   00000B                ; Setup parameters for call to function delay_nus
   \   00000B   7A26         MOV     R2,#0x26
   \   00000D   7B02         MOV     R3,#0x2
   \   00000F   12....       LCALL   ??delay_nus?relay
    120              SET_DQ();         //释放
   \   000012   D297         SETB    0x90.7
    121              SET_IN();         //IO方向为输入 DS18B20->CC2530
   \   000014   53FE7F       ANL     0xfe,#0x7f
    122              delay_nus(40);    //释放总线后等待15-60us
   \   000017                ; Setup parameters for call to function delay_nus
   \   000017   7A28         MOV     R2,#0x28
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??delay_nus?relay
    123              
    124              /* 等待DQ变低 */
    125              while(DQ)
   \                     ??DS18B20_Init_0:
   \   00001E   A297         MOV     C,0x90.7
   \   000020   40FC         JC      ??DS18B20_Init_0
    126              {
    127                  ; 
    128              }
    129              delay_nus(100);   //检测到DQ 变低后，延时60-240us
   \   000022                ; Setup parameters for call to function delay_nus
   \   000022   7A64         MOV     R2,#0x64
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   ??delay_nus?relay
    130              SET_OUT();        //设置IO方向为输出 CC2530->DS18B20
   \   000029   43FE80       ORL     0xfe,#0x80
    131              SET_DQ();         //IO拉高
   \   00002C   D297         SETB    0x90.7
    132          }
   \   00002E                REQUIRE ?Subroutine1
   \   00002E                REQUIRE _A_P1
   \   00002E                REQUIRE P1DIR
   \   00002E                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    133          
    134          
    135          /*
    136           *    DS18B20 转换温度函数
    137           *    输入参数：  无
    138           *    输出参数：  无
    139           *    返回参数：  无
    140           *
    141           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    142          void DS18B20_SendConvert(void)
   \                     DS18B20_SendConvert:
    143          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    144              DS18B20_Init();               //复位18B20
   \   000004                ; Setup parameters for call to function DS18B20_Init
   \   000004   12....       LCALL   ?Subroutine0 & 0xFFFF
    145              DS18B20_Write(SKIP_ROM);      //发出跳过ROM匹配操作
    146              DS18B20_Write(CONVERT_T);     //启动温度转换
   \                     ??CrossCallReturnLabel_0:
   \   000007                ; Setup parameters for call to function DS18B20_Write
   \   000007   7944         MOV     R1,#0x44
   \   000009   12....       LCALL   ??DS18B20_Write?relay
    147          }
   \   00000C   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??DS18B20_Init?relay
   \   000003                ; Setup parameters for call to function DS18B20_Write
   \   000003                ; Setup parameters for call to function DS18B20_Write
   \   000003   79CC         MOV     R1,#-0x34
   \   000005   12....       LCALL   ??DS18B20_Write?relay
   \   000008   22           RET
    148          
    149          
    150          /*
    151           *    DS18B20获取温度函数
    152           *    输入参数：  无
    153           *    输出参数：  无
    154           *    返回参数：  无
    155           *
    156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          void DS18B20_GetTem(void)
   \                     DS18B20_GetTem:
    158          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    159              unsigned char tem_h,tem_l;    //温度高位字节及低位字节
    160              unsigned char a,b;            //临时变量
    161              unsigned char flag;           //温度正负标记，正为0，负为1
    162              
    163              DS18B20_Init();               //DS18B20复位       
   \   000005                ; Setup parameters for call to function DS18B20_Init
   \   000005   12....       LCALL   ?Subroutine0 & 0xFFFF
    164              DS18B20_Write(SKIP_ROM);      //跳过ROM匹配
    165              
    166              DS18B20_Write(RD_SCRATCHPAD); //写便笺
   \                     ??CrossCallReturnLabel_1:
   \   000008                ; Setup parameters for call to function DS18B20_Write
   \   000008   79BE         MOV     R1,#-0x42
   \   00000A   12....       LCALL   ??DS18B20_Write?relay
    167              tem_l = DS18B20_Read();       //读温度低位
   \   00000D                ; Setup parameters for call to function DS18B20_Read
   \   00000D   12....       LCALL   ??DS18B20_Read?relay
   \   000010   E9           MOV     A,R1
   \   000011   F5..         MOV     ?V0 + 0,A
    168              tem_h = DS18B20_Read();       //读温度高位
   \   000013                ; Setup parameters for call to function DS18B20_Read
   \   000013   12....       LCALL   ??DS18B20_Read?relay
   \   000016   E9           MOV     A,R1
   \   000017   FA           MOV     R2,A
    169          
    170              /* 判断温度正负 */
    171              if(tem_h & 0x80)
   \   000018   C4           SWAP    A
   \   000019   54F0         ANL     A,#0xf0
   \   00001B   FB           MOV     R3,A
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   C4           SWAP    A
   \   00001F   540F         ANL     A,#0xf
   \   000021   FC           MOV     R4,A
   \   000022   EA           MOV     A,R2
   \   000023   A2E7         MOV     C,0xE0 /* A   */.7
   \   000025   5012         JNC     ??DS18B20_GetTem_0
    172              {
    173                  flag = 1;                 //温度为负
   \   000027   7D01         MOV     R5,#0x1
    174                  a = (tem_l>>4);           //取温度低4位原码
   \   000029   EC           MOV     A,R4
   \   00002A   FE           MOV     R6,A
    175                  b = (tem_h<<4)& 0xf0;     //取温度高4位原码
    176                  tem_h = ~(a|b) + 1;       //取整数部分数值，不符号位
   \   00002B   EB           MOV     A,R3
   \   00002C   4E           ORL     A,R6
   \   00002D   F4           CPL     A
   \   00002E   04           INC     A
   \   00002F   FA           MOV     R2,A
    177                  
    178                  tem_l = ~(a&0x0f) + 1;    //取小数部分原值，不含符号位
   \   000030   740F         MOV     A,#0xf
   \   000032   5E           ANL     A,R6
   \   000033   F4           CPL     A
   \   000034   04           INC     A
   \   000035   F5..         MOV     ?V0 + 0,A
   \   000037   8008         SJMP    ??DS18B20_GetTem_1
    179              }
    180              else
    181              {
    182                  flag = 0;                 //为正
   \                     ??DS18B20_GetTem_0:
   \   000039   7D00         MOV     R5,#0x0
    183                  a = tem_h<<4;
    184                  a += (tem_l&0xf0)>>4;     //得到整数部分值 
    185                  b = tem_l&0x0f;           //得出小数部分值
    186                  tem_h = a;                //整数部分
   \   00003B   EC           MOV     A,R4
   \   00003C   2B           ADD     A,R3
   \   00003D   FA           MOV     R2,A
    187                  tem_l = b&0xff;           //小数部分
   \   00003E   53..0F       ANL     ?V0 + 0,#0xf
    188              }
    189              
    190              sensor_data_value[0] = FRACTION_INDEX[tem_l]; //查表得小数值
   \                     ??DS18B20_GetTem_1:
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   24..         ADD     A,#(FRACTION_INDEX & 0xff)
   \   000045   F582         MOV     DPL,A
   \   000047   E4           CLR     A
   \   000048   34..         ADDC    A,#((FRACTION_INDEX >> 8) & 0xff)
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   90....       MOV     DPTR,#sensor_data_value
   \   000050   F0           MOVX    @DPTR,A
    191              sensor_data_value[1] = tem_h| (flag<<7);      //整数部分，包括符号位
   \   000051   ED           MOV     A,R5
   \   000052   A2E0         MOV     C,0xE0 /* A   */.0
   \   000054   E4           CLR     A
   \   000055   92E0         MOV     0xE0 /* A   */.0,C
   \   000057   13           RRC     A
   \   000058   13           RRC     A
   \   000059   5480         ANL     A,#0x80
   \   00005B   4A           ORL     A,R2
   \   00005C   90....       MOV     DPTR,#(sensor_data_value + 1)
   \   00005F   F0           MOVX    @DPTR,A
    192          }
   \   000060   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FRACTION_INDEX>`:
   \   000000   00010102     DB 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9
   \            02030404
   \            05060607
   \            07080909

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_nus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_nus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DS18B20_Write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DS18B20_Write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DS18B20_Read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DS18B20_Read

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DS18B20_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DS18B20_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DS18B20_SendConvert?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DS18B20_SendConvert

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DS18B20_GetTem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DS18B20_GetTem
    193          
    194          
    195          
    196          

   Maximum stack usage in bytes:

     Function            ISTACK PSTACK XSTACK
     --------            ------ ------ ------
     DS18B20_GetTem          0      0     10
       -> DS18B20_Init       0      0     20
       -> DS18B20_Write      0      0     20
       -> DS18B20_Write      0      0     20
       -> DS18B20_Read       0      0     20
       -> DS18B20_Read       0      0     20
     DS18B20_Init            2      0     10
       -> delay_nus          4      0      0
       -> delay_nus          4      0      0
       -> delay_nus          4      0      0
     DS18B20_Read            0      0     22
       -> delay_nus          0      0     24
     DS18B20_SendConvert     2      0      0
       -> DS18B20_Init       4      0      0
       -> DS18B20_Write      4      0      0
       -> DS18B20_Write      4      0      0
     DS18B20_Write           0      0     20
       -> delay_nus          0      0     20
     delay_nus               0      0     12


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     _A_P1                                1
     P1DIR                                1
     sensor_data_value                    2
     FRACTION_INDEX                      16
     delay_nus                           26
     DS18B20_Write                       55
     ?Subroutine2                         5
     DS18B20_Read                        76
     DS18B20_Init                        46
     ?Subroutine1                         7
     DS18B20_SendConvert                 14
     ?Subroutine0                         9
     DS18B20_GetTem                      99
     ?<Initializer for FRACTION_INDEX>   16
     ??delay_nus?relay                    6
     ??DS18B20_Write?relay                6
     ??DS18B20_Read?relay                 6
     ??DS18B20_Init?relay                 6
     ??DS18B20_SendConvert?relay          6
     ??DS18B20_GetTem?relay               6

 
 337 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
  16 bytes in segment XDATA_I
  16 bytes in segment XDATA_ID
   2 bytes in segment XDATA_Z
 
 389 bytes of CODE  memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  18 bytes of XDATA memory

Errors: none
Warnings: none
