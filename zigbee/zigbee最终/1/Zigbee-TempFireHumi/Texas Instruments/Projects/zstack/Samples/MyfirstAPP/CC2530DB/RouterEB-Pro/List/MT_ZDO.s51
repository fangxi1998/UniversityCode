///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jun/2019  13:31:51 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee       /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Components\mt\MT_ZDO.c              /
//    Command line       =  -f "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"   /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f "C:\Users\fangxi1998\Desktop\øŒ≥ /
//                          Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-Temp /
//                          FireHumi\Texas Instruments\Projects\zstack\Sample /
//                          s\MyfirstAPP\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Config.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x04000000         /
//                          -DZDAPP_CONFIG_PAN_ID=0xA1B2                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\fangxi1998\Deskt /
//                          op\øŒ≥Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbe /
//                          e-TempFireHumi\Texas Instruments\Components\mt\MT /
//                          _ZDO.c" -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D    /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\" -lA                  /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\" --diag_suppress      /
//                          Pe001,Pa010 -o "C:\Users\fangxi1998\Desktop\øŒ≥Ã… /
//                          Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFi /
//                          reHumi\Texas Instruments\Projects\zstack\Samples\ /
//                          MyfirstAPP\CC2530DB\RouterEB-Pro\Obj\" -e         /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 8    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ë /
//                          º∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFir /
//                          eHumi\Texas Instruments\Projects\zstack\Samples\M /
//                          yfirstAPP\CC2530DB\..\SOURCE\" -I                 /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I             /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I        /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"  /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2 /
//                          530EB\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\ /
//                          zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHu /
//                          mi\Texas Instruments\Projects\zstack\Samples\Myfi /
//                          rstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº /
//                          ∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFire /
//                          Humi\Texas Instruments\Projects\zstack\Samples\My /
//                          firstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ /
//                          INCLUDE\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº /
//                          ∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFire /
//                          Humi\Texas Instruments\Projects\zstack\Samples\My /
//                          firstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \AF\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zi /
//                          gbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi /
//                          \Texas Instruments\Projects\zstack\Samples\Myfirs /
//                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK /
//                          \" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbe /
//                          e «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Te /
//                          xas Instruments\Projects\zstack\Samples\MyfirstAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"  /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"   /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I  /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I      /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR /
//                          \" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbe /
//                          e «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Te /
//                          xas Instruments\Projects\zstack\Samples\MyfirstAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDA /
//                          TA\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zig /
//                          bee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\ /
//                          Texas Instruments\Projects\zstack\Samples\Myfirst /
//                          APP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD /
//                          E\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigb /
//                          ee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\T /
//                          exas Instruments\Projects\zstack\Samples\MyfirstA /
//                          PP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LE /
//                          VEL\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zi /
//                          gbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi /
//                          \Texas Instruments\Projects\zstack\Samples\Myfirs /
//                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L /
//                          EVEL\srf04\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã /
//                          …Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempF /
//                          ireHumi\Texas Instruments\Projects\zstack\Samples /
//                          \MyfirstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MA /
//                          C\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz              /
//    List file          =  C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee       /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\MT_ZDO.s51             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MT_ZdoActiveEpRequest?relay
        FUNCTION ??MT_ZdoActiveEpRequest?relay,0203H
        PUBLIC ??MT_ZdoBindRequest?relay
        FUNCTION ??MT_ZdoBindRequest?relay,0203H
        PUBLIC ??MT_ZdoCommandProcessing?relay
        FUNCTION ??MT_ZdoCommandProcessing?relay,0203H
        PUBLIC ??MT_ZdoComplexDescRequest?relay
        FUNCTION ??MT_ZdoComplexDescRequest?relay,0203H
        PUBLIC ??MT_ZdoEndDevAnnce?relay
        FUNCTION ??MT_ZdoEndDevAnnce?relay,0203H
        PUBLIC ??MT_ZdoEndDevBindRequest?relay
        FUNCTION ??MT_ZdoEndDevBindRequest?relay,0203H
        PUBLIC ??MT_ZdoIEEEAddrRequest?relay
        FUNCTION ??MT_ZdoIEEEAddrRequest?relay,0203H
        PUBLIC ??MT_ZdoMatchDescRequest?relay
        FUNCTION ??MT_ZdoMatchDescRequest?relay,0203H
        PUBLIC ??MT_ZdoNWKAddressRequest?relay
        FUNCTION ??MT_ZdoNWKAddressRequest?relay,0203H
        PUBLIC ??MT_ZdoNodeDescRequest?relay
        FUNCTION ??MT_ZdoNodeDescRequest?relay,0203H
        PUBLIC ??MT_ZdoPowerDescRequest?relay
        FUNCTION ??MT_ZdoPowerDescRequest?relay,0203H
        PUBLIC ??MT_ZdoServiceDiscRequest?relay
        FUNCTION ??MT_ZdoServiceDiscRequest?relay,0203H
        PUBLIC ??MT_ZdoSimpleDescRequest?relay
        FUNCTION ??MT_ZdoSimpleDescRequest?relay,0203H
        PUBLIC ??MT_ZdoStartupFromApp?relay
        FUNCTION ??MT_ZdoStartupFromApp?relay,0203H
        PUBLIC ??MT_ZdoUnbindRequest?relay
        FUNCTION ??MT_ZdoUnbindRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescRequest?relay
        FUNCTION ??MT_ZdoUserDescRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescSet?relay
        FUNCTION ??MT_ZdoUserDescSet?relay,0203H
        PUBLIC MT_ZdoActiveEpRequest
        FUNCTION MT_ZdoActiveEpRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoBindRequest
        FUNCTION MT_ZdoBindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoCommandProcessing
        FUNCTION MT_ZdoCommandProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoComplexDescRequest
        FUNCTION MT_ZdoComplexDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoEndDevAnnce
        FUNCTION MT_ZdoEndDevAnnce,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoEndDevBindRequest
        FUNCTION MT_ZdoEndDevBindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 94, STACK
        PUBLIC MT_ZdoIEEEAddrRequest
        FUNCTION MT_ZdoIEEEAddrRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoMatchDescRequest
        FUNCTION MT_ZdoMatchDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 96, STACK
        PUBLIC MT_ZdoNWKAddressRequest
        FUNCTION MT_ZdoNWKAddressRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoNodeDescRequest
        FUNCTION MT_ZdoNodeDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoPowerDescRequest
        FUNCTION MT_ZdoPowerDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoServiceDiscRequest
        FUNCTION MT_ZdoServiceDiscRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSimpleDescRequest
        FUNCTION MT_ZdoSimpleDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoStartupFromApp
        FUNCTION MT_ZdoStartupFromApp,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoUnbindRequest
        FUNCTION MT_ZdoUnbindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoUserDescRequest
        FUNCTION MT_ZdoUserDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoUserDescSet
        FUNCTION MT_ZdoUserDescSet,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC _zdoCallbackSub
        PUBLIC mtzdoResponseBuffer
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
osal_memcpy         SYMBOL "osal_memcpy"
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
ZDOInitDevice       SYMBOL "ZDOInitDevice"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
??ZDP_BindUnbindReq?relay SYMBOL "?relay", ZDP_BindUnbindReq
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??ZDP_NWKAddrOfInterestReq?relay SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
??ZDP_ServerDiscReq?relay SYMBOL "?relay", ZDP_ServerDiscReq
??ZDP_SimpleDescReq?relay SYMBOL "?relay", ZDP_SimpleDescReq
??ZDP_UserDescSet?relay SYMBOL "?relay", ZDP_UserDescSet
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
MT_ZdoActiveEpRequest SYMBOL "MT_ZdoActiveEpRequest"
??MT_ZdoActiveEpRequest?relay SYMBOL "?relay", MT_ZdoActiveEpRequest
MT_ZdoBindRequest   SYMBOL "MT_ZdoBindRequest"
??MT_ZdoBindRequest?relay SYMBOL "?relay", MT_ZdoBindRequest
MT_ZdoCommandProcessing SYMBOL "MT_ZdoCommandProcessing"
??MT_ZdoCommandProcessing?relay SYMBOL "?relay", MT_ZdoCommandProcessing
MT_ZdoComplexDescRequest SYMBOL "MT_ZdoComplexDescRequest"
??MT_ZdoComplexDescRequest?relay SYMBOL "?relay", MT_ZdoComplexDescRequest
MT_ZdoEndDevAnnce   SYMBOL "MT_ZdoEndDevAnnce"
??MT_ZdoEndDevAnnce?relay SYMBOL "?relay", MT_ZdoEndDevAnnce
MT_ZdoEndDevBindRequest SYMBOL "MT_ZdoEndDevBindRequest"
??MT_ZdoEndDevBindRequest?relay SYMBOL "?relay", MT_ZdoEndDevBindRequest
MT_ZdoIEEEAddrRequest SYMBOL "MT_ZdoIEEEAddrRequest"
??MT_ZdoIEEEAddrRequest?relay SYMBOL "?relay", MT_ZdoIEEEAddrRequest
MT_ZdoMatchDescRequest SYMBOL "MT_ZdoMatchDescRequest"
??MT_ZdoMatchDescRequest?relay SYMBOL "?relay", MT_ZdoMatchDescRequest
MT_ZdoNWKAddressRequest SYMBOL "MT_ZdoNWKAddressRequest"
??MT_ZdoNWKAddressRequest?relay SYMBOL "?relay", MT_ZdoNWKAddressRequest
MT_ZdoNodeDescRequest SYMBOL "MT_ZdoNodeDescRequest"
??MT_ZdoNodeDescRequest?relay SYMBOL "?relay", MT_ZdoNodeDescRequest
MT_ZdoPowerDescRequest SYMBOL "MT_ZdoPowerDescRequest"
??MT_ZdoPowerDescRequest?relay SYMBOL "?relay", MT_ZdoPowerDescRequest
MT_ZdoServiceDiscRequest SYMBOL "MT_ZdoServiceDiscRequest"
??MT_ZdoServiceDiscRequest?relay SYMBOL "?relay", MT_ZdoServiceDiscRequest
MT_ZdoSimpleDescRequest SYMBOL "MT_ZdoSimpleDescRequest"
??MT_ZdoSimpleDescRequest?relay SYMBOL "?relay", MT_ZdoSimpleDescRequest
MT_ZdoStartupFromApp SYMBOL "MT_ZdoStartupFromApp"
??MT_ZdoStartupFromApp?relay SYMBOL "?relay", MT_ZdoStartupFromApp
MT_ZdoUnbindRequest SYMBOL "MT_ZdoUnbindRequest"
??MT_ZdoUnbindRequest?relay SYMBOL "?relay", MT_ZdoUnbindRequest
MT_ZdoUserDescRequest SYMBOL "MT_ZdoUserDescRequest"
??MT_ZdoUserDescRequest?relay SYMBOL "?relay", MT_ZdoUserDescRequest
MT_ZdoUserDescSet   SYMBOL "MT_ZdoUserDescSet"
??MT_ZdoUserDescSet?relay SYMBOL "?relay", MT_ZdoUserDescSet

        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,00H
        EXTERN ??ZDP_BindUnbindReq?relay
        FUNCTION ??ZDP_BindUnbindReq?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??ZDP_NWKAddrOfInterestReq?relay
        FUNCTION ??ZDP_NWKAddrOfInterestReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??ZDP_ServerDiscReq?relay
        FUNCTION ??ZDP_ServerDiscReq?relay,00H
        EXTERN ??ZDP_SimpleDescReq?relay
        FUNCTION ??ZDP_SimpleDescReq?relay,00H
        EXTERN ??ZDP_UserDescSet?relay
        FUNCTION ??ZDP_UserDescSet?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H

// C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texas Instruments\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2009-01-05 16:58:00 -0800 (Mon, 05 Jan 2009) $
//    4   Revision:       $Revision: 18682 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8 
//    9   Copyright 2004-2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef MT_ZDO_FUNC
//   41 
//   42 /**************************************************************************************************
//   43  * INCLUDES
//   44  **************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "MT.h"
//   48 #include "MT_ZDO.h"
//   49 #include "APSMEDE.h"
//   50 #include "ZDConfig.h"
//   51 #include "ZDProfile.h"
//   52 #include "ZDObject.h"
//   53 #include "ZDApp.h"
//   54 
//   55 #if !defined( WIN32 )
//   56   #include "OnBoard.h"
//   57 #endif
//   58 
//   59 #include "nwk_util.h"
//   60 
//   61 /**************************************************************************************************
//   62  * CONSTANTS
//   63  **************************************************************************************************/
//   64 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   65 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   66 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   67 
//   68 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   69 
//   70 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   71 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   72 
//   73 /**************************************************************************************************
//   74  * GLOBAL VARIABLES
//   75  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   76 uint32 _zdoCallbackSub;
_zdoCallbackSub:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   77 
//   78 /**************************************************************************************************
//   79  * LOCAL VARIABLES
//   80  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 uint8 mtzdoResponseBuffer[MTZDO_RESPONSE_BUFFER_LEN];
mtzdoResponseBuffer:
        DS 100
        REQUIRE __INIT_XDATA_Z
//   82 
//   83 /**************************************************************************************************
//   84  * LOCAL FUNCTIONS
//   85  **************************************************************************************************/
//   86 #if defined (MT_ZDO_FUNC)
//   87 void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//   88 void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//   89 void MT_ZdoNodeDescRequest(uint8 *pBuf);
//   90 void MT_ZdoPowerDescRequest(uint8 *pBuf);
//   91 void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//   92 void MT_ZdoActiveEpRequest(uint8 *pBuf);
//   93 void MT_ZdoMatchDescRequest(uint8 *pBuf);
//   94 void MT_ZdoComplexDescRequest(uint8 *pBuf);
//   95 void MT_ZdoUserDescRequest(uint8 *pBuf);
//   96 void MT_ZdoEndDevAnnce(uint8 *pBuf);
//   97 void MT_ZdoUserDescSet(uint8 *pBuf);
//   98 void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//   99 void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  100 void MT_ZdoBindRequest(uint8 *pBuf);
//  101 void MT_ZdoUnbindRequest(uint8 *pBuf);
//  102 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  103 void MT_ZdoStartupFromApp(uint8 *pBuf);
//  104 #if defined (MT_ZDO_MGMT)
//  105 void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  106 void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  107 void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  108 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  109 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  110 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  111 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  112 #endif /* MT_ZDO_MGMT */
//  113 #endif /* MT_ZDO_FUNC */
//  114 
//  115 #if defined (MT_ZDO_CB_FUNC)
//  116 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  117 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  118 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  119 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  120 
//  121 /* ZDO cluster ID to MT response command ID lookup */
//  122 static const uint8 CODE mtZdoCluster2Rsp[4][7] =
//  123 {
//  124   {
//  125     MT_ZDO_NWK_ADDR_RSP,         /* NWK_addr_req */
//  126     MT_ZDO_IEEE_ADDR_RSP,        /* IEEE_addr_req */
//  127     MT_ZDO_NODE_DESC_RSP,        /* Node_Desc_req */
//  128     MT_ZDO_POWER_DESC_RSP,       /* Power_Desc_req */
//  129     MT_ZDO_SIMPLE_DESC_RSP,      /* Simple_Desc_req */
//  130     MT_ZDO_ACTIVE_EP_RSP,        /* Active_EP_req */
//  131     MT_ZDO_MATCH_DESC_RSP        /* Match_Desc_req */
//  132   },
//  133   {
//  134     MT_ZDO_COMPLEX_DESC_RSP,     /* Complex_Desc_req */
//  135     MT_ZDO_USER_DESC_RSP,        /* User_Desc_req */
//  136     0,                           /* Discovery_Cache_req */
//  137     0,                           /* End_Device_annce */
//  138     MT_ZDO_USER_DESC_CONF,       /* User_Desc_set */
//  139     MT_ZDO_SERVER_DISC_RSP,      /* Server_Discovery_req */
//  140     0
//  141   },
//  142   {
//  143     MT_ZDO_END_DEVICE_BIND_RSP,  /* End_Device_Bind_req */
//  144     MT_ZDO_BIND_RSP,             /* Bind_req */
//  145     MT_ZDO_UNBIND_RSP,           /* Unbind_req */
//  146     0,
//  147     0,
//  148     0,
//  149     MT_ZDO_STATUS_ERROR_RSP      /* default error status msg */
//  150   },
//  151   {
//  152     MT_ZDO_MGMT_NWK_DISC_RSP,    /* Mgmt_NWK_Disc_req */
//  153     MT_ZDO_MGMT_LQI_RSP,         /* Mgmt_Lqi_req */
//  154     MT_ZDO_MGMT_RTG_RSP,         /* Mgmt_Rtg_req */
//  155     MT_ZDO_MGMT_BIND_RSP,        /* Mgmt_Bind_req */
//  156     MT_ZDO_MGMT_LEAVE_RSP,       /* Mgmt_Leave_req */
//  157     MT_ZDO_MGMT_DIRECT_JOIN_RSP, /* Mgmt_Direct_Join_req */
//  158     MT_ZDO_MGMT_PERMIT_JOIN_RSP  /* Mgmt_Permit_Join_req */
//  159   }
//  160 };
//  161 #endif /* MT_ZDO_CB_FUNC */
//  162 
//  163 #if defined (MT_ZDO_FUNC)
//  164 /***************************************************************************************************
//  165  * @fn      MT_ZdoCommandProcessing
//  166  *
//  167  * @brief
//  168  *
//  169  *   Process all the ZDO commands that are issued by test tool
//  170  *
//  171  * @param   pBuf - pointer to the msg buffer
//  172  *
//  173  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  174  *          |  1   |   1   |   1   |  0-255 |
//  175  *
//  176  * @return  status
//  177  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  178 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
MT_ZdoCommandProcessing:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_ZdoCommandProcessing
        CODE
//  179 {
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNWKAddressRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoIEEEAddrRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNodeDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoPowerDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSimpleDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoActiveEpRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMatchDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoComplexDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoServiceDiscRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUnbindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoStartupFromApp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  180   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//  181 
//  182   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_ZdoCommandProcessing_0
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_1
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_2
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_3
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_4
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_5
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_6
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_7
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_8
        ADD     A,#-0x2
        JZ      ??MT_ZdoCommandProcessing_9
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_10
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_11
        ADD     A,#-0x14
        JZ      ??MT_ZdoCommandProcessing_12
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_13
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_14
        ADD     A,#-0x1e
        JZ      ??MT_ZdoCommandProcessing_15
        SJMP    ??MT_ZdoCommandProcessing_16
//  183   {
//  184 #if defined ( ZDO_NWKADDR_REQUEST )
//  185     case MT_ZDO_NWK_ADDR_REQ:
//  186       MT_ZdoNWKAddressRequest(pBuf);
??MT_ZdoCommandProcessing_0:
        ; Setup parameters for call to function MT_ZdoNWKAddressRequest
        LCALL   ??MT_ZdoNWKAddressRequest?relay
//  187       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  188 #endif
//  189 
//  190 #if defined ( ZDO_IEEEADDR_REQUEST )
//  191     case MT_ZDO_IEEE_ADDR_REQ:
//  192       MT_ZdoIEEEAddrRequest(pBuf);
??MT_ZdoCommandProcessing_1:
        ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
        LCALL   ??MT_ZdoIEEEAddrRequest?relay
//  193       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  194 #endif
//  195 
//  196 #if defined ( ZDO_NODEDESC_REQUEST )
//  197     case MT_ZDO_NODE_DESC_REQ:
//  198       MT_ZdoNodeDescRequest(pBuf);
??MT_ZdoCommandProcessing_2:
        ; Setup parameters for call to function MT_ZdoNodeDescRequest
        LCALL   ??MT_ZdoNodeDescRequest?relay
//  199       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  200 #endif
//  201 
//  202 #if defined ( ZDO_POWERDESC_REQUEST )
//  203     case MT_ZDO_POWER_DESC_REQ:
//  204       MT_ZdoPowerDescRequest(pBuf);
??MT_ZdoCommandProcessing_3:
        ; Setup parameters for call to function MT_ZdoPowerDescRequest
        LCALL   ??MT_ZdoPowerDescRequest?relay
//  205       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  206 #endif
//  207 
//  208 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  209     case MT_ZDO_SIMPLE_DESC_REQ:
//  210       MT_ZdoSimpleDescRequest(pBuf);
??MT_ZdoCommandProcessing_4:
        ; Setup parameters for call to function MT_ZdoSimpleDescRequest
        LCALL   ??MT_ZdoSimpleDescRequest?relay
//  211       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  212 #endif
//  213 
//  214 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  215     case MT_ZDO_ACTIVE_EP_REQ:
//  216       MT_ZdoActiveEpRequest(pBuf);
??MT_ZdoCommandProcessing_5:
        ; Setup parameters for call to function MT_ZdoActiveEpRequest
        LCALL   ??MT_ZdoActiveEpRequest?relay
//  217       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  218 #endif
//  219 
//  220 #if defined ( ZDO_MATCH_REQUEST )
//  221     case MT_ZDO_MATCH_DESC_REQ:
//  222       MT_ZdoMatchDescRequest(pBuf);
??MT_ZdoCommandProcessing_6:
        ; Setup parameters for call to function MT_ZdoMatchDescRequest
        LCALL   ??MT_ZdoMatchDescRequest?relay
//  223       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  224 #endif
//  225 
//  226 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  227     case MT_ZDO_COMPLEX_DESC_REQ:
//  228       MT_ZdoComplexDescRequest(pBuf);
??MT_ZdoCommandProcessing_7:
        ; Setup parameters for call to function MT_ZdoComplexDescRequest
        LCALL   ??MT_ZdoComplexDescRequest?relay
//  229       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  230 #endif
//  231 
//  232 #if defined ( ZDO_USERDESC_REQUEST )
//  233     case MT_ZDO_USER_DESC_REQ:
//  234       MT_ZdoUserDescRequest(pBuf);
??MT_ZdoCommandProcessing_8:
        ; Setup parameters for call to function MT_ZdoUserDescRequest
        LCALL   ??MT_ZdoUserDescRequest?relay
//  235       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  236 #endif
//  237 
//  238 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  239     case MT_ZDO_END_DEV_ANNCE:
//  240       MT_ZdoEndDevAnnce(pBuf);
??MT_ZdoCommandProcessing_9:
        ; Setup parameters for call to function MT_ZdoEndDevAnnce
        LCALL   ??MT_ZdoEndDevAnnce?relay
//  241       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  242 #endif      
//  243 
//  244 #if defined ( ZDO_USERDESCSET_REQUEST )
//  245     case MT_ZDO_USER_DESC_SET:
//  246       MT_ZdoUserDescSet(pBuf);
??MT_ZdoCommandProcessing_10:
        ; Setup parameters for call to function MT_ZdoUserDescSet
        LCALL   ??MT_ZdoUserDescSet?relay
//  247       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  248 #endif
//  249 
//  250 #if defined ( ZDO_SERVERDISC_REQUEST )
//  251     case MT_ZDO_SERVICE_DISC_REQ:
//  252       MT_ZdoServiceDiscRequest(pBuf);
??MT_ZdoCommandProcessing_11:
        ; Setup parameters for call to function MT_ZdoServiceDiscRequest
        LCALL   ??MT_ZdoServiceDiscRequest?relay
//  253       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  254 #endif
//  255 
//  256 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  257     case MT_ZDO_END_DEV_BIND_REQ:
//  258       MT_ZdoEndDevBindRequest(pBuf);
??MT_ZdoCommandProcessing_12:
        ; Setup parameters for call to function MT_ZdoEndDevBindRequest
        LCALL   ??MT_ZdoEndDevBindRequest?relay
//  259       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  260 #endif
//  261 
//  262 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  263     case MT_ZDO_BIND_REQ:
//  264       MT_ZdoBindRequest(pBuf);
??MT_ZdoCommandProcessing_13:
        ; Setup parameters for call to function MT_ZdoBindRequest
        LCALL   ??MT_ZdoBindRequest?relay
//  265       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  266 #endif
//  267 
//  268 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  269     case MT_ZDO_UNBIND_REQ:
//  270       MT_ZdoUnbindRequest(pBuf);
??MT_ZdoCommandProcessing_14:
        ; Setup parameters for call to function MT_ZdoUnbindRequest
        LCALL   ??MT_ZdoUnbindRequest?relay
//  271       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  272 #endif
//  273 
//  274 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  275     case MT_ZDO_STARTUP_FROM_APP:
//  276       MT_ZdoStartupFromApp(pBuf);
??MT_ZdoCommandProcessing_15:
        ; Setup parameters for call to function MT_ZdoStartupFromApp
        LCALL   ??MT_ZdoStartupFromApp?relay
//  277       break;
        SJMP    ??MT_ZdoCommandProcessing_17
//  278 #endif
//  279 
//  280 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  281     case MT_ZDO_MGMT_NWKDISC_REQ:
//  282       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  283       break;
//  284 #endif
//  285 
//  286 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  287     case MT_ZDO_MGMT_LQI_REQ:
//  288       MT_ZdoMgmtLqiRequest(pBuf);
//  289       break;
//  290 #endif
//  291 
//  292 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  293     case MT_ZDO_MGMT_RTG_REQ:
//  294       MT_ZdoMgmtRtgRequest(pBuf);
//  295       break;
//  296 #endif
//  297 
//  298 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  299     case MT_ZDO_MGMT_BIND_REQ:
//  300       MT_ZdoMgmtBindRequest(pBuf);
//  301       break;
//  302 #endif
//  303 
//  304 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  305     case MT_ZDO_MGMT_LEAVE_REQ:
//  306       MT_ZdoMgmtLeaveRequest(pBuf);
//  307       break;
//  308 #endif
//  309 
//  310 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  311     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  312       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  313       break;
//  314 #endif
//  315 
//  316 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  317     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  318       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  319       break;
//  320 #endif
//  321 
//  322 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  323     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  324       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  325       break;
//  326 #endif 
//  327 
//  328     default:
//  329       status = MT_RPC_ERR_COMMAND_ID;
??MT_ZdoCommandProcessing_16:
        INC     R6
        INC     R6
//  330       break;
//  331   }
//  332 
//  333   return status;
??MT_ZdoCommandProcessing_17:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine34_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  334 }
//  335 
//  336 /***************************************************************************************************
//  337  * @fn      MT_ZdoNwkAddrReq
//  338  *
//  339  * @brief   Handle a nwk address request.
//  340  *
//  341  * @param   pData  - MT message data
//  342  *
//  343  * @return  void
//  344  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  345 void MT_ZdoNWKAddressRequest(uint8 *pBuf)
MT_ZdoNWKAddressRequest:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MT_ZdoNWKAddressRequest
        CODE
//  346 {
        FUNCALL MT_ZdoNWKAddressRequest, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  347   uint8 cmdId;
//  348   uint8 retValue;
//  349   uint8 reqType;
//  350   uint8 startIndex;
//  351   uint8 *pExtAddr;
//  352 
//  353   /* parse header */
//  354   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  355   pBuf += MT_RPC_FRAME_HDR_SZ;
//  356 
//  357   /* parse parameters */
//  358   pExtAddr = pBuf;
        LCALL   ?Subroutine27 & 0xFFFF
//  359   pBuf += Z_EXTADDR_LEN;
??CrossCallReturnLabel_57:
        MOV     A,?V0 + 0
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine14 & 0xFFFF
//  360 
//  361   /* Request type */
//  362   reqType = *pBuf++;
//  363 
//  364   /* Start index */
//  365   startIndex = *pBuf;
//  366 
//  367   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_38:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDP_NwkAddrReq?relay
        LCALL   ?Subroutine19 & 0xFFFF
//  368 
//  369   /* Build and send back the response */
//  370   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  371 }
??CrossCallReturnLabel_61:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  372 
//  373 /***************************************************************************************************
//  374  * @fn      MT_ZdoIEEEAddrRequest
//  375  *
//  376  * @brief   Handle a IEEE address request.
//  377  *
//  378  * @param   pData  - MT message data
//  379  *
//  380  * @return  void
//  381  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  382 void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
MT_ZdoIEEEAddrRequest:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MT_ZdoIEEEAddrRequest
        CODE
//  383 {
        FUNCALL MT_ZdoIEEEAddrRequest, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoIEEEAddrRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  384   uint8 cmdId;
//  385   uint8 retValue;
//  386   uint16 shortAddr;
//  387   uint8 reqType;
//  388   uint8 startIndex;
//  389 
//  390   /* parse header */
//  391   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  392   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        INC     R2
        LCALL   ?Subroutine8 & 0xFFFF
//  393 
//  394   /* Dev address */
//  395   shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
//  396   pBuf += 2;
??CrossCallReturnLabel_22:
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        LCALL   ?Subroutine14 & 0xFFFF
//  397 
//  398   /* request type */
//  399   reqType = *pBuf++;
//  400 
//  401   /* start index */
//  402   startIndex = *pBuf;
//  403 
//  404   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_39:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDP_IEEEAddrReq?relay
        LCALL   ?Subroutine29 & 0xFFFF
//  405 
//  406   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??CrossCallReturnLabel_65:
        MOV     R2,?V0 + 0
        LJMP    ??Subroutine39_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  407 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     R1,A
        INC     DPTR
        ; Setup parameters for call to function ZDP_NwkAddrReq
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOVX    A,@DPTR
        MOV     R4,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  408 
//  409 /***************************************************************************************************
//  410  * @fn      MT_ZdoNodeDescRequest
//  411  *
//  412  * @brief   Handle a Node Descriptor request.
//  413  *
//  414  * @param   pData  - MT message data
//  415  *
//  416  * @return  void
//  417  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  418 void MT_ZdoNodeDescRequest (uint8 *pBuf)
MT_ZdoNodeDescRequest:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function MT_ZdoNodeDescRequest
        CODE
//  419 {
        FUNCALL MT_ZdoNodeDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNodeDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  420   uint8 cmdId;
//  421   uint8 retValue;
//  422   zAddrType_t destAddr;
//  423   uint16 shortAddr;
//  424 
//  425   /* parse header */
//  426   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine3 & 0xFFFF
//  427   pBuf += MT_RPC_FRAME_HDR_SZ;
//  428 
//  429   /* Destination address */
//  430   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  431   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  432   pBuf += 2;
//  433 
//  434   /* Network address of interest */
//  435   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  436   pBuf += 2;
//  437 
//  438   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_32:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     A,R1
        SJMP    ??Subroutine31_0
        CFI EndBlock cfiBlock6
//  439 
//  440   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  441 }
//  442 
//  443 /***************************************************************************************************
//  444  * @fn      MT_ZdoPowerDescRequest
//  445  *
//  446  * @brief   Handle a Power Descriptor request.
//  447  *
//  448  * @param   pData  - MT message data
//  449  *
//  450  * @return  void
//  451  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  452 void MT_ZdoPowerDescRequest(uint8 *pBuf)
MT_ZdoPowerDescRequest:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function MT_ZdoPowerDescRequest
        CODE
//  453 {
        FUNCALL MT_ZdoPowerDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoPowerDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  454   uint8 cmdId;
//  455   uint8 retValue;
//  456   zAddrType_t destAddr;
//  457   uint16 shortAddr;
//  458 
//  459   /* parse header */
//  460   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine3 & 0xFFFF
//  461   pBuf += MT_RPC_FRAME_HDR_SZ;
//  462 
//  463   /* Dev address */
//  464   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  465   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  466   pBuf += 2;
//  467 
//  468   /* Network address of interest */
//  469   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  470   pBuf += 2;
//  471 
//  472   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_33:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x3
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock7
//  473 
//  474   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  475 }
//  476 
//  477 /***************************************************************************************************
//  478  * @fn      MT_ZdoSimpleDescRequest
//  479  *
//  480  * @brief   Handle a Simple Descriptor request.
//  481  *
//  482  * @param   pBuf  - MT message data
//  483  *
//  484  * @return  void
//  485  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  486 void MT_ZdoSimpleDescRequest(uint8 *pBuf)
MT_ZdoSimpleDescRequest:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function MT_ZdoSimpleDescRequest
        CODE
//  487 {
        FUNCALL MT_ZdoSimpleDescRequest, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSimpleDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  488   uint8 cmdId;
//  489   uint8 retValue;
//  490   uint8 epInt;
//  491   zAddrType_t destAddr;
//  492   uint16 shortAddr;
//  493 
//  494   /* parse header */
//  495   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine3 & 0xFFFF
//  496   pBuf += MT_RPC_FRAME_HDR_SZ;
//  497 
//  498   /* Dev address */
//  499   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  500   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_9:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  501   pBuf += 2;
//  502 
//  503   /* Network address of interest */
//  504   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  505   pBuf += 2;
//  506 
//  507   /* endpoint/interface */
//  508   epInt = *pBuf++;
//  509 
//  510   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
??CrossCallReturnLabel_34:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_SimpleDescReq?relay
        SJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock8
//  511 
//  512   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  513 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine9 & 0xFFFF
        CFI EndBlock cfiBlock9
??CrossCallReturnLabel_25:
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_NWKAddrOfInterestReq?relay
        CFI EndBlock cfiBlock10
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,#0xa
        CFI EndBlock cfiBlock11
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock12
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_24
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_25
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_25
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_25
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_25
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0x0
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
//  514 
//  515 /***************************************************************************************************
//  516  * @fn      MT_ZdoSimpleDescRequest
//  517  *
//  518  * @brief   Handle a Active EP request.
//  519  *
//  520  * @param   pBuf  - MT message data
//  521  *
//  522  * @return  void
//  523  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  524 void MT_ZdoActiveEpRequest(uint8 *pBuf)
MT_ZdoActiveEpRequest:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function MT_ZdoActiveEpRequest
        CODE
//  525 {
        FUNCALL MT_ZdoActiveEpRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoActiveEpRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  526   uint8 cmdId;
//  527   uint8 retValue;
//  528   zAddrType_t destAddr;
//  529   uint16 shortAddr;
//  530 
//  531   /* parse header */
//  532   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine3 & 0xFFFF
//  533   pBuf += MT_RPC_FRAME_HDR_SZ;
//  534 
//  535   /* Dev address */
//  536   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  537   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_10:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  538   pBuf += 2;
//  539 
//  540   /* Network address of interest */
//  541   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  542   pBuf += 2;
//  543 
//  544   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_35:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x5
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock35
//  545 
//  546   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  547 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_68:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_SimpleDescReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_33
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_34
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_35
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_36
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_37
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_49
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_42
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_43
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_32
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_33
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_34
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_35
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_36
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_37
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70
//  548 
//  549 /***************************************************************************************************
//  550  * @fn      MT_ZdoMatchDescRequest
//  551  *
//  552  * @brief   Handle a Match Descriptor request.
//  553  *
//  554  * @param   pBuf  - MT message data
//  555  *
//  556  * @return  void
//  557  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  558 void MT_ZdoMatchDescRequest(uint8 *pBuf)
MT_ZdoMatchDescRequest:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function MT_ZdoMatchDescRequest
        CODE
//  559 {
        FUNCALL MT_ZdoMatchDescRequest, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 88, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 74
        MOV     A,#-0x4a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 88)
//  560   uint8 cmdId;
//  561   uint8 retValue = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  562   uint8 i, numInClusters, numOutClusters;
//  563   uint16 profileId;
//  564   zAddrType_t destAddr;
//  565   uint16 shortAddr;
//  566   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  567 
//  568   /* parse header */
//  569   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine3 & 0xFFFF
//  570   pBuf += MT_RPC_FRAME_HDR_SZ;
//  571 
//  572   /* Dev address */
//  573   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_4:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  574   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_11:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  575   pBuf += 2;
        LCALL   ??Subroutine36_0 & 0xFFFF
//  576 
//  577   /* Network address of interest */
//  578   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_74:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        LCALL   ?Subroutine15 & 0xFFFF
//  579   pBuf += 2;
//  580 
//  581   /* Profile ID */
//  582   profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_72:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  583   pBuf += 2;
        LCALL   ??Subroutine36_0 & 0xFFFF
//  584 
//  585   /* NumInClusters */
//  586   numInClusters = *pBuf++;
??CrossCallReturnLabel_75:
        MOV     R1,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  587   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_0
//  588   {
//  589     /* IN clusters */
//  590     for ( i = 0; i < numInClusters; i++ )
??MT_ZdoMatchDescRequest_1:
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??MT_ZdoMatchDescRequest_2
//  591     {
//  592       inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 4
        ADD     A,#0x0
        CLR     A
        ADDC    A,?V0 + 3
        MOV     ?V0 + 5,A
        MOV     A,R0
        RLC     A
        MOV     ?V0 + 2,A
        CLR     A
        RLC     A
        MOV     ?V0 + 3,A
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
//  593       pBuf += 2;
//  594     }
//  595   }
??CrossCallReturnLabel_48:
        SJMP    ??MT_ZdoMatchDescRequest_1
//  596   else
//  597   {
//  598     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  599   }
//  600 
//  601   /* NumOutClusters */
//  602   numOutClusters = *pBuf++;
??MT_ZdoMatchDescRequest_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R7,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  603   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_3
//  604   {
//  605     /* OUT Clusters */
//  606     for ( i = 0; i < numOutClusters; i++ )
        MOV     R0,#0x0
??MT_ZdoMatchDescRequest_4:
        MOV     A,R0
        CLR     C
        SUBB    A,R7
        JNC     ??MT_ZdoMatchDescRequest_5
//  607     {
//  608       outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,?V0 + 2
        ADD     A,#0x0
        MOV     ?V0 + 4,A
        MOV     A,R0
        RLC     A
        MOV     ?V0 + 2,A
        CLR     A
        RLC     A
        MOV     ?V0 + 3,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
//  609       pBuf += 2;
//  610     }
//  611   }
??CrossCallReturnLabel_49:
        SJMP    ??MT_ZdoMatchDescRequest_4
//  612   else
//  613   {
//  614     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        SJMP    ??MT_ZdoMatchDescRequest_6
//  615   }
//  616 
//  617   if ( retValue == 0 )
??MT_ZdoMatchDescRequest_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoMatchDescRequest_7
//  618   {
//  619     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  620                                        inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 91)
        MOV     A,R7
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 92)
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 94)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 96)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 88)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??MT_ZdoMatchDescRequest_6:
        MOVX    @DPTR,A
//  621   }
//  622 
//  623   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMatchDescRequest_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  624 }
        MOV     A,#0x4a
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_70:
        INC     R0
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_78:
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_73
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_74
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_75
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_76
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_77
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_22
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_23
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        MOV     A,R3
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_39
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_72
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_73
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_74
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_75
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_76
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_77
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_22
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_23
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
//  625 
//  626 /***************************************************************************************************
//  627  * @fn      MT_ZdoComplexDescRequest
//  628  *
//  629  * @brief   Handle a Complex Descriptor request.
//  630  *
//  631  * @param   pBuf  - MT message data
//  632  *
//  633  * @return  void
//  634  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  635 void MT_ZdoComplexDescRequest(uint8 *pBuf)
MT_ZdoComplexDescRequest:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function MT_ZdoComplexDescRequest
        CODE
//  636 {
        FUNCALL MT_ZdoComplexDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoComplexDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  637   uint8 cmdId;
//  638   uint8 retValue;
//  639   zAddrType_t destAddr;
//  640   uint16 shortAddr;
//  641 
//  642   /* parse header */
//  643   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine3 & 0xFFFF
//  644   pBuf += MT_RPC_FRAME_HDR_SZ;
//  645 
//  646   /* Dev address */
//  647   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  648   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_12:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  649   pBuf += 2;
//  650 
//  651   /* Network address of interest */
//  652   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  653   pBuf += 2;
//  654 
//  655   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_36:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x10
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock121
//  656 
//  657   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  658 }
//  659 
//  660 /***************************************************************************************************
//  661  * @fn      MT_ZdoUserDescRequest
//  662  *
//  663  * @brief   Handle a User Descriptor request.
//  664  *
//  665  * @param   pBuf  - MT message data
//  666  *
//  667  * @return  void
//  668  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  669 void MT_ZdoUserDescRequest(uint8 *pBuf)
MT_ZdoUserDescRequest:
        CFI Block cfiBlock122 Using cfiCommon0
        CFI Function MT_ZdoUserDescRequest
        CODE
//  670 {
        FUNCALL MT_ZdoUserDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  671   uint8 cmdId;
//  672   uint8 retValue;
//  673   zAddrType_t destAddr;
//  674   uint16 shortAddr;
//  675 
//  676   /* parse header */
//  677   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine3 & 0xFFFF
//  678   pBuf += MT_RPC_FRAME_HDR_SZ;
//  679 
//  680   /* Dev address */
//  681   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  682   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
??CrossCallReturnLabel_13:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  683   pBuf += 2;
//  684 
//  685   /* Network address of interest */
//  686   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  687   pBuf += 2;
//  688 
//  689   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_37:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x11
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock122
//  690 
//  691   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  692 }
//  693 
//  694 /***************************************************************************************************
//  695  * @fn      MT_ZdoEndDevAnnce
//  696  *
//  697  * @brief   Handle a End Device Announce Descriptor request.
//  698  *
//  699  * @param   pBuf  - MT message data
//  700  *
//  701  * @return  void
//  702  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  703 void MT_ZdoEndDevAnnce(uint8 *pBuf)
MT_ZdoEndDevAnnce:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI Function MT_ZdoEndDevAnnce
        CODE
//  704 {
        FUNCALL MT_ZdoEndDevAnnce, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnce, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  705   uint8 cmdId;
//  706   uint8 retValue;
//  707   uint16 shortAddr;
//  708   uint8 *pIEEEAddr;
//  709 
//  710   /* parse header */
//  711   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  712   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R4
        ADD     A,#0x3
        INC     R4
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  713 
//  714   /* network address */
//  715   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R3,A
//  716   pBuf += 2;
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  717 
//  718   /* extended address */
//  719   pIEEEAddr = pBuf;
//  720   pBuf += Z_EXTADDR_LEN;
//  721 
//  722   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0 + 0,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDP_DeviceAnnce?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock123
//  723 
//  724   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  725 }
//  726 
//  727 /***************************************************************************************************
//  728  * @fn      MT_ZdoUserDescSet
//  729  *
//  730  * @brief   Handle a User Descriptor Set.
//  731  *
//  732  * @param   pBuf  - MT message data
//  733  *
//  734  * @return  void
//  735  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  736 void MT_ZdoUserDescSet(uint8 *pBuf)
MT_ZdoUserDescSet:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI Function MT_ZdoUserDescSet
        CODE
//  737 {
        FUNCALL MT_ZdoUserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, ZDP_UserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 27
        MOV     A,#-0x1b
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
//  738   uint8 cmdId;
//  739   uint8 retValue;
//  740   zAddrType_t destAddr;
//  741   uint16 shortAddr;
//  742   UserDescriptorFormat_t userDesc;
//  743 
//  744   /* parse header */
//  745   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  746   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine16 & 0xFFFF
//  747 
//  748   /* Dev address */
//  749   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_40:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  750   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_14:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  751   pBuf += 2;
//  752 
//  753   /* Network address of interest */
//  754   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_69:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  755   pBuf += 2;
        LCALL   ??Subroutine36_0 & 0xFFFF
//  756 
//  757   /* User descriptor */
//  758   userDesc.len = *pBuf++;
??CrossCallReturnLabel_76:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  759   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
//  760   pBuf += 16;
//  761 
//  762   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
        ; Setup parameters for call to function ZDP_UserDescSet
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_UserDescSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        LCALL   ?Subroutine20 & 0xFFFF
//  763 
//  764   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  765 }
??CrossCallReturnLabel_46:
        MOV     A,#0x1b
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock124
//  766 
//  767 /***************************************************************************************************
//  768  * @fn      MT_ZdoServiceDiscRequest
//  769  *
//  770  * @brief   Handle a Server Discovery request.
//  771  *
//  772  * @param   pBuf  - MT message data
//  773  *
//  774  * @return  void
//  775  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  776 void MT_ZdoServiceDiscRequest(uint8 *pBuf)
MT_ZdoServiceDiscRequest:
        CFI Block cfiBlock125 Using cfiCommon0
        CFI Function MT_ZdoServiceDiscRequest
        CODE
//  777 {
        FUNCALL MT_ZdoServiceDiscRequest, ZDP_ServerDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoServiceDiscRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  778   uint8 cmdId;
//  779   uint8 retValue;
//  780   uint16 serviceMask;
//  781 
//  782   /* parse header */
//  783   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine24 & 0xFFFF
//  784   pBuf += MT_RPC_FRAME_HDR_SZ;
//  785 
//  786   /* Service Mask */
//  787   serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
//  788   pBuf += 2;
//  789 
//  790   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
??CrossCallReturnLabel_51:
        ; Setup parameters for call to function ZDP_ServerDiscReq
        MOV     R1,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     R2,A
        LCALL   ??ZDP_ServerDiscReq?relay
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock125
//  791 
//  792   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  793 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond126 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_2
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_3
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_4
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_5
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_6
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_60:
        RET
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond135 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_2
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_3
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_4
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 88)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_5
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_6
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_40
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_41
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOV     A,R2
        ADD     A,#0x3
        INC     R2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145
//  794 
//  795 /***************************************************************************************************
//  796  * @fn      MT_ZdoEndDevBindRequest
//  797  *
//  798  * @brief   Handle a End Device Bind request.
//  799  *
//  800  * @param   pBuf  - MT message data
//  801  *
//  802  * @return  void
//  803  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  804 void MT_ZdoEndDevBindRequest(uint8 *pBuf)
MT_ZdoEndDevBindRequest:
        CFI Block cfiBlock146 Using cfiCommon0
        CFI Function MT_ZdoEndDevBindRequest
        CODE
//  805 {
        FUNCALL MT_ZdoEndDevBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 85, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 85, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 70
        MOV     A,#-0x46
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 85)
//  806   uint8 cmdId;
//  807   uint8 retValue = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  808   uint8 i, epInt, numInClusters, numOutClusters;
//  809   zAddrType_t destAddr;
//  810   uint16 shortAddr;
//  811   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
//  812 
//  813   /* parse header */
//  814   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//  815   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine16 & 0xFFFF
//  816 
//  817   /* Dev address */
//  818   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_41:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  819   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_15:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  820   pBuf += 2;
        MOV     A,R2
        ADD     A,#0x2
        LCALL   ?Subroutine8 & 0xFFFF
//  821 
//  822   /* Local coordinator of the binding */
//  823   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  824   pBuf += 2;
//  825   
//  826   /* For now, skip past the extended address */
//  827   pBuf += Z_EXTADDR_LEN;
??CrossCallReturnLabel_23:
        ADD     A,#0xa
        MOV     R2,A
        LCALL   ??Subroutine37_0 & 0xFFFF
//  828 
//  829   /* Endpoint */
//  830   epInt = *pBuf++;
??CrossCallReturnLabel_77:
        MOV     ?V0 + 2,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  831 
//  832   /* Profile ID */
//  833   profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?Subroutine15 & 0xFFFF
//  834   pBuf += 2;
//  835 
//  836   /* NumInClusters */
//  837   numInClusters = *pBuf++;
??CrossCallReturnLabel_73:
        MOV     ?V0 + 3,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
//  838   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_0
//  839   {
//  840     for ( i = 0; i < numInClusters; i++ )
        MOV     ?V0 + 5,R0
??MT_ZdoEndDevBindRequest_1:
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,?V0 + 3
        JNC     ??MT_ZdoEndDevBindRequest_2
//  841     {
//  842       inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine6 & 0xFFFF
//  843       pBuf += 2;
//  844     }
//  845   }
??CrossCallReturnLabel_18:
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_42:
        SJMP    ??MT_ZdoEndDevBindRequest_1
//  846   else
//  847     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  848 
//  849   /* NumOutClusters */
//  850   numOutClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  851   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_3
//  852   {
//  853     for ( i = 0; i < numOutClusters; i++ )
        MOV     ?V0 + 5,#0x0
??MT_ZdoEndDevBindRequest_4:
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,?V0 + 4
        JNC     ??MT_ZdoEndDevBindRequest_5
//  854     {
//  855       outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine6 & 0xFFFF
//  856       pBuf += 2;
//  857     }
//  858   }
??CrossCallReturnLabel_19:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_43:
        SJMP    ??MT_ZdoEndDevBindRequest_4
//  859   else
//  860     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        SJMP    ??MT_ZdoEndDevBindRequest_6
//  861   
//  862   if ( retValue == 0 )
??MT_ZdoEndDevBindRequest_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoEndDevBindRequest_7
//  863   {
//  864     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
//  865                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 88)
        MOV     A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 91)
        MOV     A,?V0 + 3
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 92)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 94)
        MOV     R1,?V0 + 2
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??MT_ZdoEndDevBindRequest_6:
        MOVX    @DPTR,A
//  866   }
//  867 
//  868   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoEndDevBindRequest_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,?V0 + 6
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  869 }
        MOV     A,#0x46
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond147 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker149 Using cfiCommon1
        CFI (cfiPicker149) NoFunction
        CFI (cfiPicker149) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_71:
        INC     ?V0 + 5
        RET
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond150 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond153 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        RET
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        INC     R2
        INC     R2
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond159 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 85)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 85)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,R0
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 5
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        RET
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161
//  870 
//  871 /***************************************************************************************************
//  872  * @fn      MT_ZdoBindRequest
//  873  *
//  874  * @brief   Handle a Bind request.
//  875  *
//  876  * @param   pBuf  - MT message data
//  877  *
//  878  * @return  void
//  879  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  880 void MT_ZdoBindRequest(uint8 *pBuf)
MT_ZdoBindRequest:
        CFI Block cfiBlock162 Using cfiCommon0
        CFI Function MT_ZdoBindRequest
        CODE
//  881 {
        FUNCALL MT_ZdoBindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
//  882   uint8 cmdId;
//  883   uint8 retValue;
//  884   zAddrType_t destAddr, devAddr;
//  885   uint8 *pSrcAddr, *ptr;
//  886   uint8 srcEPInt, dstEPInt;
//  887   uint16 clusterID;
//  888 
//  889   /* parse header */
//  890   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine7 & 0xFFFF
//  891   pBuf += MT_RPC_FRAME_HDR_SZ;
//  892 
//  893   /* Dev address */
//  894   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_20:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  895   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_28:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  896   pBuf += 2;
//  897 
//  898   /* SrcAddress */
//  899   pSrcAddr = pBuf;
//  900   pBuf += Z_EXTADDR_LEN;
//  901 
//  902   /* SrcEPInt */
//  903   srcEPInt = *pBuf++;
//  904 
//  905   /* ClusterID */
//  906   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  907   pBuf += 2;
//  908 
//  909   /* Destination Address mode */
//  910   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_16:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  911 
//  912   /* Destination Address */
//  913   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_44:
        JNZ     ??MT_ZdoBindRequest_0
//  914   {
//  915     ptr = pBuf;
//  916     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??MT_ZdoBindRequest_1
//  917   }
//  918   else
//  919   {
//  920     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoBindRequest_0:
        LCALL   ?Subroutine12 & 0xFFFF
//  921   }
??CrossCallReturnLabel_30:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  922   /* The short address occupies LSB two bytes */
//  923   pBuf += Z_EXTADDR_LEN;
//  924 
//  925   /* DstEPInt */
//  926   dstEPInt = *pBuf;
//  927 
//  928   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoBindRequest_1:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V0 + 2
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x21
        CFI EndBlock cfiBlock162
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  929 
//  930   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  931 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock163 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        LCALL   ??ZDP_BindUnbindReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,#0x13
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock163

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond164 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker167 Using cfiCommon1
        CFI (cfiPicker167) NoFunction
        CFI (cfiPicker167) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     R2,?V0 + 3
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        RET
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiPicker167

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond168 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_46
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_47
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_47
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_61
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_64
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_64
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_64
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker182 Using cfiCommon1
        CFI (cfiPicker182) NoFunction
        CFI (cfiPicker182) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        RET
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiPicker182
//  932 
//  933 /***************************************************************************************************
//  934  * @fn      MT_ZdoUnbindRequest
//  935  *
//  936  * @brief   Handle a Unbind request.
//  937  *
//  938  * @param   pBuf  - MT message data
//  939  *
//  940  * @return  void
//  941  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  942 void MT_ZdoUnbindRequest(uint8 *pBuf)
MT_ZdoUnbindRequest:
        CFI Block cfiBlock183 Using cfiCommon0
        CFI Function MT_ZdoUnbindRequest
        CODE
//  943 {
        FUNCALL MT_ZdoUnbindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
//  944   uint8 cmdId;
//  945   uint8 retValue;
//  946   zAddrType_t destAddr, devAddr;
//  947   uint8 *pSrcAddr, *ptr;
//  948   uint8 srcEPInt, dstEPInt;
//  949   uint16 clusterID;
//  950 
//  951   /* parse header */
//  952   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine7 & 0xFFFF
//  953   pBuf += MT_RPC_FRAME_HDR_SZ;
//  954 
//  955   /* dev address */
//  956   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_21:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  957   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_29:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  958   pBuf += 2;
//  959 
//  960   /* SrcAddress */
//  961   pSrcAddr = pBuf;
//  962   pBuf += Z_EXTADDR_LEN;
//  963 
//  964   /* SrcEPInt */
//  965   srcEPInt = *pBuf++;
//  966 
//  967   /* ClusterID */
//  968   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  969   pBuf += 2;
//  970 
//  971   /* Destination Address mode */
//  972   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_17:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  973 
//  974   /* Destination Address */
//  975   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_45:
        JNZ     ??MT_ZdoUnbindRequest_0
//  976   {
//  977     ptr = pBuf;
//  978     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??MT_ZdoUnbindRequest_1
//  979   }
//  980   else
//  981   {
//  982     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoUnbindRequest_0:
        LCALL   ?Subroutine12 & 0xFFFF
//  983   }
??CrossCallReturnLabel_31:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  984   /* The short address occupies LSB two bytes */
//  985   pBuf += Z_EXTADDR_LEN;
//  986 
//  987   /* dstEPInt */
//  988   dstEPInt = *pBuf;
//  989 
//  990   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoUnbindRequest_1:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V0 + 2
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x22
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock183
//  991 
//  992   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  993 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond184 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker186 Using cfiCommon1
        CFI (cfiPicker186) NoFunction
        CFI (cfiPicker186) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     A,#0x3
        XRL     A,R0
        RET
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiPicker186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond187 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker189 Using cfiCommon1
        CFI (cfiPicker189) NoFunction
        CFI (cfiPicker189) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     R0,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiPicker189

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond190 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker192 Using cfiCommon1
        CFI (cfiPicker192) NoFunction
        CFI (cfiPicker192) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     R0,A
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond193 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_31
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_28
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_29
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_16
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_17
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker199 Using cfiCommon1
        CFI (cfiPicker199) NoFunction
        CFI (cfiPicker199) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiPicker199

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond200 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker202 Using cfiCommon1
        CFI (cfiPicker202) NoFunction
        CFI (cfiPicker202) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,#0x12
        RET
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiPicker202

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond203 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_20
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_21
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker206 Using cfiCommon1
        CFI (cfiPicker206) NoFunction
        CFI (cfiPicker206) Picker
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiPicker206

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond207 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker209 Using cfiCommon1
        CFI (cfiPicker209) NoFunction
        CFI (cfiPicker209) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     A,?V0 + 6
        ADD     A,#0x8
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_54:
        ADD     A,#0x0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiPicker209
//  994 
//  995 /***************************************************************************************************
//  996  * @fn      MT_ZdoStartupFromApp
//  997  *
//  998  * @brief   Handle a Startup from App request.
//  999  *
// 1000  * @param   pBuf  - MT message data
// 1001  *
// 1002  * @return  void
// 1003  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1004 void MT_ZdoStartupFromApp(uint8 *pBuf)
MT_ZdoStartupFromApp:
        CFI Block cfiBlock210 Using cfiCommon0
        CFI Function MT_ZdoStartupFromApp
        CODE
// 1005 {
        FUNCALL MT_ZdoStartupFromApp, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoStartupFromApp, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1006   uint8 cmdId;
// 1007   uint8 retValue;
// 1008 
// 1009   /* parse header */
// 1010   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
// 1011   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1012 
// 1013   retValue = ZDOInitDevice(100);
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
        CFI EndBlock cfiBlock210
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 1014 
// 1015   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1016 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock211 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine28 & 0xFFFF
        CFI EndBlock cfiBlock211
??CrossCallReturnLabel_64:
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiBlock212 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x1
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock212

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond213 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_62
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker223 Using cfiCommon1
        CFI (cfiPicker223) NoFunction
        CFI (cfiPicker223) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     A,R6
        MOV     R2,A
        RET
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiPicker223

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoCommandProcessing?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNWKAddressRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoNWKAddressRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoIEEEAddrRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoIEEEAddrRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNodeDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoNodeDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoPowerDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoPowerDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSimpleDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoSimpleDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoActiveEpRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoActiveEpRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoMatchDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoMatchDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoComplexDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoComplexDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoUserDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevAnnce?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoEndDevAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoUserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoServiceDiscRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoServiceDiscRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevBindRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoEndDevBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoBindRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUnbindRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoUnbindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoStartupFromApp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoStartupFromApp

        END
// 1017 
// 1018 #if defined (MT_ZDO_MGMT)
// 1019 /***************************************************************************************************
// 1020  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1021  *
// 1022  * @brief   Handle a Mgmt Nwk Discovery request.
// 1023  *
// 1024  * @param   pBuf  - MT message data
// 1025  *
// 1026  * @return  void
// 1027  ***************************************************************************************************/
// 1028 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1029 {
// 1030   uint8 cmdId;
// 1031   uint8 retValue;
// 1032   zAddrType_t destAddr;
// 1033   uint32 scanChannels;
// 1034   uint8 scanDuration, startIndex;
// 1035 
// 1036   /* parse header */
// 1037   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1038   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1039 
// 1040   /* Dev address */
// 1041   destAddr.addrMode = Addr16Bit;
// 1042   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1043   pBuf += 2;
// 1044 
// 1045   /* Scan Channels */
// 1046   scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1047   pBuf += 4;
// 1048 
// 1049   /* Scan Duration */
// 1050   scanDuration = *pBuf++;
// 1051 
// 1052   /* Start Index */
// 1053   startIndex = *pBuf;
// 1054 
// 1055   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1056 
// 1057   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1058 }
// 1059 
// 1060 /***************************************************************************************************
// 1061  * @fn      MT_ZdoMgmtLqiRequest
// 1062  *
// 1063  * @brief   Handle a Mgmt Lqi request.
// 1064  *
// 1065  * @param   pBuf  - MT message data
// 1066  *
// 1067  * @return  void
// 1068  ***************************************************************************************************/
// 1069 void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1070 {
// 1071   uint8 cmdId;
// 1072   uint8 retValue;
// 1073   zAddrType_t destAddr;
// 1074   uint8 startIndex;
// 1075 
// 1076   /* parse header */
// 1077   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1078   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1079 
// 1080   /* Dev address */
// 1081   destAddr.addrMode = Addr16Bit;
// 1082   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1083   pBuf += 2;
// 1084 
// 1085   /* Start Index */
// 1086   startIndex = *pBuf;
// 1087 
// 1088   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1089 
// 1090   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1091 }
// 1092 
// 1093 /***************************************************************************************************
// 1094  * @fn      MT_ZdoMgmtRtgRequest
// 1095  *
// 1096  * @brief   Handle a Mgmt Rtg request.
// 1097  *
// 1098  * @param   pBuf  - MT message data
// 1099  *
// 1100  * @return  void
// 1101  ***************************************************************************************************/
// 1102 void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1103 {
// 1104   uint8 cmdId;
// 1105   uint8 retValue;
// 1106   zAddrType_t destAddr;
// 1107   uint8 startIndex;
// 1108 
// 1109   /* parse header */
// 1110   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1111   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1112 
// 1113   /* Dev Address */
// 1114   destAddr.addrMode = Addr16Bit;
// 1115   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1116   pBuf += 2;
// 1117 
// 1118   /* Start Index */
// 1119   startIndex = *pBuf;
// 1120 
// 1121   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1122 
// 1123   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1124 }
// 1125 
// 1126 /***************************************************************************************************
// 1127  * @fn      MT_ZdoMgmtBindRequest
// 1128  *
// 1129  * @brief   Handle a Mgmt Bind request.
// 1130  *
// 1131  * @param   pBuf  - MT message data
// 1132  *
// 1133  * @return  void
// 1134  ***************************************************************************************************/
// 1135 void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1136 {
// 1137   uint8 cmdId;
// 1138   uint8 retValue;
// 1139   zAddrType_t destAddr;
// 1140   uint8 startIndex;
// 1141 
// 1142   /* parse header */
// 1143   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1144   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1145 
// 1146   /* Dev Address */
// 1147   destAddr.addrMode = Addr16Bit;
// 1148   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1149   pBuf += 2;
// 1150 
// 1151   /* Start Index */
// 1152   startIndex = *pBuf;
// 1153 
// 1154   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1155 
// 1156   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1157 }
// 1158 
// 1159 /***************************************************************************************************
// 1160  * @fn      MT_ZdoMgmtLeaveRequest
// 1161  *
// 1162  * @brief   Handle a Mgmt Leave request.
// 1163  *
// 1164  * @param   pBuf  - MT message data
// 1165  *
// 1166  * @return  void
// 1167  ***************************************************************************************************/
// 1168 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1169 {
// 1170   uint8 cmdId;
// 1171   uint8 retValue;
// 1172   zAddrType_t destAddr;
// 1173   uint8 *pIEEEAddr;
// 1174   uint8 removeChildren, rejoin;
// 1175 
// 1176   /* parse header */
// 1177   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1178   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1179 
// 1180   /* Destination Address */
// 1181   destAddr.addrMode = Addr16Bit;
// 1182   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1183   pBuf += 2;
// 1184 
// 1185   /* IEEE address */
// 1186   pIEEEAddr = pBuf;
// 1187   pBuf += Z_EXTADDR_LEN;
// 1188 
// 1189   /* Remove Children */
// 1190   removeChildren = *pBuf++;
// 1191 
// 1192   /* Rejoin */
// 1193   rejoin = *pBuf;
// 1194 
// 1195   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1196 
// 1197   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1198 }
// 1199 
// 1200 
// 1201 /***************************************************************************************************
// 1202  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1203  *
// 1204  * @brief   Handle a Mgmt Direct Join request.
// 1205  *
// 1206  * @param   pBuf  - MT message data
// 1207  *
// 1208  * @return  void
// 1209  ***************************************************************************************************/
// 1210 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1211 {
// 1212   uint8 cmdId;
// 1213   uint8 retValue;
// 1214   zAddrType_t destAddr;
// 1215   uint8 *deviceAddr;
// 1216   uint8 capInfo;
// 1217 
// 1218   /* parse header */
// 1219   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1220   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1221 
// 1222   /* Destination Address */
// 1223   destAddr.addrMode = Addr16Bit;
// 1224   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1225   pBuf += 2;
// 1226 
// 1227   /* Device Address */
// 1228   deviceAddr = pBuf;
// 1229   pBuf += Z_EXTADDR_LEN;
// 1230 
// 1231   /* Capability information */
// 1232   capInfo = *pBuf;
// 1233 
// 1234   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1235 
// 1236   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1237 }
// 1238 
// 1239 /***************************************************************************************************
// 1240  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1241  *
// 1242  * @brief   Handle a Mgmt Permit Join request.
// 1243  *
// 1244  * @param   pBuf  - MT message data
// 1245  *
// 1246  * @return  void
// 1247  ***************************************************************************************************/
// 1248 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1249 {
// 1250   uint8 cmdId;
// 1251   uint8 retValue;
// 1252   zAddrType_t destAddr;
// 1253   uint8 duration, tcSignificance;
// 1254 
// 1255   /* parse header */
// 1256   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1257   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1258 
// 1259   /* Destination Address */
// 1260   destAddr.addrMode = Addr16Bit;
// 1261   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1262   pBuf += 2;
// 1263 
// 1264   /* Duration */
// 1265   duration = *pBuf++;
// 1266 
// 1267   /* Trust center significance */
// 1268   tcSignificance = *pBuf;
// 1269 
// 1270   retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1271 
// 1272   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1273 }
// 1274 
// 1275 /***************************************************************************************************
// 1276  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1277  *
// 1278  * @brief   Handle a Mgmt Nwk Update request.
// 1279  *
// 1280  * @param   pBuf  - MT message data
// 1281  *
// 1282  * @return  void
// 1283  ***************************************************************************************************/
// 1284 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1285 {
// 1286   uint8 cmdId;
// 1287   uint8 retValue;
// 1288   zAddrType_t destAddr;
// 1289   uint32 channelMask;
// 1290   uint8 scanDuration, scanCount;
// 1291   uint16 nwkManagerAddr;
// 1292 
// 1293     /* parse header */
// 1294   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1295   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1296 
// 1297   /* Destination address */
// 1298   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1299   pBuf += 2;
// 1300 
// 1301   /* Destination address mode */
// 1302   destAddr.addrMode = *pBuf++;
// 1303 
// 1304   channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
// 1305   pBuf += 4;
// 1306 
// 1307   /* Scan duration */
// 1308   scanDuration = *pBuf++;
// 1309 
// 1310   /* Scan count */
// 1311   scanCount = *pBuf++;
// 1312 
// 1313   /* NWK manager address */
// 1314   nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1315 
// 1316   /* Send the Management Network Update request */
// 1317   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1318                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1319 
// 1320   /*
// 1321     Since we don't recevied our own broadcast messages, we should
// 1322     send a unicast copy of the message to ourself.
// 1323   */
// 1324   if ( destAddr.addrMode == AddrBroadcast )
// 1325   {
// 1326     destAddr.addrMode = Addr16Bit;
// 1327     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1328     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1329                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1330   }
// 1331 
// 1332   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1333 }
// 1334 #endif /* MT_ZDO_MGMT */
// 1335 
// 1336 #endif /* MT_ZDO_FUNC */
// 1337 
// 1338 
// 1339 /***************************************************************************************************
// 1340  * Callback handling function
// 1341  ***************************************************************************************************/
// 1342 
// 1343 #if defined (MT_ZDO_CB_FUNC)
// 1344 /***************************************************************************************************
// 1345  * @fn     MT_ZdoDirectCB()
// 1346  *
// 1347  * @brief  ZDO direct callback.  Build an MT message directly from the
// 1348  *         over-the-air ZDO message.
// 1349  *
// 1350  * @param  pData - Incoming AF frame.
// 1351  *
// 1352  * @return  none
// 1353  ***************************************************************************************************/
// 1354 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
// 1355 {
// 1356   uint8 dataLen;
// 1357   uint8 msgLen;
// 1358   uint8 *pBuf;
// 1359   uint8 *p;
// 1360   uint8 id;
// 1361   
// 1362   // Is the message an exception or not a response?
// 1363   if ( ((pData->clusterId & ZDO_RESPONSE_BIT) == 0) 
// 1364                       || MT_ZdoHandleExceptions( pData, inMsg ) )
// 1365   {
// 1366     // Handled somewhere else or not needed
// 1367     return;
// 1368   }
// 1369 
// 1370   /* map cluster ID to MT message */
// 1371   id = (uint8) pData->clusterId;
// 1372   id = mtZdoCluster2Rsp[id >> 4][id & 0x0F];
// 1373 
// 1374   /* ZDO data starts after one-byte sequence number */
// 1375   dataLen = pData->cmd.DataLength - 1;
// 1376 
// 1377   /* msg buffer length includes two bytes for srcAddr */
// 1378   msgLen = dataLen + sizeof(uint16);
// 1379 
// 1380   /* get buffer */
// 1381   if ((p = pBuf = MT_TransportAlloc(((uint8)MT_RPC_CMD_AREQ |(uint8)MT_RPC_SYS_ZDO), msgLen)) != NULL)
// 1382   {
// 1383     /* build header */
// 1384     *p++ = msgLen;
// 1385     *p++ = (uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO;
// 1386     *p++ = id;
// 1387 
// 1388     /* build srcAddr */
// 1389     *p++ = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 1390     *p++ = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 1391 
// 1392     /* copy ZDO data, skipping one-byte sequence number */
// 1393     osal_memcpy(p, (pData->cmd.Data + 1), dataLen);
// 1394 
// 1395     /* send it */
// 1396     MT_TransportSend(pBuf);
// 1397   }
// 1398 }
// 1399 
// 1400 /***************************************************************************************************
// 1401  * @fn     MT_ZdoHandleExceptions()
// 1402  *
// 1403  * @brief  Handles all messages that are an expection to the generic MT ZDO Response.
// 1404  *
// 1405  * @param  pData - Incoming AF frame.
// 1406  *
// 1407  * @return  TRUE if handled by this function, FALSE if not
// 1408  ***************************************************************************************************/
// 1409 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 1410 {
// 1411   uint8 ret = TRUE;
// 1412   ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
// 1413   ZDO_DeviceAnnce_t devAnnce;
// 1414   uint8 doDefault = FALSE;
// 1415   
// 1416   switch ( inMsg->clusterID )
// 1417   {
// 1418     case NWK_addr_rsp:
// 1419     case IEEE_addr_rsp:
// 1420       nwkRsp = ZDO_ParseAddrRsp( inMsg );
// 1421       MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 1422       if ( nwkRsp )
// 1423         osal_mem_free( nwkRsp );
// 1424       break;
// 1425       
// 1426     case Device_annce:
// 1427       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 1428       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 1429       break;
// 1430       
// 1431     case Simple_Desc_rsp:
// 1432       if ( pData->cmd.DataLength > 5 )
// 1433         ret = FALSE;
// 1434       else
// 1435         doDefault = TRUE;        
// 1436       break;  
// 1437       
// 1438     default:
// 1439       ret = FALSE;
// 1440       break;
// 1441   }
// 1442   
// 1443   if ( doDefault )
// 1444   {
// 1445     ret = FALSE;
// 1446     pData->clusterId = 0x26;
// 1447     pData->cmd.DataLength = 2;
// 1448   }
// 1449   
// 1450   return ( ret );
// 1451 }
// 1452 
// 1453 /***************************************************************************************************
// 1454  * @fn      MT_ZdoAddrRspCB
// 1455  *
// 1456  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 1457  *
// 1458  * @param   pMsg  - Message data
// 1459  *
// 1460  * @return  void
// 1461  */
// 1462 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 1463 {
// 1464   uint8   listLen;
// 1465   uint8   msgLen;
// 1466   uint8   *pBuf;
// 1467   uint8   *p;
// 1468 
// 1469   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 1470 
// 1471   /* get length, sanity check length */
// 1472   listLen = pMsg->numAssocDevs;
// 1473   
// 1474   /* calculate msg length */
// 1475   msgLen = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 1476 
// 1477   /* get buffer */
// 1478   if ((p = pBuf = MT_TransportAlloc(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), msgLen)) != NULL)
// 1479   {
// 1480     /* build header */
// 1481     *p++ = msgLen;
// 1482     *p++ = (uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO;
// 1483     *p++ = (clusterID == IEEE_addr_rsp) ?
// 1484            MT_ZDO_IEEE_ADDR_RSP : MT_ZDO_NWK_ADDR_RSP;
// 1485 
// 1486     /* build msg parameters */
// 1487 
// 1488     *p++ = pMsg->status;
// 1489 
// 1490     osal_cpyExtAddr(p, pMsg->extAddr);
// 1491     p += Z_EXTADDR_LEN;
// 1492 
// 1493     *p++ = LO_UINT16(pMsg->nwkAddr);
// 1494     *p++ = HI_UINT16(pMsg->nwkAddr);
// 1495 
// 1496     *p++ = pMsg->startIndex;
// 1497 
// 1498     *p++ = listLen;
// 1499 
// 1500     MT_Word2Buf(p, pMsg->devList, listLen);
// 1501 
// 1502     /* send it */
// 1503     MT_TransportSend(pBuf);
// 1504   }
// 1505 }
// 1506 
// 1507 /***************************************************************************************************
// 1508  * @fn      MT_ZdoEndDevAnnceCB
// 1509  *
// 1510  * @brief   Handle end device announce OSAL message from ZDO.
// 1511  *
// 1512  * @param   pMsg  - Message data
// 1513  *
// 1514  * @return  void
// 1515  */
// 1516 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 1517 {
// 1518   uint8 *pBuf;
// 1519   uint8 *p;
// 1520 
// 1521   if ((p = pBuf = MT_TransportAlloc(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1522                     MT_ZDO_END_DEVICE_ANNCE_IND_LEN)) != NULL)
// 1523   {
// 1524     *p++ = MT_ZDO_END_DEVICE_ANNCE_IND_LEN;
// 1525     *p++ = (uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO;
// 1526     *p++ = MT_ZDO_END_DEVICE_ANNCE_IND;
// 1527 
// 1528     *p++ = LO_UINT16(srcAddr);
// 1529     *p++ = HI_UINT16(srcAddr);
// 1530 
// 1531     *p++ = LO_UINT16(pMsg->nwkAddr);
// 1532     *p++ = HI_UINT16(pMsg->nwkAddr);
// 1533 
// 1534     osal_cpyExtAddr(p, pMsg->extAddr);
// 1535     p += Z_EXTADDR_LEN;
// 1536 
// 1537     *p = pMsg->capabilities;
// 1538 
// 1539     MT_TransportSend(pBuf);
// 1540   }
// 1541 }
// 1542 #endif // MT_ZDO_CB_FUNC
// 1543 /***************************************************************************************************
// 1544 ***************************************************************************************************/
// 1545 
// 1546 #endif   /*ZDO Command Processing in MT*/
// 
// 2 130 bytes in segment BANKED_CODE
//   102 bytes in segment BANK_RELAYS
//   104 bytes in segment XDATA_Z
// 
// 2 232 bytes of CODE  memory
//   104 bytes of XDATA memory
//
//Errors: none
//Warnings: none
