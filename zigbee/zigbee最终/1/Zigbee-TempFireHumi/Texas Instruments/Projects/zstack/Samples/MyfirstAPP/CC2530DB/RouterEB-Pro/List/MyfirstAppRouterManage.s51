///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        19/Jun/2019  14:37:13 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee       /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          Source\MyfirstAppRouterManage.c                   /
//    Command line       =  -f "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"   /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f "C:\Users\fangxi1998\Desktop\øŒ≥ /
//                          Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-Temp /
//                          FireHumi\Texas Instruments\Projects\zstack\Sample /
//                          s\MyfirstAPP\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Config.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x04000000         /
//                          -DZDAPP_CONFIG_PAN_ID=0xA1B2                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\fangxi1998\Deskt /
//                          op\øŒ≥Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbe /
//                          e-TempFireHumi\Texas Instruments\Projects\zstack\ /
//                          Samples\MyfirstAPP\Source\MyfirstAppRouterManage. /
//                          c" -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D         /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\" -lA                  /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\" --diag_suppress      /
//                          Pe001,Pa010 -o "C:\Users\fangxi1998\Desktop\øŒ≥Ã… /
//                          Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFi /
//                          reHumi\Texas Instruments\Projects\zstack\Samples\ /
//                          MyfirstAPP\CC2530DB\RouterEB-Pro\Obj\" -e         /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 8    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ë /
//                          º∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFir /
//                          eHumi\Texas Instruments\Projects\zstack\Samples\M /
//                          yfirstAPP\CC2530DB\..\SOURCE\" -I                 /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I             /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I        /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"  /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2 /
//                          530EB\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\ /
//                          zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHu /
//                          mi\Texas Instruments\Projects\zstack\Samples\Myfi /
//                          rstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº /
//                          ∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFire /
//                          Humi\Texas Instruments\Projects\zstack\Samples\My /
//                          firstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ /
//                          INCLUDE\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº /
//                          ∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFire /
//                          Humi\Texas Instruments\Projects\zstack\Samples\My /
//                          firstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \AF\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zi /
//                          gbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi /
//                          \Texas Instruments\Projects\zstack\Samples\Myfirs /
//                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK /
//                          \" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbe /
//                          e «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Te /
//                          xas Instruments\Projects\zstack\Samples\MyfirstAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"  /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"   /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"    /
//                          -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee   /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I  /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I      /
//                          "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee      /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR /
//                          \" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbe /
//                          e «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Te /
//                          xas Instruments\Projects\zstack\Samples\MyfirstAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDA /
//                          TA\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zig /
//                          bee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\ /
//                          Texas Instruments\Projects\zstack\Samples\Myfirst /
//                          APP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD /
//                          E\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigb /
//                          ee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\T /
//                          exas Instruments\Projects\zstack\Samples\MyfirstA /
//                          PP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LE /
//                          VEL\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zi /
//                          gbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi /
//                          \Texas Instruments\Projects\zstack\Samples\Myfirs /
//                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L /
//                          EVEL\srf04\" -I "C:\Users\fangxi1998\Desktop\øŒ≥Ã /
//                          …Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempF /
//                          ireHumi\Texas Instruments\Projects\zstack\Samples /
//                          \MyfirstAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MA /
//                          C\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz              /
//    List file          =  C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee       /
//                          «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texa /
//                          s Instruments\Projects\zstack\Samples\MyfirstAPP\ /
//                          CC2530DB\RouterEB-Pro\List\MyfirstAppRouterManage /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MyfirstAppRouterManage

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??My_Task_Init?relay
        FUNCTION ??My_Task_Init?relay,0203H
        PUBLIC ??My_Task_Process_Event?relay
        FUNCTION ??My_Task_Process_Event?relay,0203H
        PUBLIC ??My_Task_Process_MSG?relay
        FUNCTION ??My_Task_Process_MSG?relay,0203H
        PUBLIC ??Send_Message?relay
        FUNCTION ??Send_Message?relay,0203H
        PUBLIC My_EndPoint_Desc
        PUBLIC My_EndPoint_SimpleDesc
        PUBLIC My_InCluster_List
        PUBLIC My_OutCluster_List
        PUBLIC My_TaskID
        PUBLIC My_Task_Init
        FUNCTION My_Task_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC My_Task_Process_Event
        FUNCTION My_Task_Process_Event,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC My_Task_Process_MSG
        FUNCTION My_Task_Process_MSG,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC NwkState
        PUBWEAK P2DIR
        PUBLIC Send_Message
        FUNCTION Send_Message,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC Single_DstAddr
        PUBLIC TransID
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBLIC ch
        PUBLIC fHumiValue
        PUBLIC fTempValue
        PUBLIC fire1
        PUBLIC humi
        PUBLIC light
        PUBLIC multi_DstAddr
        PUBLIC temh
        PUBLIC teml
        PUBLIC temperature
        PUBLIC tmp_msg
        PUBLIC uHumiValue
        PUBLIC uTempValue
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
DS18B20_SendConvert SYMBOL "DS18B20_SendConvert"
DS18B20_GetTem      SYMBOL "DS18B20_GetTem"
getGuangM           SYMBOL "getGuangM"
io_init             SYMBOL "io_init"
getfire             SYMBOL "getfire"
io_inithongwai      SYMBOL "io_inithongwai"
gethongwai          SYMBOL "gethongwai"
getyanwu            SYMBOL "getyanwu"
init_oled           SYMBOL "init_oled"
HalLedBlink         SYMBOL "HalLedBlink"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DS18B20_GetTem?relay SYMBOL "?relay", DS18B20_GetTem
??DS18B20_SendConvert?relay SYMBOL "?relay", DS18B20_SendConvert
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??afRegister?relay  SYMBOL "?relay", afRegister
??getGuangM?relay   SYMBOL "?relay", getGuangM
??getfire?relay     SYMBOL "?relay", getfire
??gethongwai?relay  SYMBOL "?relay", gethongwai
??getyanwu?relay    SYMBOL "?relay", getyanwu
??init_oled?relay   SYMBOL "?relay", init_oled
??io_init?relay     SYMBOL "?relay", io_init
??io_inithongwai?relay SYMBOL "?relay", io_inithongwai
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
My_Task_Init        SYMBOL "My_Task_Init"
??My_Task_Init?relay SYMBOL "?relay", My_Task_Init
My_Task_Process_Event SYMBOL "My_Task_Process_Event"
??My_Task_Process_Event?relay SYMBOL "?relay", My_Task_Process_Event
My_Task_Process_MSG SYMBOL "My_Task_Process_MSG"
??My_Task_Process_MSG?relay SYMBOL "?relay", My_Task_Process_MSG
Send_Message        SYMBOL "Send_Message"
??Send_Message?relay SYMBOL "?relay", Send_Message

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DS18B20_SendConvert
        FUNCTION DS18B20_SendConvert,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DS18B20_GetTem
        FUNCTION DS18B20_GetTem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN getGuangM
        FUNCTION getGuangM,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN io_init
        FUNCTION io_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN getfire
        FUNCTION getfire,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN io_inithongwai
        FUNCTION io_inithongwai,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gethongwai
        FUNCTION gethongwai,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN getyanwu
        FUNCTION getyanwu,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN init_oled
        FUNCTION init_oled,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DS18B20_GetTem?relay
        FUNCTION ??DS18B20_GetTem?relay,00H
        EXTERN ??DS18B20_SendConvert?relay
        FUNCTION ??DS18B20_SendConvert?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??getGuangM?relay
        FUNCTION ??getGuangM?relay,00H
        EXTERN ??getfire?relay
        FUNCTION ??getfire?relay,00H
        EXTERN ??gethongwai?relay
        FUNCTION ??gethongwai?relay,00H
        EXTERN ??getyanwu?relay
        FUNCTION ??getyanwu?relay,00H
        EXTERN ??init_oled?relay
        FUNCTION ??init_oled?relay,00H
        EXTERN ??io_init?relay
        FUNCTION ??io_init?relay,00H
        EXTERN ??io_inithongwai?relay
        FUNCTION ??io_inithongwai?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN _a
        EXTERN _b
        EXTERN _data
        EXTERN lightdata
        EXTERN sensor_data_value

// C:\Users\fangxi1998\Desktop\øŒ≥Ã…Ëº∆\zigbee «∂»Î Ωlinux\zigbee◊Ó÷’\1\Zigbee-TempFireHumi\Texas Instruments\Projects\zstack\Samples\MyfirstAPP\Source\MyfirstAppRouterManage.c
//    1 #include "OSAL_MyfirstAppRouter.h"
//    2 #include "MyfirstApp.h"
//    3 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    4 #include "hal_led.h"
//    5 #include "DS18B20.h"
//    6 #include "GuangM.h"
//    7 #include "Basic.h"
//    8 #include "fire.h"
//    9 #include "hongwai.h"
//   10 #include "yanwu1.h"
//   11 #include "oled.h"
//   12 #define BEEP P2_0
//   13 #define  myID  1
//   14 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   15 unsigned char temh,teml;
temh:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
teml:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   16 unsigned char ch[10];
ch:
        DS 10
        REQUIRE __INIT_XDATA_Z
//   17 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   18 byte     My_TaskID;
My_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   19 uint8    TransID = 0;
TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   20 uint8    tmp_msg[9];
tmp_msg:
        DS 9
        REQUIRE __INIT_XDATA_Z
//   21 //uint8    light_data[2]; 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   22 uint8    light=0;
light:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   23 
//   24 //volatile static 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   25 uint8 temperature=0, humi=0;
temperature:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
humi:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   26 uint16 uTempValue, uHumiValue;
uTempValue:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
uHumiValue:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   27 float fTempValue, fHumiValue;
fTempValue:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
fHumiValue:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   28 
//   29 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   30 uint8    fire1=0;
fire1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   31 afAddrType_t   multi_DstAddr;
multi_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   32 afAddrType_t   Single_DstAddr;
Single_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   33 
//   34 //¥Ê¡Àµ±«∞Ω⁄µ„µƒÕ¯¬Á◊¥Ã¨£¨Œ“√«Ω´À˚≥ı ºªØŒ™'Œ¥º”»ÎÕ¯'

        RSEG XDATA_I:XDATA:NOROOT(0)
//   35 devStates_t  NwkState = DEV_INIT;
NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for NwkState>`
        REQUIRE __INIT_XDATA_I
//   36 
//   37 void My_Task_Process_MSG ( afIncomingMSGPacket_t *msg );
//   38 void Send_Message(void);
//   39 
//   40 //*************************************************
//   41 //¥À»ŒŒÒµƒ∂Àµ„√Ë ˆ£¨À¸∂®“Â¡À¥À»ŒŒÒ◊˜Œ™ ZigBee ”¶”√≥Ã–Ú∂‘œÛµƒÀ˘”––≈œ¢
//   42 //Œ“√«Ω´ª·‘⁄≥ı ºªØ∫Ø ˝÷–Œ™À¸∏≥÷µ°£»ª∫ÛΩ´À˚◊¢≤·µΩ”¶”√≥Ã–ÚøÚº‹÷–°£

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   43 endPointDesc_t   My_EndPoint_Desc;
My_EndPoint_Desc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   44 
//   45 
//   46 //±£¥Ê¡À“ª∏ˆ¥ÿ ID µƒ¡–±Ì £¨ À˘”–”–πÿ”⁄¥À»ŒŒÒµƒ¥ÿ∂º–Ë“™‘⁄¥À∂®“Â

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   47 const uint16 My_InCluster_List[MY_ENDPOINT_MAX_OUTCLUSTERS] =
My_InCluster_List:
        DATA16
        DW 3
        DW 4
        DW 5
        DW 6
//   48 { 
//   49   CLUSTER_1_ID,
//   50   CLUSTER_2_ID,
//   51   CLUSTER_3_ID,
//   52   CLUSTER_4_ID
//   53 };
//   54 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   55 const uint16 My_OutCluster_List[MY_ENDPOINT_MAX_INCLUSTERS] =
My_OutCluster_List:
        DATA16
        DW 3
        DW 4
        DW 5
        DW 6
//   56 { 
//   57   CLUSTER_1_ID,
//   58   CLUSTER_2_ID,
//   59   CLUSTER_3_ID,
//   60   CLUSTER_4_ID
//   61 };
//   62 
//   63 //¥À∂Àµ„µƒºÚµ•√Ë ˆ£¨À¸±£¥Ê¡À¥À»ŒŒÒµƒ“ª–©ª˘±æ–≈œ¢

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   64 const SimpleDescriptionFormat_t    My_EndPoint_SimpleDesc  =
My_EndPoint_SimpleDesc:
        DB 15
        DATA16
        DW 3847
        DW 2
        DATA8
        DB 0
        DB 4
        DATA16
        DW My_InCluster_List
        DATA8
        DB 4
        DATA16
        DW My_OutCluster_List
//   65 {
//   66      MY_ENDPOINT_NO,
//   67      MY_ENDPOINT_PROFID,
//   68      MY_ENDPOINT_DEVICEID,
//   69      MY_ENDPOINT_DEVICE_VERSION,
//   70      MY_ENDPOINT_FLAGS,
//   71      MY_ENDPOINT_MAX_INCLUSTERS,
//   72      (uint16*)My_InCluster_List,
//   73      MY_ENDPOINT_MAX_OUTCLUSTERS,
//   74      (uint16*)My_OutCluster_List
//   75 };
//   76      
//   77 
//   78 //********************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   79 void My_Task_Init( byte task_id )
My_Task_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function My_Task_Init
        CODE
//   80 {
        FUNCALL My_Task_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   81   
//   82     My_TaskID = task_id;
        MOV     DPTR,#My_TaskID
        MOVX    @DPTR,A
//   83 
//   84     //…Ë÷√µ•≤•–≈œ¢
//   85     Single_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Single_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//   86     Single_DstAddr.endPoint = MY_ENDPOINT_NO;//15
        INC     DPTR
        MOV     A,#0xf
        MOVX    @DPTR,A
//   87     Single_DstAddr.addr.shortAddr = 0x0000;//–≠µ˜∆˜ƒ¨»œ∂Ãµÿ÷∑Œ™0x0000
        MOV     DPTR,#Single_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   88     
//   89     My_EndPoint_Desc.endPoint = MY_ENDPOINT_NO; //15
        MOV     DPTR,#My_EndPoint_Desc
        MOV     A,#0xf
        MOVX    @DPTR,A
//   90     My_EndPoint_Desc.task_id = &My_TaskID;//”√ªß»ŒŒÒID
        INC     DPTR
        MOV     A,#My_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(My_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//   91     My_EndPoint_Desc.simpleDesc = 
//   92         (SimpleDescriptionFormat_t*)&My_EndPoint_SimpleDesc;
        INC     DPTR
        MOV     A,#My_EndPoint_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(My_EndPoint_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//   93     My_EndPoint_Desc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   94 
//   95     afRegister(&My_EndPoint_Desc);
        ; Setup parameters for call to function afRegister
        MOV     R2,#My_EndPoint_Desc & 0xff
        MOV     R3,#(My_EndPoint_Desc >> 8) & 0xff
        LCALL   ??afRegister?relay
//   96     
//   97     //InitADC();
//   98     // P2INP&=~0X01;//…œœ¬¿≠ƒ£ Ω
//   99   //P2DIR|=0X01;//Àƒ∏ˆ◊ˆ ‰≥ˆ
//  100   //P2SEL&=~0X01;//Õ®”√p1.0 p1.1 p1.2 p1.3 
//  101   //BEEP=1;
//  102     
//  103     
//  104 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  105 
//  106 //**********************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 UINT16 My_Task_Process_Event(byte task_id,UINT16 events)
My_Task_Process_Event:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function My_Task_Process_Event
        CODE
//  108 {    //float light;
        FUNCALL My_Task_Process_Event, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, My_Task_Process_MSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, DS18B20_SendConvert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, DS18B20_GetTem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, getGuangM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, io_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, getfire
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, io_inithongwai
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, gethongwai
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, getyanwu
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, init_oled
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, Send_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_Event, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  109      //unsigned char adcdata[]="00.0% ";
//  110     //µ±“ª∏ˆœ˚œ¢±ª∑¢ÀÕ∏¯»ŒŒÒ ±,SYS_EVENT_MSG, ¬º˛ª·±ª¥´µ›∏¯»ŒŒÒ 
//  111   
//  112     //±Ì æ”–“ª∏ˆœ˚œ¢µ»¥˝¥¶¿Ì°£
//  113     afIncomingMSGPacket_t *MSGpkt;
//  114     if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??My_Task_Process_Event_0
//  115     {
//  116         //¥”œ˚œ¢∂”¡–÷–»°≥ˆœ˚œ¢
//  117         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(My_TaskID);
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??My_Task_Process_Event_1
//  118         while ( MSGpkt )
//  119         {
//  120             switch ( MSGpkt->hdr.event )
//  121             {
//  122                 /*
//  123                 µ±…Ë±∏≥…π¶º”»ÎÕ¯¬Á“‘∫Û£¨ ZigBee …Ë±∏∂‘œÛ£®ZDO£©ª·∏¯À˘”–“—æ≠‘⁄”¶”√≥Ã–ÚøÚº‹÷–◊¢≤·π˝µƒ»ŒŒÒ
//  124                 £®“≤æÕ «◊˜Œ™ ZigBee µƒ”¶”√≥Ã–Ú∂‘œÛ¥Ê‘⁄µƒ»ŒŒÒ£©∑¢ÀÕ“ª∏ˆZDO_STATE_CHANGEœ˚œ¢£¨œ˚œ¢µƒ◊¥
//  125                 Ã¨÷∏ æ¡Àµ±«∞Õ¯¬Áµƒ◊¥Ã¨°£
//  126                 */
//  127             case ZDO_STATE_CHANGE://Õ¯¬Á◊¥Ã¨∏ƒ±‰ ¬º˛
//  128                  NwkState = (devStates_t)MSGpkt->hdr.status;
//  129                 if ( NwkState == DEV_END_DEVICE || NwkState == DEV_ROUTER )
//  130                 {  
//  131                     osal_start_timerEx(My_TaskID, TMP_MSG_EVT_ID, 4000);
//  132                    // osal_start_timerEx(My_TaskID, FIRE_MSG_EVT_ID, 1000);//ø™∆ÙOSAL∂® ±∆˜£¨∂® ±ºÏ≤‚ª—Ê±Í÷æ
//  133                 }
//  134                 break;
//  135             case AF_INCOMING_MSG_CMD:  //ƒ£øÈΩ” ’µΩ ˝æ›–≈œ¢ ¬º˛
//  136                  My_Task_Process_MSG( MSGpkt );
??My_Task_Process_Event_2:
        ; Setup parameters for call to function My_Task_Process_MSG
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??My_Task_Process_MSG?relay
//  137                  break;
//  138                  
//  139             case KEY_CHANGE://∞¥º¸ ¬º˛
//  140                
//  141                 break;
//  142            
//  143             default:
//  144                 break;
//  145             }
//  146             // Õ∑≈œ˚œ¢À˘‘⁄µƒœ˚œ¢ª∫≥Â«¯
//  147             osal_msg_deallocate( (uint8 *)MSGpkt );
??My_Task_Process_Event_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  148             MSGpkt = (afIncomingMSGPacket_t*)osal_msg_receive(My_TaskID);
        ; Setup parameters for call to function osal_msg_receive
??My_Task_Process_Event_1:
        MOV     DPTR,#My_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??My_Task_Process_Event_4
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??My_Task_Process_Event_2
        ADD     A,#0x49
        JNZ     ??My_Task_Process_Event_3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#NwkState
        MOVX    @DPTR,A
        XRL     A,#0x6
        JZ      ??My_Task_Process_Event_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??My_Task_Process_Event_3
??My_Task_Process_Event_5:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x60
        MOV     R5,#0xf
        LCALL   ?Subroutine2 & 0xFFFF
//  149         }
??CrossCallReturnLabel_4:
        SJMP    ??My_Task_Process_Event_3
//  150         
//  151         return (events ^ SYS_EVENT_MSG);
??My_Task_Process_Event_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??My_Task_Process_Event_6:
        MOV     R3,A
        LJMP    ??My_Task_Process_Event_7 & 0xFFFF
//  152     }
//  153     
//  154     //∑¢ÀÕŒ¬∂»÷µµƒ ¬º˛
//  155   if(events & TMP_MSG_EVT_ID)  
??My_Task_Process_Event_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??My_Task_Process_Event_8 & 0xFFFF
//  156     {
//  157        
//  158         DS18B20_SendConvert();
        ; Setup parameters for call to function DS18B20_SendConvert
        LCALL   ??DS18B20_SendConvert?relay
//  159         DS18B20_GetTem();
        ; Setup parameters for call to function DS18B20_GetTem
        LCALL   ??DS18B20_GetTem?relay
//  160         getGuangM();
        ; Setup parameters for call to function getGuangM
        LCALL   ??getGuangM?relay
//  161            
//  162         tmp_msg[0] = myID;
        MOV     DPTR,#tmp_msg
        MOV     A,#0x1
        MOVX    @DPTR,A
//  163         tmp_msg[1] = sensor_data_value[1];
        MOV     DPTR,#sensor_data_value + 1
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 1
        MOVX    @DPTR,A
//  164         tmp_msg[2] = sensor_data_value[0];
        MOV     DPTR,#sensor_data_value
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 2
        MOVX    @DPTR,A
//  165         tmp_msg[3] =lightdata[0];// ÆŒª
        MOV     DPTR,#lightdata
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 3
        MOVX    @DPTR,A
//  166         tmp_msg[4] = lightdata[1];//∏ˆŒª
        MOV     DPTR,#lightdata + 1
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 4
        MOVX    @DPTR,A
//  167         tmp_msg[5] =lightdata[3];//–° ˝Œª 
        MOV     DPTR,#lightdata + 3
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 5
        MOVX    @DPTR,A
//  168 
//  169         
//  170         io_init();
        ; Setup parameters for call to function io_init
        LCALL   ??io_init?relay
//  171         getfire();
        ; Setup parameters for call to function getfire
        LCALL   ??getfire?relay
//  172         tmp_msg[6]=_a[0];
        MOV     DPTR,#_a
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 6
        MOVX    @DPTR,A
//  173         
//  174         io_inithongwai();
        ; Setup parameters for call to function io_inithongwai
        LCALL   ??io_inithongwai?relay
//  175         gethongwai();
        ; Setup parameters for call to function gethongwai
        LCALL   ??gethongwai?relay
//  176         tmp_msg[7]=_b[0];
        MOV     DPTR,#_b
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 7
        MOVX    @DPTR,A
//  177         
//  178         getyanwu();
        ; Setup parameters for call to function getyanwu
        LCALL   ??getyanwu?relay
//  179         tmp_msg[8]=_data[0];
        MOV     DPTR,#_data
        MOVX    A,@DPTR
        MOV     DPTR,#tmp_msg + 8
        MOVX    @DPTR,A
//  180         
//  181         init_oled();
        ; Setup parameters for call to function init_oled
        LCALL   ??init_oled?relay
//  182         teml = tmp_msg[2];
        MOV     DPTR,#tmp_msg + 2
        MOVX    A,@DPTR
        MOV     DPTR,#teml
        MOVX    @DPTR,A
//  183               //ªÒ»°Œ¬∂»∏ﬂŒª
//  184         temh = tmp_msg[1];
        MOV     DPTR,#tmp_msg + 1
        MOVX    A,@DPTR
        MOV     DPTR,#temh
        MOVX    @DPTR,A
//  185         if((temh/10%10==0)&&(temh/100==0))
        MOV     B,#0xa
        DIV     AB
        MOV     B,#0xa
        DIV     AB
        MOV     R0,B
        MOV     A,R0
        JNZ     ??My_Task_Process_Event_9
        MOV     B,#0x64
        MOVX    A,@DPTR
        DIV     AB
        JNZ     ??My_Task_Process_Event_9
//  186               ch[4]=' ';
        MOV     DPTR,#ch + 4
        MOV     A,#0x20
        SJMP    ??My_Task_Process_Event_10
//  187               else ch[4]=temh/10%10+0x30;
??My_Task_Process_Event_9:
        MOV     A,#0x30
        ADD     A,R0
        MOV     DPTR,#ch + 4
??My_Task_Process_Event_10:
        MOVX    @DPTR,A
//  188 
//  189               ch[5]=temh%10+0x30;
        MOV     DPTR,#temh
        MOVX    A,@DPTR
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     DPTR,#ch + 5
        MOVX    @DPTR,A
//  190               //if(((ch[4]-'0')*10+(ch[5]-'0'))>=32)
//  191                 //BEEP=0;
//  192               //else
//  193                 //BEEP=1;
//  194 
//  195          
//  196         Send_Message();
        ; Setup parameters for call to function Send_Message
        LCALL   ??Send_Message?relay
//  197         HalLedBlink(HAL_LED_2,3,50,300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x3
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  198         osal_start_timerEx(My_TaskID, TMP_MSG_EVT_ID, (2000+myID) );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x2f
        MOV     R5,#0x7
        LCALL   ?Subroutine2 & 0xFFFF
//  199         
//  200         return (events ^ TMP_MSG_EVT_ID);
??CrossCallReturnLabel_5:
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        LJMP    ??My_Task_Process_Event_6 & 0xFFFF
//  201         
//  202     }
//  203 
//  204     
//  205      //πÿ±’∑‰√˘∆˜µƒ ¬º˛
//  206     if(events & BEEP_OFF_EVT_ID) 
??My_Task_Process_Event_8:
        ANL     A,#0x2
        JZ      ??My_Task_Process_Event_11
//  207     {
//  208         BEEP_OFF;
        SETB    0xa0.0
        ANL     0xff,#0xfe
//  209     }
//  210      
//  211     return 0; 
??My_Task_Process_Event_11:
        MOV     R2,#0x0
        MOV     R3,#0x0
??My_Task_Process_Event_7:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE _A_P2
        REQUIRE P2DIR
//  212 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOV     R2,#0x1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     R3,#0x0
        MOV     DPTR,#My_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  213 
//  214 //¥¶¿ÌΩ” ’µΩµƒ ˝æ›

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  215 void My_Task_Process_MSG ( afIncomingMSGPacket_t *msg )
My_Task_Process_MSG:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function My_Task_Process_MSG
        CODE
//  216 {
        FUNCALL My_Task_Process_MSG, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL My_Task_Process_MSG, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  217     switch ( msg->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for My_Task_Process_MSG>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??My_Task_Process_MSG_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??My_Task_Process_MSG_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??My_Task_Process_MSG_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??My_Task_Process_MSG_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??My_Task_Process_MSG_3
        CODE
//  218     {
//  219          break;
//  220     case CLUSTER_1_ID :
//  221 
//  222          
//  223     case CLUSTER_2_ID:
//  224          if(  ('O' == msg->cmd.Data[0])&&
//  225               ('P' == msg->cmd.Data[1])&&  
//  226               ('E' == msg->cmd.Data[2])&&
//  227               ('N' == msg->cmd.Data[3])    )
??My_Task_Process_MSG_1:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??My_Task_Process_MSG_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x50
        JNZ     ??My_Task_Process_MSG_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x45
        JNZ     ??My_Task_Process_MSG_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4e
        JNZ     ??My_Task_Process_MSG_4
//  228            
//  229            
//  230          {  HalLedBlink(HAL_LED_2,4,50,300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  231             BEEP_ON;
        ORL     0xff,#0x1
        CLR     0xa0.0
//  232             
//  233             osal_start_timerEx(My_TaskID, BEEP_OFF_EVT_ID, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x2
        LCALL   ??Subroutine4_0 & 0xFFFF
//  234          }
??CrossCallReturnLabel_6:
        SJMP    ??My_Task_Process_MSG_0
//  235          else if(  ('O' == msg->cmd.Data[0])&&
//  236                  ('N' == msg->cmd.Data[1])   ){
??My_Task_Process_MSG_4:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x4f
        JNZ     ??My_Task_Process_MSG_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4e
        JNZ     ??My_Task_Process_MSG_3
//  237                  
//  238                  OLED=1;
??My_Task_Process_MSG_5:
        SETB    0x90.5
        SJMP    ??My_Task_Process_MSG_0
//  239                  
//  240                  }
//  241          else if(  ('C' == msg->cmd.Data[0])&&
//  242               ('L' == msg->cmd.Data[1])&&  
//  243               ('O' == msg->cmd.Data[2])&&
//  244               ('S' == msg->cmd.Data[3]) &&
//  245               ('E' == msg->cmd.Data[4])   )
??My_Task_Process_MSG_3:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        XRL     A,#0x43
        JNZ     ??My_Task_Process_MSG_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4c
        JNZ     ??My_Task_Process_MSG_0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4f
        JNZ     ??My_Task_Process_MSG_0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x53
        JNZ     ??My_Task_Process_MSG_0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x45
        JNZ     ??My_Task_Process_MSG_0
//  246            
//  247            {
//  248                  
//  249                  OLED=0;
        CLR     0x90.5
        SJMP    ??My_Task_Process_MSG_0
//  250                  
//  251                  }
//  252 
//  253          break;
//  254       case CLUSTER_3_ID:
//  255          if(  ('O' == msg->cmd.Data[0])&&
//  256               ('N' == msg->cmd.Data[1]))
??My_Task_Process_MSG_2:
        LCALL   ?Subroutine1 & 0xFFFF
//  257            
//  258            
//  259          { 
//  260            
//  261            OLED=1;
//  262          }
//  263 
//  264          break;
//  265           case CLUSTER_4_ID:
//  266          if(  ('C' == msg->cmd.Data[0])&&
//  267               ('L' == msg->cmd.Data[1])&&  
//  268               ('O' == msg->cmd.Data[2])&&
//  269               ('S' == msg->cmd.Data[3])&& 
//  270               ('E' == msg->cmd.Data[4]))
//  271            
//  272            
//  273          { 
//  274             OLED=0;
//  275          }
//  276 
//  277          break;
//  278          
//  279          
//  280          
//  281     default:  break;    
//  282     }
??CrossCallReturnLabel_1:
        JNZ     ??My_Task_Process_MSG_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4e
        JZ      ??My_Task_Process_MSG_5
        CFI EndBlock cfiBlock9
//  283 }
??My_Task_Process_MSG_0:
        REQUIRE ?Subroutine0
        REQUIRE P2DIR
        REQUIRE _A_P2
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        XRL     A,#0x4f
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  284 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  285 void Send_Message(void)
Send_Message:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function Send_Message
        CODE
//  286 {
        FUNCALL Send_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  287     AF_DataRequest( &Single_DstAddr,                //∑¢ÀÕµÿ÷∑ƒ£ Ω
//  288                     &My_EndPoint_Desc,              //∂Àµ„√Ë ˆ∑˚
//  289                     CLUSTER_1_ID,                   //¥ÿID
//  290                     //(byte)osal_strlen(tmp_msg)+1,   //∑¢ÀÕ≥§∂»
//  291                     11,
//  292                     (byte *)tmp_msg,                //∑¢ÀÕƒ⁄»›
//  293                     & TransID,                      //÷°–Ú∫≈
//  294                     AF_DISCV_ROUTE,                 //∑¢œ÷¬∑”…
//  295                     AF_DEFAULT_RADIUS);             //¬∑”…∞Îæ∂£®ƒ¨»œ16º∂£©
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransID & 0xff
        MOV     ?V0 + 1,#(TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#tmp_msg & 0xff
        MOV     ?V0 + 1,#(tmp_msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#My_EndPoint_Desc & 0xff
        MOV     R5,#(My_EndPoint_Desc >> 8) & 0xff
        MOV     R2,#Single_DstAddr & 0xff
        MOV     R3,#(Single_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  296 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock18

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for NwkState>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??My_Task_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    My_Task_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??My_Task_Process_Event?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    My_Task_Process_Event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??My_Task_Process_MSG?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    My_Task_Process_MSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Send_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Send_Message

        END
//  297 
//  298 
//  299 
//  300 
//  301 
//  302 
// 
// 682 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
//  28 bytes in segment XDATA_ROM_C
//  69 bytes in segment XDATA_Z
// 
// 707 bytes of CODE  memory
//  28 bytes of CONST memory
//   0 bytes of DATA  memory (+ 3 bytes shared)
//  70 bytes of XDATA memory
//
//Errors: none
//Warnings: none
