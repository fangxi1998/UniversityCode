///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               25/Dec/2012  10:16:50 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530-2 /
//                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zst /
//                          ack\Samples\MyfirstAPP\Source\DS18B20.C           /
//    Command line       =  -f "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC25 /
//                          30-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\MyfirstAPP\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ              /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wConfig.cfg" (-DSECURE=0                /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yua /
//                          nwm\◊¿√Ê\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530- /
//                          2.2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\So /
//                          urce\DS18B20.C" -D ZTOOL_P1 -D MT_TASK -D         /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D HAL_UART=TRUE -D           /
//                          SERIAL_APP_PORT=0 -D HOLD_AUTO_START -D           /
//                          DH_AD_KEY_DEVICE -lC "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanw /
//                          m\◊¿√Ê\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2. /
//                          2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC25 /
//                          30DB\CoordinatorEB\List\" -lA                     /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\Li /
//                          st\" --diag_suppress Pe001,Pa010 -o               /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\Ob /
//                          j\" -e --require_prototypes --debug --core=plain  /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yua /
//                          nwm\◊¿√Ê\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530- /
//                          2.2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC /
//                          2530DB\" -I "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZS /
//                          tack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0 /
//                          \Projects\zstack\Samples\MyfirstAPP\CC2530DB\..\S /
//                          OURCE\" -I "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZSt /
//                          ack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\ /
//                          Projects\zstack\Samples\MyfirstAPP\CC2530DB\..\.. /
//                          \..\ZMAIN\TI2530DB\" -I                           /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MT\" -I "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊ /
//                          ¿√Ê\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0 /
//                          -1.3.0\Projects\zstack\Samples\MyfirstAPP\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I      /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HAL\TARGET\CC2530EB\" -I                /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\MCU\CCSOC\" -I                     /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\INCLUDE\" -I                       /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\AF\" -I                           /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\NWK\" -I                          /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SEC\" -I                          /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SAPI\" -I                         /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SYS\" -I                          /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\ZDO\" -I                          /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\ZMAC\F8W\" -I                           /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\ZMAC\" -I "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm /
//                          \◊¿√Ê\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2 /
//                          .0-1.3.0\Projects\zstack\Samples\MyfirstAPP\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"    /
//                          -I "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC25 /
//                          30-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects /
//                          \zstack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\SERVICES\SDATA\" -I                  /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\INCLUDE\" -I                        /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\HIGH_LEVEL\" -I                     /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\" -I                /
//                          "D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530- /
//                          2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\MyfirstAPP\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I    /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.3 Evaluation version\8051\INC\" -I "C:\Program  /
//                          Files\IAR Systems\Embedded Workbench 5.3          /
//                          Evaluation version\8051\INC\CLIB\" -Ohz           /
//    List file          =  D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530-2 /
//                          .2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zst /
//                          ack\Samples\MyfirstAPP\CC2530DB\CoordinatorEB\Lis /
//                          t\DS18B20.s51                                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DS18B20

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??DS18B20_Init?relay
        EXTERN ??DS18B20_Read?relay
        EXTERN ??DS18B20_Write?relay
        EXTERN ??delay_nus?relay
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??DS18B20_GetTem?relay
        FUNCTION ??DS18B20_GetTem?relay,0203H
        PUBLIC ??DS18B20_Init?relay
        FUNCTION ??DS18B20_Init?relay,0203H
        PUBLIC ??DS18B20_Read?relay
        FUNCTION ??DS18B20_Read?relay,0203H
        PUBLIC ??DS18B20_SendConvert?relay
        FUNCTION ??DS18B20_SendConvert?relay,0203H
        PUBLIC ??DS18B20_Write?relay
        FUNCTION ??DS18B20_Write?relay,0203H
        PUBLIC ??delay_nus?relay
        FUNCTION ??delay_nus?relay,0203H
        PUBLIC DS18B20_GetTem
        FUNCTION DS18B20_GetTem,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC DS18B20_Init
        FUNCTION DS18B20_Init,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC DS18B20_Read
        FUNCTION DS18B20_Read,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC DS18B20_SendConvert
        FUNCTION DS18B20_SendConvert,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC DS18B20_Write
        FUNCTION DS18B20_Write,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC FRACTION_INDEX
        PUBWEAK P1DIR
        PUBWEAK _A_P1
        PUBLIC delay_nus
        FUNCTION delay_nus,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC sensor_data_value
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
DS18B20_GetTem      SYMBOL "DS18B20_GetTem"
??DS18B20_GetTem?relay SYMBOL "?relay", DS18B20_GetTem
DS18B20_Init        SYMBOL "DS18B20_Init"
??DS18B20_Init?relay SYMBOL "?relay", DS18B20_Init
DS18B20_Read        SYMBOL "DS18B20_Read"
??DS18B20_Read?relay SYMBOL "?relay", DS18B20_Read
DS18B20_SendConvert SYMBOL "DS18B20_SendConvert"
??DS18B20_SendConvert?relay SYMBOL "?relay", DS18B20_SendConvert
DS18B20_Write       SYMBOL "DS18B20_Write"
??DS18B20_Write?relay SYMBOL "?relay", DS18B20_Write
delay_nus           SYMBOL "delay_nus"
??delay_nus?relay   SYMBOL "?relay", delay_nus

// D:\∏ˆ»À÷ÿ“™◊ ¡œ(Œ…æ)\yuanwm\◊¿√Ê\ZStack-CC2530-2.2.0-1.3.0\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\MyfirstAPP\Source\DS18B20.C
//    1 /**************************************************
//    2   * DS18B20œ‡πÿπ¶ƒ‹µƒ µœ÷
//    3   * œ‡πÿŒƒº˛£∫DS18B20.C
//    4   * ±‡–¥»’∆⁄£∫2011.1.4
//    5   * –ﬁ∏ƒ¿˙ ∑:
//    6   *   2010.1.4 16:48 µ˜’˚¡À±‰¡ø°¢∂‘∫Ø ˝Ω¯––”≈ªØ
//    7   *   2010.1.4 10:20 µ˜’˚¡À’˝∏∫Œ¬∂»◊™ªª,ÕÍ…∆◊¢ Õ
//    8 
//    9 **************************************************/
//   10 #include "DS18B20.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   11 unsigned char sensor_data_value[2];       //¥´∏–∆˜ ˝æ›
sensor_data_value:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   12 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   13 unsigned char FRACTION_INDEX[16] = {0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9 };//–° ˝÷µ≤È—Ø±Ì
FRACTION_INDEX:
        DS 16
        REQUIRE `?<Initializer for FRACTION_INDEX>`
        REQUIRE __INIT_XDATA_I
//   14 
//   15 
//   16 
//   17 /*
//   18  *    —” ±∫Ø ˝    cc2530 32Mæß’Ò 1Œ¢√Ó
//   19  *     ‰»Î≤Œ ˝£∫  —” ± ±º‰£®timeout Œ¢√Î£©
//   20  *     ‰≥ˆ≤Œ ˝£∫  Œﬁ
//   21  *    ∑µªÿ≤Œ ˝£∫  Œﬁ
//   22  *
//   23  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   24 void delay_nus(unsigned int timeout)
delay_nus:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function delay_nus
//   25 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??delay_nus_0
//   26     while (timeout--)
//   27     {
//   28         asm("NOP");
??delay_nus_1:
        NOP
//   29         asm("NOP");
        NOP
//   30         asm("NOP");
        NOP
//   31 
//   32       
//   33     }
??delay_nus_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R0
        JNZ     ??delay_nus_2
        MOV     A,R1
??delay_nus_2:
        JNZ     ??delay_nus_1
//   34 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   35 
//   36 /*
//   37  *    –¥√¸¡Ó∫Ø ˝
//   38  *     ‰»Î≤Œ ˝£∫  √¸¡Ó£®DS18B20.H÷–∂®“Â£©
//   39  *     ‰≥ˆ≤Œ ˝£∫  Œﬁ
//   40  *    ∑µªÿ≤Œ ˝£∫  Œﬁ
//   41  *
//   42  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   43 void DS18B20_Write(unsigned char cmd)
DS18B20_Write:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function DS18B20_Write
//   44 {
        FUNCALL DS18B20_Write, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   45     unsigned char i;
//   46     SET_OUT();                  //…Ë÷√IOŒ™ ‰≥ˆ£¨2530->DS18B20
        ORL     0xfe,#0x80
//   47     
//   48     /*√ø¥Œ“ªŒª£¨—≠ª∑8¥Œ*/
//   49     for(i=0; i<8; i++)
        MOV     R6,#0x0
//   50     {
//   51         CL_DQ();              //IOŒ™µÕ    
??DS18B20_Write_0:
        CLR     0x90.7
//   52         if( cmd & (1<<i) )    //–¥ ˝æ›¥”µÕŒªø™ º
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ANL     A,R7
        JZ      ??DS18B20_Write_1
//   53         {
//   54           SET_DQ();           //IO ‰»Î∏ﬂµÁ∆Ω
        SETB    0x90.7
        SJMP    ??DS18B20_Write_2
//   55         }
//   56         else
//   57         {
//   58           CL_DQ();            //IO ‰≥ˆµÕµÁ∆Ω
??DS18B20_Write_1:
        CLR     0x90.7
//   59         }
//   60         delay_nus(40);        //±£≥÷15~60us
??DS18B20_Write_2:
        ; Setup parameters for call to function delay_nus
        MOV     R2,#0x28
        MOV     R3,#0x0
        LCALL   ??delay_nus?relay
//   61         SET_DQ();             //IOø⁄¿≠∏ﬂ
        SETB    0x90.7
//   62     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??DS18B20_Write_0
//   63     SET_DQ();                 //IOø⁄¿≠∏ﬂ
        SETB    0x90.7
        CFI EndBlock cfiBlock1
//   64 }
        REQUIRE ?Subroutine2
        REQUIRE _A_P1
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   65 
//   66 
//   67 /*
//   68  *    ∂¡ ˝æ›∫Ø ˝
//   69  *     ‰»Î≤Œ ˝£∫  Œﬁ
//   70  *     ‰≥ˆ≤Œ ˝£∫  Œﬁ
//   71  *    ∑µªÿ≤Œ ˝£∫  ∂¡»°µƒ ˝æ›
//   72  *
//   73  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   74 unsigned char DS18B20_Read(void)
DS18B20_Read:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function DS18B20_Read
//   75 {
        FUNCALL DS18B20_Read, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//   76     unsigned char rdData;     //∂¡≥ˆµƒ ˝æ›
//   77     unsigned char i, dat;     //¡Ÿ ±±‰¡ø
//   78     
//   79     rdData = 0;               //∂¡≥ˆµƒ ˝æ›≥ı ºªØŒ™0     
        MOV     ?V0 + 0,#0x0
//   80     
//   81     /* √ø¥Œ∂¡“ªŒª£¨∂¡8¥Œ */
//   82     for(i=0; i<8; i++)
        MOV     R6,#0x0
//   83     {
//   84         SET_OUT();
??DS18B20_Read_0:
        ORL     0xfe,#0x80
//   85         CL_DQ();            //IO¿≠µÕ
        CLR     0x90.7
//   86         SET_DQ();           //IO¿≠∏ﬂ
        SETB    0x90.7
//   87         SET_IN();           //…Ë÷√IO∑ΩœÚŒ™ ‰»Î DS18B20->CC2530
        ANL     0xfe,#0x7f
//   88         dat = DQ;           //∂¡ ˝æ›,¥”µÕŒªø™ º
        MOV     C,0x90.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     R3,?V0 + 2
        MOV     A,R2
        JZ      ??DS18B20_Read_1
//   89         
//   90         if(dat)
//   91         {
//   92           rdData |= (1<<i); //»Áπ˚∂¡≥ˆµƒ ˝æ›ŒªŒ™’˝
        MOV     A,R3
        ORL     ?V0 + 0,A
        SJMP    ??DS18B20_Read_2
//   93         }
//   94         else
//   95         {
//   96           rdData &= ~(1<<i);//»Áπ˚∂¡≥ˆµƒ ˝æ›ŒªŒ™∏∫
??DS18B20_Read_1:
        MOV     A,R3
        CPL     A
        ANL     ?V0 + 0,A
//   97         }
//   98         
//   99         delay_nus(70);      //±£≥÷60~120us
??DS18B20_Read_2:
        ; Setup parameters for call to function delay_nus
        MOV     R2,#0x46
        MOV     R3,#0x0
        LCALL   ??delay_nus?relay
//  100         SET_OUT();          //…Ë÷√IO∑ΩœÚŒ™ ‰≥ˆ CC2530->DS18B20
        ORL     0xfe,#0x80
//  101 
//  102     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??DS18B20_Read_0
//  103     return (rdData);        //∑µªÿ∂¡≥ˆµƒ ˝æ›
        MOV     R1,?V0 + 0
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
        REQUIRE P1DIR
//  104 }
//  105 
//  106 
//  107 /*
//  108  *    DS18B20≥ı ºªØ/∏¥Œª∫Ø ˝
//  109  *     ‰»Î≤Œ ˝£∫  Œﬁ
//  110  *     ‰≥ˆ≤Œ ˝£∫  Œﬁ
//  111  *    ∑µªÿ≤Œ ˝£∫  Œﬁ
//  112  *
//  113  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  114 void DS18B20_Init(void)
DS18B20_Init:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function DS18B20_Init
//  115 {
        FUNCALL DS18B20_Init, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_Init, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_Init, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  116     SET_OUT();
        ORL     0xfe,#0x80
//  117     SET_DQ();         //IOø⁄¿≠∏ﬂ
        SETB    0x90.7
//  118     CL_DQ();          //IOø⁄¿≠µÕ
        CLR     0x90.7
//  119     delay_nus(550);   //IO¿≠µÕ∫Û±£≥÷“ª∂Œ ±º‰ 480-960us
        ; Setup parameters for call to function delay_nus
        MOV     R2,#0x26
        MOV     R3,#0x2
        LCALL   ??delay_nus?relay
//  120     SET_DQ();         // Õ∑≈
        SETB    0x90.7
//  121     SET_IN();         //IO∑ΩœÚŒ™ ‰»Î DS18B20->CC2530
        ANL     0xfe,#0x7f
//  122     delay_nus(40);    // Õ∑≈◊‹œﬂ∫Ûµ»¥˝15-60us
        ; Setup parameters for call to function delay_nus
        MOV     R2,#0x28
        MOV     R3,#0x0
        LCALL   ??delay_nus?relay
//  123     
//  124     /* µ»¥˝DQ±‰µÕ */
//  125     while(DQ)
??DS18B20_Init_0:
        MOV     C,0x90.7
        JC      ??DS18B20_Init_0
//  126     {
//  127         ; 
//  128     }
//  129     delay_nus(100);   //ºÏ≤‚µΩDQ ±‰µÕ∫Û£¨—” ±60-240us
        ; Setup parameters for call to function delay_nus
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??delay_nus?relay
//  130     SET_OUT();        //…Ë÷√IO∑ΩœÚŒ™ ‰≥ˆ CC2530->DS18B20
        ORL     0xfe,#0x80
//  131     SET_DQ();         //IO¿≠∏ﬂ
        SETB    0x90.7
        CFI EndBlock cfiBlock4
//  132 }
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  133 
//  134 
//  135 /*
//  136  *    DS18B20 ◊™ªªŒ¬∂»∫Ø ˝
//  137  *     ‰»Î≤Œ ˝£∫  Œﬁ
//  138  *     ‰≥ˆ≤Œ ˝£∫  Œﬁ
//  139  *    ∑µªÿ≤Œ ˝£∫  Œﬁ
//  140  *
//  141  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  142 void DS18B20_SendConvert(void)
DS18B20_SendConvert:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function DS18B20_SendConvert
//  143 {
        FUNCALL DS18B20_SendConvert, DS18B20_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_SendConvert, DS18B20_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_SendConvert, DS18B20_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  144     DS18B20_Init();               //∏¥Œª18B20
        ; Setup parameters for call to function DS18B20_Init
        LCALL   ?Subroutine0 & 0xFFFF
//  145     DS18B20_Write(SKIP_ROM);      //∑¢≥ˆÃ¯π˝ROM∆•≈‰≤Ÿ◊˜
//  146     DS18B20_Write(CONVERT_T);     //∆Ù∂ØŒ¬∂»◊™ªª
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function DS18B20_Write
        MOV     R1,#0x44
        LCALL   ??DS18B20_Write?relay
//  147 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock6
//  148 
//  149 
//  150 /*
//  151  *    DS18B20ªÒ»°Œ¬∂»∫Ø ˝
//  152  *     ‰»Î≤Œ ˝£∫  Œﬁ
//  153  *     ‰≥ˆ≤Œ ˝£∫  Œﬁ
//  154  *    ∑µªÿ≤Œ ˝£∫  Œﬁ
//  155  *
//  156  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  157 void DS18B20_GetTem(void)
DS18B20_GetTem:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function DS18B20_GetTem
//  158 {
        FUNCALL DS18B20_GetTem, DS18B20_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_GetTem, DS18B20_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_GetTem, DS18B20_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_GetTem, DS18B20_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DS18B20_GetTem, DS18B20_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  159     unsigned char tem_h,tem_l;    //Œ¬∂»∏ﬂŒª◊÷Ω⁄º∞µÕŒª◊÷Ω⁄
//  160     unsigned char a,b;            //¡Ÿ ±±‰¡ø
//  161     unsigned char flag;           //Œ¬∂»’˝∏∫±Íº«£¨’˝Œ™0£¨∏∫Œ™1
//  162     
//  163     DS18B20_Init();               //DS18B20∏¥Œª       
        ; Setup parameters for call to function DS18B20_Init
        LCALL   ?Subroutine0 & 0xFFFF
//  164     DS18B20_Write(SKIP_ROM);      //Ã¯π˝ROM∆•≈‰
//  165     
//  166     DS18B20_Write(RD_SCRATCHPAD); //–¥±„º„
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function DS18B20_Write
        MOV     R1,#-0x42
        LCALL   ??DS18B20_Write?relay
//  167     tem_l = DS18B20_Read();       //∂¡Œ¬∂»µÕŒª
        ; Setup parameters for call to function DS18B20_Read
        LCALL   ??DS18B20_Read?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  168     tem_h = DS18B20_Read();       //∂¡Œ¬∂»∏ﬂŒª
        ; Setup parameters for call to function DS18B20_Read
        LCALL   ??DS18B20_Read?relay
        MOV     A,R1
        MOV     R2,A
//  169 
//  170     /* ≈–∂œŒ¬∂»’˝∏∫ */
//  171     if(tem_h & 0x80)
        SWAP    A
        ANL     A,#0xf0
        MOV     R3,A
        MOV     A,?V0 + 0
        SWAP    A
        ANL     A,#0xf
        MOV     R4,A
        MOV     A,R2
        MOV     C,0xE0 /* A   */.7
        JNC     ??DS18B20_GetTem_0
//  172     {
//  173         flag = 1;                 //Œ¬∂»Œ™∏∫
        MOV     R5,#0x1
//  174         a = (tem_l>>4);           //»°Œ¬∂»µÕ4Œª‘≠¬Î
        MOV     A,R4
        MOV     R6,A
//  175         b = (tem_h<<4)& 0xf0;     //»°Œ¬∂»∏ﬂ4Œª‘≠¬Î
//  176         tem_h = ~(a|b) + 1;       //»°’˚ ˝≤ø∑÷ ˝÷µ£¨≤ª∑˚∫≈Œª
        MOV     A,R3
        ORL     A,R6
        CPL     A
        INC     A
        MOV     R2,A
//  177         
//  178         tem_l = ~(a&0x0f) + 1;    //»°–° ˝≤ø∑÷‘≠÷µ£¨≤ª∫¨∑˚∫≈Œª
        MOV     A,#0xf
        ANL     A,R6
        CPL     A
        INC     A
        MOV     ?V0 + 0,A
        SJMP    ??DS18B20_GetTem_1
//  179     }
//  180     else
//  181     {
//  182         flag = 0;                 //Œ™’˝
??DS18B20_GetTem_0:
        MOV     R5,#0x0
//  183         a = tem_h<<4;
//  184         a += (tem_l&0xf0)>>4;     //µ√µΩ’˚ ˝≤ø∑÷÷µ 
//  185         b = tem_l&0x0f;           //µ√≥ˆ–° ˝≤ø∑÷÷µ
//  186         tem_h = a;                //’˚ ˝≤ø∑÷
        MOV     A,R4
        ADD     A,R3
        MOV     R2,A
//  187         tem_l = b&0xff;           //–° ˝≤ø∑÷
        ANL     ?V0 + 0,#0xf
//  188     }
//  189     
//  190     sensor_data_value[0] = FRACTION_INDEX[tem_l]; //≤È±Ìµ√–° ˝÷µ
??DS18B20_GetTem_1:
        MOV     A,?V0 + 0
        ADD     A,#(FRACTION_INDEX & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((FRACTION_INDEX >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#sensor_data_value
        MOVX    @DPTR,A
//  191     sensor_data_value[1] = tem_h| (flag<<7);      //’˚ ˝≤ø∑÷£¨∞¸¿®∑˚∫≈Œª
        MOV     A,R5
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        RRC     A
        RRC     A
        ANL     A,#0x80
        ORL     A,R2
        MOV     DPTR,#(sensor_data_value + 1)
        MOVX    @DPTR,A
//  192 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        LCALL   ??DS18B20_Init?relay
        ; Setup parameters for call to function DS18B20_Write
        ; Setup parameters for call to function DS18B20_Write
        MOV     R1,#-0x34
        LCALL   ??DS18B20_Write?relay
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for FRACTION_INDEX>`:
        DB 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_nus?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_nus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DS18B20_Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DS18B20_Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DS18B20_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DS18B20_Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DS18B20_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DS18B20_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DS18B20_SendConvert?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DS18B20_SendConvert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DS18B20_GetTem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DS18B20_GetTem

        END
//  193 
//  194 
//  195 
//  196 
// 
// 337 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  16 bytes in segment XDATA_I
//  16 bytes in segment XDATA_ID
//   2 bytes in segment XDATA_Z
// 
// 389 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//  18 bytes of XDATA memory
//
//Errors: none
//Warnings: none
